import { Keybind } from ".";

export default [
    // { command: '-workbench.action.terminal.runRecentCommand', key: 'ctrl+alt+r', when: 'terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled' },
    // { command: '-workbench.view.debug', key: 'ctrl+shift+d', when: 'viewContainer.workbench.view.debug.enabled' },
    // { command: '-inlineChat.quickVoice.start', key: 'ctrl+k i', when: 'editorFocus && hasSpeechProvider && !inlineChat.quickChatInProgress' },
    // { command: '-inlineChat.quickVoice.stop', key: 'ctrl+k i', when: 'hasSpeechProvider && inlineChat.quickChatInProgress' },
    // { command: '-workbench.action.copyEditorToNewWindow', key: 'ctrl+k o', when: 'activeEditor' },
    // { command: '-workbench.action.showTreeHover', key: 'ctrl+k ctrl+i', when: 'customTreeView && listFocus && !inputFocus && !treestickyScrollFocused' },
    // { command: 'editor.emmet.action.evaluateMathExpression', key: 'ctrl+m' },
    // { command: '-editor.action.clipboardPasteAction', key: 'shift+insert' },
    // { command: '-notebook.cell.paste', key: 'v', when: 'notebookEditorFocused && !inputFocus && !notebookOutputInputFocused' },
    // { command: '-editor.action.insertSnippet', key: 'ctrl+alt+j', when: "editorTextFocus && !editorReadonly && editorLangId == 'nushell'" },
    // { command: '-inlineChat.start', key: 'ctrl+i', when: 'inlineChatHasProvider && !editorReadonly' },
    // { command: '-editor.action.triggerSuggest', key: 'ctrl+i', when: 'editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible' },
    // { command: '-markdown.extension.editing.toggleItalic', key: 'ctrl+i', when: 'editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/' },
    // { command: '-toggleSuggestionDetails', key: 'ctrl+i', when: 'suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus' },
    // { command: '-focusSuggestion', key: 'ctrl+i', when: 'suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion' },
    // { command: '-github.copilot.terminal.suggestCommand', key: 'ctrl+i', when: 'terminalFocus' },
    // { command: '-workbench.action.tasks.build', key: 'ctrl+shift+b', when: 'taskCommandsRegistered' },
    // { command: '-editor.action.selectHighlights', key: 'ctrl+shift+l', when: 'editorFocus' },
    // { command: '-workbench.view.debug', key: 'ctrl+shift+d', when: 'viewContainer.workbench.view.debug.enabled' },
    // { command: '-workbench.action.focusFirstEditorGroup', key: 'ctrl+1' },
    // { command: '-workbench.view.explorer', key: 'ctrl+shift+e', when: 'viewContainer.workbench.view.explorer.enabled' },
    // { command: '-workbench.view.scm', key: 'ctrl+shift+g', when: 'workbench.scm.active' },
    // { command: '-workbench.action.focusSecondEditorGroup', key: 'ctrl+2' },
    // { command: '-workbench.action.focusThirdEditorGroup', key: 'ctrl+3' },
    // { command: '-editor.action.copyLinesDownAction', key: 'shift+alt+down', when: 'editorTextFocus && !editorReadonly' },
    // { command: '-notebook.cell.copyDown', key: 'shift+alt+down', when: 'notebookEditorFocused && !inputFocus' },
    // { command: '-markdown.extension.onCopyLineDown', key: 'shift+alt+down', when: 'editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/\n' },
    // { command: '-editor.action.copyLinesUpAction', key: 'shift+alt+up', when: 'editorTextFocus && !editorReadonly' },
    // { command: '-notebook.cell.copyUp', key: 'shift+alt+up', when: 'notebookEditorFocused && !inputFocus' },
    // { command: '-markdown.extension.onCopyLineUp', key: 'shift+alt+up', when: 'editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/\n' },
    // { command: '-editor.action.insertCursorAtEndOfEachLineSelected', key: 'shift+alt+i', when: 'editorTextFocus' },
    // { command: '-editor.action.addCommentLine', key: 'ctrl+k ctrl+c', when: 'editorTextFocus && !editorReadonly' },
    // { command: '-workbench.action.debug.restart', key: 'ctrl+shift+f5', when: 'inDebugMode' },
    // { command: '-workbench.action.previousEditorInGroup', key: 'ctrl+k ctrl+pageup' },
    // { command: '-workbench.action.nextEditorInGroup', key: 'ctrl+k ctrl+pagedown' },
    // { command: '-editor.action.jumpToBracket', key: 'ctrl+shift+oem_5', when: 'editorTextFocus' },
    // { command: '-workbench.action.toggleSidebarVisibility', key: 'ctrl+b' },
    // { command: '-editor.action.organizeImports', key: 'shift+alt+o', when: 'textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/' },
    // { command: '-workbench.action.files.openFile', key: 'ctrl+o', when: 'true' },
    // { command: '-workbench.action.files.openFolderViaWorkspace', key: 'ctrl+o', when: "!openFolderWorkspaceSupport && workbenchState == 'workspace'" },
    // { command: '-workbench.action.files.openFileFolder', key: 'ctrl+o', when: 'isMacNative && openFolderWorkspaceSupport' },
    // { command: '-workbench.action.files.openLocalFile', key: 'ctrl+o', when: 'remoteFileDialogVisible' },
    // { command: '-workbench.action.openSettings', key: 'ctrl+oem_comma' },
    // { command: '-workbench.action.files.saveAs', key: 'ctrl+shift+s' },
    // { command: '-workbench.action.files.saveLocalFile', key: 'ctrl+shift+s', when: 'remoteFileDialogVisible' },
    // { command: '-saveAll', key: 'ctrl+k s' },
    // { command: '-workbench.action.files.saveWithoutFormatting', key: 'ctrl+k ctrl+shift+s' },
    // { command: '-markdown.extension.editing.toggleStrikethrough', key: 'alt+s', when: 'editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/' },
    // { command: '-workbench.action.chat.insertCodeBlock', key: 'ctrl+enter', when: 'accessibilityModeEnabled && hasChatProvider && inChat' },
    // { command: '-github.copilot.generate', key: 'ctrl+enter', when: 'editorTextFocus && github.copilot.activated && !inInteractiveInput && !interactiveEditorFocused' },
    // {
    //     command: '-extension.node-debug.startWithStopOnEntry',
    //     key: 'f11',
    //     when: "!inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'node' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-node'\n",
    // },
    // { command: '-workbench.action.debug.stepInto', key: 'f11', when: "debugState != 'inactive'" },
    // { command: '-workbench.action.toggleFullScreen', key: 'f11', when: '!isIOS' },
    // { command: '-workbench.action.toggleZenMode', key: 'ctrl+k z' },
    // { command: '-jupyter.runcurrentcell', key: 'ctrl+enter', when: 'editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused\n' },
    // { command: '-jupyter.runByLineStop', key: 'ctrl+enter', when: "notebookCellResource in 'jupyter.notebookeditor.runByLineCells'" },
    // { command: '-notebook.cell.executeAndFocusContainer', key: 'ctrl+enter', when: 'notebookCellListFocused || editorTextFocus && inputFocus && notebookEditorFocused' },
    // { command: '-notebook.cell.insertCodeCellBelow', key: 'ctrl+enter', when: 'notebookCellListFocused && !inputFocus' },
    // { command: '-workbench.action.quickOpenNavigatePreviousInFilePicker', key: 'ctrl+shift+e', when: 'inFilesPicker && inQuickOpen' },
    // { command: '-workbench.action.closeWindow', key: 'ctrl+shift+w' },
    // { command: '-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup', key: 'ctrl+tab', when: '!activeEditorGroupEmpty' },
    // { command: '-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup', key: 'ctrl+shift+tab', when: '!activeEditorGroupEmpty' },
    // { command: '-workbench.action.quickOpenNavigateNextInViewPicker', key: 'ctrl+q', when: 'inQuickOpen && inViewsPicker' },
    // { command: '-workbench.action.quickOpenView', key: 'ctrl+q' },
    // { command: '-workbench.action.quickOpenNavigatePreviousInViewPicker', key: 'ctrl+shift+q', when: 'inQuickOpen && inViewsPicker' },
    // { command: '-editor.action.marker.nextInFiles', key: 'f8', when: 'editorFocus' },
    // { command: '-editor.action.marker.prevInFiles', key: 'shift+f8', when: 'editorFocus' },
    // { command: '-breadcrumbs.focusAndSelect', key: 'ctrl+shift+oem_period', when: 'breadcrumbsPossible && breadcrumbsVisible' },
    // { command: '-breadcrumbs.focus', key: 'ctrl+shift+oem_1', when: 'breadcrumbsPossible && breadcrumbsVisible' },
    // { command: '-breadcrumbs.focusNext', key: 'ctrl+right', when: 'breadcrumbsActive && breadcrumbsVisible' },
    // { command: '-breadcrumbs.focusNext', key: 'right', when: 'breadcrumbsActive && breadcrumbsVisible' },
    // { command: '-breadcrumbs.focusNextWithPicker', key: 'ctrl+right', when: 'breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus' },
    // { command: '-breadcrumbs.focusPrevious', key: 'ctrl+left', when: 'breadcrumbsActive && breadcrumbsVisible' },
    // { command: '-breadcrumbs.focusPrevious', key: 'left', when: 'breadcrumbsActive && breadcrumbsVisible' },
    // { command: '-breadcrumbs.focusPreviousWithPicker', key: 'ctrl+left', when: 'breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus' },
    // { command: '-breadcrumbs.revealFocused', key: 'ctrl+enter', when: 'breadcrumbsActive && breadcrumbsVisible' },
    // { command: '-breadcrumbs.revealFocused', key: 'space', when: 'breadcrumbsActive && breadcrumbsVisible' },
    // { command: '-breadcrumbs.revealFocusedFromTreeAside', key: 'ctrl+enter', when: 'breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus' },
    // { command: '-breadcrumbs.selectEditor', key: 'escape', when: 'breadcrumbsActive && breadcrumbsVisible' },
    // { command: '-breadcrumbs.selectFocused', key: 'down', when: 'breadcrumbsActive && breadcrumbsVisible' },
    // { command: '-breadcrumbs.selectFocused', key: 'enter', when: 'breadcrumbsActive && breadcrumbsVisible' },
    // { command: '-references-view.findReferences', key: 'shift+alt+f12', when: 'editorHasReferenceProvider' },
    // { command: '-workbench.action.openRecent', key: 'ctrl+r' },
    // { command: '-editor.action.goToImplementation', key: 'ctrl+f12', when: 'editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor' },
    // { command: '-editor.action.autoFix', key: 'shift+alt+oem_period', when: 'textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/' },
    // { command: '-editor.action.accessibleViewGoToSymbol', key: 'ctrl+shift+oem_period', when: 'accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown' },
    // { command: '-editor.action.inPlaceReplace.down', key: 'ctrl+shift+oem_period', when: 'editorTextFocus && !editorReadonly' },
    // { command: '-editor.action.clipboardPasteAction', key: 'ctrl+v' },
    // {
    //     command: '-workbench.action.terminal.focus',
    //     key: 'ctrl+down',
    //     when: "accessibilityModeEnabled && accessibleViewOnLastLine && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewOnLastLine && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'",
    // },
    // { command: '-workbench.action.showAllSymbols', key: 'ctrl+t' },
    // { command: '-workbench.action.terminal.toggleTerminal', key: 'ctrl+oem_3', when: 'terminal.active' },
    // { command: '-workbench.action.terminal.new', key: 'ctrl+shift+oem_3', when: 'terminalProcessSupported || terminalWebExtensionContributedProfile' },
    // {
    //     command: '-workbench.action.terminal.runRecentCommand',
    //     key: 'ctrl+r',
    //     when: "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported || accessibilityModeEnabled && accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'",
    // },
    // { command: '-workbench.action.quickOpenNavigateNextInRecentFilesPicker', key: 'ctrl+r', when: 'inQuickOpen && inRecentFilesPicker' },
    // { command: '-python.refreshTensorBoard', key: 'ctrl+r', when: 'python.hasActiveTensorBoardSession' },
    // { command: '-workbench.action.gotoLine', key: 'ctrl+g' },
    // { command: '-editor.action.showHover', key: 'ctrl+k ctrl+i', when: 'editorTextFocus' },
    // { command: '-editor.action.selectAll', key: 'ctrl+a' },
    // { command: '-notification.acceptPrimaryAction', key: 'ctrl+shift+a', when: 'notificationFocus || notificationToastsVisible' },
    // { command: '-workbench.action.terminal.openNativeConsole', key: 'ctrl+shift+c', when: '!terminalFocus' },
    // { command: '-workbench.action.terminal.openDetectedLink', key: 'ctrl+shift+g', when: "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal'" },
    // { command: '-workbench.view.extension.thunder-client', key: 'ctrl+shift+r' },
    // { command: '-editor.action.refactor', key: 'ctrl+shift+r', when: 'editorHasCodeActionsProvider && textInputFocus && !editorReadonly' },
    // { command: '-rerunSearchEditorSearch', key: 'ctrl+shift+r', when: 'inSearchEditor' },
    // { command: '-workbench.action.splitEditor', key: 'ctrl+oem_5' },
    // { command: '-workbench.action.openGlobalKeybindings', key: 'ctrl+k ctrl+s' },
    // { command: '-cody.command.edit-code', key: 'ctrl+k', when: 'cody.activated && config.cody.internal.unstable && !editorReadonly' },
    // { command: '-workbench.action.editor.changeLanguageMode', key: 'ctrl+k m', when: '!notebookEditorFocused' },
    // { command: '-workbench.action.addComment', key: 'ctrl+k ctrl+alt+c' },
    // {
    //     command: '-editor.action.nextCommentingRange',
    //     key: 'ctrl+k ctrl+alt+down',
    //     when: "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'",
    // },
    // {
    //     command: '-editor.action.previousCommentingRange',
    //     key: 'ctrl+k ctrl+alt+up',
    //     when: "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'",
    // },
    // { command: '-editor.createFoldingRangeFromSelection', key: 'ctrl+k ctrl+oem_comma', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.debug.action.showDebugHover', key: 'ctrl+k ctrl+i', when: 'editorTextFocus && inDebugMode' },
    // { command: '-editor.action.defineKeybinding', key: 'ctrl+k ctrl+k', when: "resource == 'vscode-userdata:/c%3A/Users/Econn/AppData/Roaming/Code/User/keybindings.json'" },
    // { command: '-workbench.files.action.focusOpenEditorsView', key: 'ctrl+k e', when: 'workbench.explorer.openEditorsView.active' },
    // { command: '-workbench.files.action.compareWithClipboard', key: 'ctrl+k c' },
    // { command: '-workbench.files.action.compareWithSaved', key: 'ctrl+k d' },
    // { command: '-copyRelativeFilePath', key: 'ctrl+k ctrl+shift+c', when: '!editorFocus' },
    // { command: '-copyRelativeFilePath', key: 'ctrl+k ctrl+shift+c', when: 'editorFocus' },
    // { command: '-workbench.action.files.showOpenedFileInNewWindow', key: 'ctrl+k o', when: 'emptyWorkspaceSupport' },
    // { command: '-workbench.action.files.openFolder', key: 'ctrl+k ctrl+o', when: 'openFolderWorkspaceSupport' },
    // { command: '-workbench.action.showAllEditors', key: 'ctrl+k ctrl+p' },
    // { command: '-editor.foldAll', key: 'ctrl+k ctrl+0', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.foldAllBlockComments', key: 'ctrl+k ctrl+oem_2', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.foldAllExcept', key: 'ctrl+k ctrl+oem_minus', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.foldAllMarkerRegions', key: 'ctrl+k ctrl+8', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.foldLevel1', key: 'ctrl+k ctrl+1', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.foldLevel2', key: 'ctrl+k ctrl+2', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.foldLevel3', key: 'ctrl+k ctrl+3', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.foldLevel4', key: 'ctrl+k ctrl+4', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.foldLevel5', key: 'ctrl+k ctrl+5', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.foldLevel6', key: 'ctrl+k ctrl+6', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.foldLevel7', key: 'ctrl+k ctrl+7', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.foldRecursively', key: 'ctrl+k ctrl+oem_4', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.action.formatSelection', key: 'ctrl+k ctrl+f', when: 'editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly' },
    // { command: '-git.revertSelectedRanges', key: 'ctrl+k ctrl+r', when: 'isInDiffEditor && !operationInProgress' },
    // { command: '-git.stageSelectedRanges', key: 'ctrl+k ctrl+alt+s', when: 'isInDiffEditor && !operationInProgress' },
    // { command: '-git.unstageSelectedRanges', key: 'ctrl+k ctrl+n', when: 'isInDiffEditor && !operationInProgress' },
    // { command: '-workbench.action.navigateToLastEditLocation', key: 'ctrl+k ctrl+q' },
    // { command: '-workbench.action.keybindingsReference', key: 'ctrl+k ctrl+r' },
    // { command: '-inlineChat.start', key: 'ctrl+k i', when: 'editorFocus && inlineChatHasProvider && !editorReadonly' },
    // { command: '-java.view.package.copyRelativeFilePath', key: 'ctrl+k ctrl+shift+c', when: "focusedView == 'javaProjectExplorer' && java:serverMode == 'Standard'" },
    // { command: '-markdown.showPreviewToSide', key: 'ctrl+k v', when: "!notebookEditorFocused && editorLangId == 'markdown'" },
    // { command: '-editor.action.moveSelectionToNextFindMatch', key: 'ctrl+k ctrl+d', when: 'editorFocus' },
    // { command: '-notebook.cell.collapseCellInput', key: 'ctrl+k ctrl+c', when: 'notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed' },
    // { command: '-notebook.cell.collapseCellOutput', key: 'ctrl+k t', when: 'notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed' },
    // { command: '-notebook.cell.expandCellInput', key: 'ctrl+k ctrl+c', when: 'notebookCellInputIsCollapsed && notebookCellListFocused' },
    // { command: '-notebook.cell.expandCellOutput', key: 'ctrl+k t', when: 'notebookCellListFocused && notebookCellOutputIsCollapsed' },
    // { command: '-notebook.cell.split', key: 'ctrl+k ctrl+shift+oem_5', when: 'editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused' },
    // { command: '-notebook.cell.toggleOutputScrolling', key: 'ctrl+k y', when: 'notebookCellHasOutputs && notebookCellListFocused && !inputFocus' },
    // { command: '-notifications.showList', key: 'ctrl+k ctrl+shift+n' },
    // { command: '-editor.action.revealDefinitionAside', key: 'ctrl+k f12', when: 'editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor' },
    // { command: '-editor.action.revealDefinitionAside', key: 'ctrl+k ctrl+f12', when: 'editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor' },
    // { command: '-workbench.action.selectTheme', key: 'ctrl+k ctrl+t' },
    // { command: '-editor.action.removeCommentLine', key: 'ctrl+k ctrl+u', when: 'editorTextFocus && !editorReadonly' },
    // { command: '-editor.removeManualFoldingRanges', key: 'ctrl+k ctrl+oem_period', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.action.selectFromAnchorToCursor', key: 'ctrl+k ctrl+k', when: 'editorTextFocus && selectionAnchorSet' },
    // { command: '-editor.action.setSelectionAnchor', key: 'ctrl+k ctrl+b', when: 'editorTextFocus' },
    // {
    //     command: '-workbench.action.terminal.focusHover',
    //     key: 'ctrl+k ctrl+i',
    //     when: 'terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus',
    // },
    // { command: '-editor.toggleFold', key: 'ctrl+k ctrl+l', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.action.trimTrailingWhitespace', key: 'ctrl+k ctrl+x', when: 'editorTextFocus && !editorReadonly' },
    // { command: '-editor.unfoldAll', key: 'ctrl+k ctrl+j', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.unfoldAllExcept', key: 'ctrl+k ctrl+oem_plus', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.unfoldAllMarkerRegions', key: 'ctrl+k ctrl+9', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-editor.unfoldRecursively', key: 'ctrl+k ctrl+oem_6', when: 'editorTextFocus && foldingEnabled' },
    // { command: '-workbench.action.closeAllGroups', key: 'ctrl+k ctrl+shift+w' },
    // { command: '-workbench.action.closeAllEditors', key: 'ctrl+k ctrl+w' },
    // { command: '-workbench.action.closeEditorsInGroup', key: 'ctrl+k w' },
    // { command: '-workbench.action.closeUnmodifiedEditors', key: 'ctrl+k u' },
    // { command: '-workbench.action.focusAboveGroup', key: 'ctrl+k ctrl+up' },
    // { command: '-workbench.action.focusBelowGroup', key: 'ctrl+k ctrl+down' },
    // { command: '-workbench.action.focusLeftGroup', key: 'ctrl+k ctrl+left' },
    // { command: '-workbench.action.focusRightGroup', key: 'ctrl+k ctrl+right' },
    // { command: '-workbench.action.joinEditorInGroup', key: 'ctrl+k ctrl+shift+oem_5', when: 'sideBySideEditorActive' },
    // { command: '-workbench.action.keepEditor', key: 'ctrl+k enter' },
    // { command: '-workbench.action.moveActiveEditorGroupDown', key: 'ctrl+k down' },
    // { command: '-workbench.action.moveActiveEditorGroupLeft', key: 'ctrl+k left' },
    // { command: '-workbench.action.moveActiveEditorGroupRight', key: 'ctrl+k right' },
    // { command: '-workbench.action.moveActiveEditorGroupUp', key: 'ctrl+k up' },
    // { command: '-workbench.action.pinEditor', key: 'ctrl+k shift+enter', when: '!activeEditorIsPinned' },
    // { command: '-workbench.action.splitEditorDown', key: 'ctrl+k ctrl+oem_5' },
    // { command: '-workbench.action.splitEditorInGroup', key: 'ctrl+k ctrl+shift+oem_5', when: 'activeEditorCanSplitInGroup' },
    // { command: '-workbench.action.splitEditorLeft', key: 'ctrl+k ctrl+oem_5' },
    // { command: '-workbench.action.splitEditorOrthogonal', key: 'ctrl+k ctrl+oem_5' },
    // { command: '-workbench.action.splitEditorRight', key: 'ctrl+k ctrl+oem_5' },
    // { command: '-workbench.action.splitEditorUp', key: 'ctrl+k ctrl+oem_5' },
    // { command: '-workbench.action.toggleMaximizeEditorGroup', key: 'ctrl+k ctrl+m', when: 'editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups' },
    // { command: '-workbench.action.unpinEditor', key: 'ctrl+k shift+enter', when: 'activeEditorIsPinned' },
    // { command: '-workbench.action.closeFolder', key: 'ctrl+k f', when: "emptyWorkspaceSupport && workbenchState != 'empty'" },
    // { command: '-keybindings.editor.addKeybinding', key: 'ctrl+k ctrl+a', when: 'inKeybindings && keybindingFocus' },
    // { command: '-keybindings.editor.defineWhenExpression', key: 'ctrl+k ctrl+e', when: 'inKeybindings && keybindingFocus' },
    // { command: '-markdown.extension.closePreview', key: 'ctrl+k v', when: "activeWebviewPanelId == 'markdown.preview'" },
    // { command: '-togglePeekWidgetFocus', key: 'ctrl+k f2', when: 'inReferenceSearchEditor || referenceSearchVisible' },
    // { command: '-views.moveViewDown', key: 'ctrl+k down', when: "focusedView != ''" },
    // { command: '-views.moveViewLeft', key: 'ctrl+k left', when: "focusedView != ''" },
    // { command: '-views.moveViewRight', key: 'ctrl+k right', when: "focusedView != ''" },
    // { command: '-views.moveViewUp', key: 'ctrl+k up', when: "focusedView != ''" },
    // { command: '-workbench.action.compareEditor.openSide', key: 'ctrl+k shift+o', when: 'inDiffEditor' },
    // { command: '-workbench.action.files.copyPathOfActiveFile', key: 'ctrl+k p' },
    // { command: '-workbench.action.files.openLocalFolder', key: 'ctrl+k ctrl+o', when: 'remoteFileDialogVisible' },
    // { command: '-workbench.action.files.revealActiveFileInWindows', key: 'ctrl+k r' },
    // { command: '-workbench.action.showTreeHover', key: 'ctrl+k ctrl+i', when: 'customTreeView && listFocus && !inputFocus' },
    // { command: '-editor.action.insertCursorAbove', key: 'ctrl+alt+up', when: 'editorTextFocus' },
    // { command: '-editor.action.insertCursorBelow', key: 'ctrl+alt+down', when: 'editorTextFocus' },
    // { command: '-workbench.action.terminal.paste', key: 'ctrl+v', when: 'terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported' },
    // { command: '-workbench.action.terminal.paste', key: 'ctrl+shift+v', when: 'terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported' },
    // { command: '-breadcrumbs.toggleToOn', key: 'ctrl+shift+oem_period', when: '!config.breadcrumbs.enabled' },
    // { command: '-workbench.action.showCommands', key: 'f1' },
] as Keybind[]
