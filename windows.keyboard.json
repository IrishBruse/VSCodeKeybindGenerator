[
    {
        "key": "escape escape",
        "when": "inZenMode",
        "command": "workbench.action.exitZenMode"
    },
    {
        "key": "shift+escape",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek",
        "command": "closeReferenceSearch"
    },
    {
        "key": "escape",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek",
        "command": "closeReferenceSearch"
    },
    {
        "key": "escape",
        "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek",
        "command": "editor.closeTestPeek"
    },
    {
        "key": "shift+escape",
        "when": "editorHasSelection && textInputFocus",
        "command": "cancelSelection"
    },
    {
        "key": "escape",
        "when": "editorHasSelection && textInputFocus",
        "command": "cancelSelection"
    },
    {
        "key": "ctrl+end",
        "when": "textInputFocus",
        "command": "cursorBottom"
    },
    {
        "key": "ctrl+shift+end",
        "when": "textInputFocus",
        "command": "cursorBottomSelect"
    },
    {
        "key": "ctrl+shift+alt+down",
        "when": "textInputFocus",
        "command": "cursorColumnSelectDown"
    },
    {
        "key": "ctrl+shift+alt+left",
        "when": "textInputFocus",
        "command": "cursorColumnSelectLeft"
    },
    {
        "key": "ctrl+shift+alt+pagedown",
        "when": "textInputFocus",
        "command": "cursorColumnSelectPageDown"
    },
    {
        "key": "ctrl+shift+alt+pageup",
        "when": "textInputFocus",
        "command": "cursorColumnSelectPageUp"
    },
    {
        "key": "ctrl+shift+alt+right",
        "when": "textInputFocus",
        "command": "cursorColumnSelectRight"
    },
    {
        "key": "ctrl+shift+alt+up",
        "when": "textInputFocus",
        "command": "cursorColumnSelectUp"
    },
    {
        "key": "down",
        "when": "textInputFocus",
        "command": "cursorDown"
    },
    {
        "key": "ctrl+shift+down",
        "when": "textInputFocus",
        "command": "cursorDownSelect"
    },
    {
        "key": "shift+down",
        "when": "textInputFocus",
        "command": "cursorDownSelect"
    },
    {
        "key": "end",
        "when": "textInputFocus",
        "command": "cursorEnd",
        "args": {
            "sticky": false
        }
    },
    {
        "key": "shift+end",
        "when": "textInputFocus",
        "command": "cursorEndSelect",
        "args": {
            "sticky": false
        }
    },
    {
        "key": "home",
        "when": "textInputFocus",
        "command": "cursorHome"
    },
    {
        "key": "shift+home",
        "when": "textInputFocus",
        "command": "cursorHomeSelect"
    },
    {
        "key": "left",
        "when": "textInputFocus",
        "command": "cursorLeft"
    },
    {
        "key": "shift+left",
        "when": "textInputFocus",
        "command": "cursorLeftSelect"
    },
    {
        "key": "pagedown",
        "when": "textInputFocus",
        "command": "cursorPageDown"
    },
    {
        "key": "shift+pagedown",
        "when": "textInputFocus",
        "command": "cursorPageDownSelect"
    },
    {
        "key": "pageup",
        "when": "textInputFocus",
        "command": "cursorPageUp"
    },
    {
        "key": "shift+pageup",
        "when": "textInputFocus",
        "command": "cursorPageUpSelect"
    },
    {
        "key": "right",
        "when": "textInputFocus",
        "command": "cursorRight"
    },
    {
        "key": "shift+right",
        "when": "textInputFocus",
        "command": "cursorRightSelect"
    },
    {
        "key": "ctrl+home",
        "when": "textInputFocus",
        "command": "cursorTop"
    },
    {
        "key": "ctrl+shift+home",
        "when": "textInputFocus",
        "command": "cursorTopSelect"
    },
    {
        "key": "up",
        "when": "textInputFocus",
        "command": "cursorUp"
    },
    {
        "key": "ctrl+shift+up",
        "when": "textInputFocus",
        "command": "cursorUpSelect"
    },
    {
        "key": "shift+up",
        "when": "textInputFocus",
        "command": "cursorUpSelect"
    },
    {
        "key": "shift+backspace",
        "when": "textInputFocus",
        "command": "deleteLeft"
    },
    {
        "key": "backspace",
        "when": "textInputFocus",
        "command": "deleteLeft"
    },
    {
        "key": "delete",
        "when": "textInputFocus",
        "command": "deleteRight"
    },
    {
        "key": "ctrl+a",
        "command": "editor.action.selectAll"
    },
    {
        "key": "ctrl+l",
        "when": "textInputFocus",
        "command": "expandLineSelection"
    },
    {
        "key": "ctrl+down",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorLast && !accessibilityModeEnabled && !isEmbeddedDiffEditor",
        "command": "inlineChat.arrowOutDown"
    },
    {
        "key": "ctrl+up",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorFirst && !accessibilityModeEnabled && !isEmbeddedDiffEditor",
        "command": "inlineChat.arrowOutUp"
    },
    {
        "key": "shift+tab",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus",
        "command": "outdent"
    },
    {
        "key": "ctrl+shift+z",
        "command": "redo"
    },
    {
        "key": "ctrl+y",
        "command": "redo"
    },
    {
        "key": "ctrl+down",
        "when": "textInputFocus",
        "command": "scrollLineDown"
    },
    {
        "key": "ctrl+up",
        "when": "textInputFocus",
        "command": "scrollLineUp"
    },
    {
        "key": "alt+pagedown",
        "when": "textInputFocus",
        "command": "scrollPageDown"
    },
    {
        "key": "alt+pageup",
        "when": "textInputFocus",
        "command": "scrollPageUp"
    },
    {
        "key": "tab",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus",
        "command": "tab"
    },
    {
        "key": "ctrl+z",
        "command": "undo"
    },
    {
        "key": "shift+down",
        "when": "editorColumnSelection && textInputFocus",
        "command": "cursorColumnSelectDown"
    },
    {
        "key": "shift+left",
        "when": "editorColumnSelection && textInputFocus",
        "command": "cursorColumnSelectLeft"
    },
    {
        "key": "shift+pagedown",
        "when": "editorColumnSelection && textInputFocus",
        "command": "cursorColumnSelectPageDown"
    },
    {
        "key": "shift+pageup",
        "when": "editorColumnSelection && textInputFocus",
        "command": "cursorColumnSelectPageUp"
    },
    {
        "key": "shift+right",
        "when": "editorColumnSelection && textInputFocus",
        "command": "cursorColumnSelectRight"
    },
    {
        "key": "shift+up",
        "when": "editorColumnSelection && textInputFocus",
        "command": "cursorColumnSelectUp"
    },
    {
        "key": "shift+escape",
        "when": "editorHasMultipleSelections && textInputFocus",
        "command": "removeSecondaryCursors"
    },
    {
        "key": "escape",
        "when": "editorHasMultipleSelections && textInputFocus",
        "command": "removeSecondaryCursors"
    },
    {
        "key": "ctrl+down",
        "when": "inlineChatFocused && inlineChatInnerCursorLast && notebookCellChatFocused && !accessibilityModeEnabled && !notebookCellEditorFocused",
        "command": "notebook.cell.chat.arrowOutDown"
    },
    {
        "key": "ctrl+up",
        "when": "inlineChatFocused && inlineChatInnerCursorFirst && notebookCellChatFocused && !accessibilityModeEnabled && !notebookCellEditorFocused",
        "command": "notebook.cell.chat.arrowOutUp"
    },
    {
        "key": "ctrl+up",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'",
        "command": "notebook.cell.focusChatWidget"
    },
    {
        "key": "ctrl+down",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'",
        "command": "notebook.cell.focusNextChatWidget"
    },
    {
        "key": "ctrl+down",
        "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'above'",
        "command": "inlineChat.focus"
    },
    {
        "key": "ctrl+up",
        "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'below'",
        "command": "inlineChat.focus"
    },
    {
        "key": "escape",
        "when": "inlineChatFocused && notebookCellChatFocused && notebookChatUserDidEdit && !notebookCellEditorFocused",
        "command": "notebook.cell.chat.acceptChanges"
    },
    {
        "key": "down",
        "when": "inlineChatFocused && notebookCellChatFocused",
        "command": "notebook.cell.chat.nextFromHistory"
    },
    {
        "key": "up",
        "when": "inlineChatFocused && notebookCellChatFocused",
        "command": "notebook.cell.chat.previousFromHistory"
    },
    {
        "key": "f12",
        "when": "inReferenceSearchEditor || referenceSearchVisible",
        "command": "goToNextReference"
    },
    {
        "key": "f4",
        "when": "inReferenceSearchEditor || referenceSearchVisible",
        "command": "goToNextReference"
    },
    {
        "key": "shift+f12",
        "when": "inReferenceSearchEditor || referenceSearchVisible",
        "command": "goToPreviousReference"
    },
    {
        "key": "shift+f4",
        "when": "inReferenceSearchEditor || referenceSearchVisible",
        "command": "goToPreviousReference"
    },
    {
        "key": "ctrl+enter",
        "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'",
        "command": "refactorPreview.apply"
    },
    {
        "key": "alt+enter",
        "when": "focusedView == 'workbench.view.testing'",
        "command": "testing.editFocusedTest"
    },
    {
        "key": "escape",
        "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !inlineChatFocused",
        "command": "notebook.cell.quitEdit"
    },
    {
        "key": "ctrl+alt+enter",
        "when": "inputFocus && notebookEditorFocused && !inlineChatFocused && notebookCellType == 'markup'",
        "command": "notebook.cell.quitEdit"
    },
    {
        "key": "escape",
        "when": "inlineChatHasProvider && inlineChatVisible && config.inlineChat.mode == 'preview'",
        "command": "inlineChat.cancel"
    },
    {
        "key": "escape",
        "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatUserDidEdit",
        "command": "inlineChat.close"
    },
    {
        "key": "escape",
        "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatUserDidEdit",
        "command": "inlineChat.discard"
    },
    {
        "key": "ctrl+f",
        "when": "editorFocus || editorIsOpen",
        "command": "actions.find"
    },
    {
        "key": "enter",
        "when": "breakpointWidgetVisible && inBreakpointWidget",
        "command": "breakpointWidget.action.acceptInput"
    },
    {
        "key": "ctrl+up",
        "when": "chatCursorAtTop && inChatInput && chatLocation == 'panel'",
        "command": "chat.action.focus"
    },
    {
        "key": "ctrl+up",
        "when": "inChatInput && isLinux && chatLocation == 'panel' || inChatInput && isWindows && chatLocation == 'panel'",
        "command": "chat.action.focus"
    },
    {
        "key": "shift+escape",
        "when": "breakpointWidgetVisible && textInputFocus",
        "command": "closeBreakpointWidget"
    },
    {
        "key": "escape",
        "when": "breakpointWidgetVisible && textInputFocus",
        "command": "closeBreakpointWidget"
    },
    {
        "key": "ctrl+u",
        "when": "textInputFocus",
        "command": "cursorUndo"
    },
    {
        "key": "ctrl+right",
        "when": "textInputFocus && !accessibilityModeEnabled",
        "command": "cursorWordEndRight"
    },
    {
        "key": "ctrl+shift+right",
        "when": "textInputFocus && !accessibilityModeEnabled",
        "command": "cursorWordEndRightSelect"
    },
    {
        "key": "ctrl+left",
        "when": "textInputFocus && !accessibilityModeEnabled",
        "command": "cursorWordLeft"
    },
    {
        "key": "ctrl+shift+left",
        "when": "textInputFocus && !accessibilityModeEnabled",
        "command": "cursorWordLeftSelect"
    },
    {
        "key": "ctrl+backspace",
        "when": "textInputFocus && !editorReadonly",
        "command": "deleteWordLeft"
    },
    {
        "key": "ctrl+delete",
        "when": "textInputFocus && !editorReadonly",
        "command": "deleteWordRight"
    },
    {
        "key": "f7",
        "when": "isInDiffEditor",
        "command": "editor.action.accessibleDiffViewer.next"
    },
    {
        "key": "shift+f7",
        "when": "isInDiffEditor",
        "command": "editor.action.accessibleDiffViewer.prev"
    },
    {
        "key": "ctrl+k ctrl+c",
        "when": "editorTextFocus && !editorReadonly",
        "command": "editor.action.addCommentLine"
    },
    {
        "key": "ctrl+d",
        "when": "editorFocus",
        "command": "editor.action.addSelectionToNextFindMatch"
    },
    {
        "key": "shift+alt+.",
        "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/",
        "command": "editor.action.autoFix"
    },
    {
        "key": "shift+alt+a",
        "when": "editorTextFocus && !editorReadonly",
        "command": "editor.action.blockComment"
    },
    {
        "key": "escape",
        "when": "editorTextFocus && selectionAnchorSet",
        "command": "editor.action.cancelSelectionAnchor"
    },
    {
        "key": "ctrl+f2",
        "when": "editorTextFocus && !editorReadonly",
        "command": "editor.action.changeAll"
    },
    {
        "key": "ctrl+insert",
        "command": "editor.action.clipboardCopyAction"
    },
    {
        "key": "ctrl+c",
        "command": "editor.action.clipboardCopyAction"
    },
    {
        "key": "shift+delete",
        "command": "editor.action.clipboardCutAction"
    },
    {
        "key": "ctrl+x",
        "command": "editor.action.clipboardCutAction"
    },
    {
        "key": "shift+insert",
        "command": "editor.action.clipboardPasteAction"
    },
    {
        "key": "ctrl+v",
        "command": "editor.action.clipboardPasteAction"
    },
    {
        "key": "ctrl+/",
        "when": "editorTextFocus && !editorReadonly",
        "command": "editor.action.commentLine"
    },
    {
        "key": "shift+alt+down",
        "when": "editorTextFocus && !editorReadonly",
        "command": "editor.action.copyLinesDownAction"
    },
    {
        "key": "shift+alt+up",
        "when": "editorTextFocus && !editorReadonly",
        "command": "editor.action.copyLinesUpAction"
    },
    {
        "key": "ctrl+shift+k",
        "when": "textInputFocus && !editorReadonly",
        "command": "editor.action.deleteLines"
    },
    {
        "key": "alt+f3",
        "when": "editorTextFocus && !textCompareEditorActive",
        "command": "editor.action.dirtydiff.next"
    },
    {
        "key": "shift+alt+f3",
        "when": "editorTextFocus && !textCompareEditorActive",
        "command": "editor.action.dirtydiff.previous"
    },
    {
        "key": "enter",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'",
        "command": "editor.action.extensioneditor.findNext"
    },
    {
        "key": "shift+enter",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'",
        "command": "editor.action.extensioneditor.findPrevious"
    },
    {
        "key": "ctrl+f",
        "when": "!editorFocus && activeEditor == 'workbench.editor.extension'",
        "command": "editor.action.extensioneditor.showfind"
    },
    {
        "key": "shift+alt+f",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor",
        "command": "editor.action.formatDocument"
    },
    {
        "key": "shift+alt+f",
        "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly",
        "command": "editor.action.formatDocument.none"
    },
    {
        "key": "ctrl+k ctrl+f",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly",
        "command": "editor.action.formatSelection"
    },
    {
        "key": "ctrl+down",
        "when": "editorHoverFocused",
        "command": "editor.action.goToBottomHover"
    },
    {
        "key": "end",
        "when": "editorHoverFocused",
        "command": "editor.action.goToBottomHover"
    },
    {
        "key": "enter",
        "when": "stickyScrollFocused",
        "command": "editor.action.goToFocusedStickyScrollLine"
    },
    {
        "key": "ctrl+f12",
        "when": "editorHasImplementationProvider && editorTextFocus",
        "command": "editor.action.goToImplementation"
    },
    {
        "key": "shift+f12",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor",
        "command": "editor.action.goToReferences"
    },
    {
        "key": "ctrl+up",
        "when": "editorHoverFocused",
        "command": "editor.action.goToTopHover"
    },
    {
        "key": "home",
        "when": "editorHoverFocused",
        "command": "editor.action.goToTopHover"
    },
    {
        "key": "escape",
        "when": "standaloneColorPickerVisible",
        "command": "editor.action.hideColorPicker"
    },
    {
        "key": "ctrl+shift+.",
        "when": "editorTextFocus && !editorReadonly",
        "command": "editor.action.inPlaceReplace.down"
    },
    {
        "key": "ctrl+shift+,",
        "when": "editorTextFocus && !editorReadonly",
        "command": "editor.action.inPlaceReplace.up"
    },
    {
        "key": "ctrl+]",
        "when": "editorTextFocus && !editorReadonly",
        "command": "editor.action.indentLines"
    },
    {
        "key": "escape",
        "when": "inlineEditVisible && !editorReadonly",
        "command": "editor.action.inlineEdit.reject"
    },
    {
        "key": "escape",
        "when": "inlineSuggestionVisible",
        "command": "editor.action.inlineSuggest.hide"
    },
    {
        "key": "alt+]",
        "when": "inlineSuggestionVisible && !editorReadonly",
        "command": "editor.action.inlineSuggest.showNext"
    },
    {
        "key": "alt+[",
        "when": "inlineSuggestionVisible && !editorReadonly",
        "command": "editor.action.inlineSuggest.showPrevious"
    },
    {
        "key": "enter",
        "when": "standaloneColorPickerFocused",
        "command": "editor.action.insertColorWithStandaloneColorPicker"
    },
    {
        "key": "ctrl+alt+up",
        "when": "editorTextFocus",
        "command": "editor.action.insertCursorAbove"
    },
    {
        "key": "shift+alt+i",
        "when": "editorTextFocus",
        "command": "editor.action.insertCursorAtEndOfEachLineSelected"
    },
    {
        "key": "ctrl+alt+down",
        "when": "editorTextFocus",
        "command": "editor.action.insertCursorBelow"
    },
    {
        "key": "ctrl+enter",
        "when": "editorTextFocus && !editorReadonly",
        "command": "editor.action.insertLineAfter"
    },
    {
        "key": "ctrl+shift+enter",
        "when": "editorTextFocus && !editorReadonly",
        "command": "editor.action.insertLineBefore"
    },
    {
        "key": "ctrl+shift+\\",
        "when": "editorTextFocus",
        "command": "editor.action.jumpToBracket"
    },
    {
        "key": "ctrl+shift+f2",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly",
        "command": "editor.action.linkedEditing"
    },
    {
        "key": "alt+f8",
        "when": "editorFocus",
        "command": "editor.action.marker.next"
    },
    {
        "key": "f8",
        "when": "editorFocus",
        "command": "editor.action.marker.nextInFiles"
    },
    {
        "key": "shift+alt+f8",
        "when": "editorFocus",
        "command": "editor.action.marker.prev"
    },
    {
        "key": "shift+f8",
        "when": "editorFocus",
        "command": "editor.action.marker.prevInFiles"
    },
    {
        "key": "alt+down",
        "when": "editorTextFocus && !editorReadonly",
        "command": "editor.action.moveLinesDownAction"
    },
    {
        "key": "alt+up",
        "when": "editorTextFocus && !editorReadonly",
        "command": "editor.action.moveLinesUpAction"
    },
    {
        "key": "ctrl+k ctrl+d",
        "when": "editorFocus",
        "command": "editor.action.moveSelectionToNextFindMatch"
    },
    {
        "key": "alt+f9",
        "command": "editor.action.nextCommentThreadAction"
    },
    {
        "key": "ctrl+k ctrl+alt+down",
        "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'",
        "command": "editor.action.nextCommentingRange"
    },
    {
        "key": "f3",
        "when": "editorFocus",
        "command": "editor.action.nextMatchFindAction"
    },
    {
        "key": "enter",
        "when": "editorFocus && findInputFocussed",
        "command": "editor.action.nextMatchFindAction"
    },
    {
        "key": "ctrl+f3",
        "when": "editorFocus",
        "command": "editor.action.nextSelectionMatchFindAction"
    },
    {
        "key": "shift+alt+o",
        "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/",
        "command": "editor.action.organizeImports"
    },
    {
        "key": "ctrl+[",
        "when": "editorTextFocus && !editorReadonly",
        "command": "editor.action.outdentLines"
    },
    {
        "key": "alt+down",
        "when": "editorHoverFocused",
        "command": "editor.action.pageDownHover"
    },
    {
        "key": "pagedown",
        "when": "editorHoverFocused",
        "command": "editor.action.pageDownHover"
    },
    {
        "key": "alt+up",
        "when": "editorHoverFocused",
        "command": "editor.action.pageUpHover"
    },
    {
        "key": "pageup",
        "when": "editorHoverFocused",
        "command": "editor.action.pageUpHover"
    },
    {
        "key": "alt+f12",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor",
        "command": "editor.action.peekDefinition"
    },
    {
        "key": "ctrl+shift+f12",
        "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor",
        "command": "editor.action.peekImplementation"
    },
    {
        "key": "shift+alt+f9",
        "command": "editor.action.previousCommentThreadAction"
    },
    {
        "key": "ctrl+k ctrl+alt+up",
        "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'",
        "command": "editor.action.previousCommentingRange"
    },
    {
        "key": "shift+f3",
        "when": "editorFocus",
        "command": "editor.action.previousMatchFindAction"
    },
    {
        "key": "shift+enter",
        "when": "editorFocus && findInputFocussed",
        "command": "editor.action.previousMatchFindAction"
    },
    {
        "key": "ctrl+shift+f3",
        "when": "editorFocus",
        "command": "editor.action.previousSelectionMatchFindAction"
    },
    {
        "key": "ctrl+.",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly",
        "command": "editor.action.quickFix"
    },
    {
        "key": "ctrl+shift+r",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly",
        "command": "editor.action.refactor"
    },
    {
        "key": "ctrl+alt+backspace",
        "when": "editorTextFocus",
        "command": "editor.action.removeBrackets"
    },
    {
        "key": "ctrl+k ctrl+u",
        "when": "editorTextFocus && !editorReadonly",
        "command": "editor.action.removeCommentLine"
    },
    {
        "key": "f2",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly",
        "command": "editor.action.rename"
    },
    {
        "key": "f12",
        "when": "editorHasDefinitionProvider && editorTextFocus",
        "command": "editor.action.revealDefinition"
    },
    {
        "key": "ctrl+f12",
        "when": "editorHasDefinitionProvider && editorTextFocus && isWeb",
        "command": "editor.action.revealDefinition"
    },
    {
        "key": "ctrl+k f12",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor",
        "command": "editor.action.revealDefinitionAside"
    },
    {
        "key": "ctrl+k ctrl+f12",
        "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor",
        "command": "editor.action.revealDefinitionAside"
    },
    {
        "key": "down",
        "when": "editorHoverFocused",
        "command": "editor.action.scrollDownHover"
    },
    {
        "key": "left",
        "when": "editorHoverFocused",
        "command": "editor.action.scrollLeftHover"
    },
    {
        "key": "right",
        "when": "editorHoverFocused",
        "command": "editor.action.scrollRightHover"
    },
    {
        "key": "up",
        "when": "editorHoverFocused",
        "command": "editor.action.scrollUpHover"
    },
    {
        "key": "escape",
        "when": "stickyScrollFocused",
        "command": "editor.action.selectEditor"
    },
    {
        "key": "ctrl+k ctrl+k",
        "when": "editorTextFocus && selectionAnchorSet",
        "command": "editor.action.selectFromAnchorToCursor"
    },
    {
        "key": "ctrl+shift+l",
        "when": "editorFocus",
        "command": "editor.action.selectHighlights"
    },
    {
        "key": "down",
        "when": "stickyScrollFocused",
        "command": "editor.action.selectNextStickyScrollLine"
    },
    {
        "key": "up",
        "when": "stickyScrollFocused",
        "command": "editor.action.selectPreviousStickyScrollLine"
    },
    {
        "key": "ctrl+k ctrl+b",
        "when": "editorTextFocus",
        "command": "editor.action.setSelectionAnchor"
    },
    {
        "key": "shift+f10",
        "when": "textInputFocus",
        "command": "editor.action.showContextMenu"
    },
    {
        "key": "ctrl+k ctrl+i",
        "when": "editorTextFocus",
        "command": "editor.action.showHover"
    },
    {
        "key": "shift+alt+right",
        "when": "editorTextFocus",
        "command": "editor.action.smartSelect.expand"
    },
    {
        "key": "shift+alt+left",
        "when": "editorTextFocus",
        "command": "editor.action.smartSelect.shrink"
    },
    {
        "key": "ctrl+h",
        "when": "editorFocus || editorIsOpen",
        "command": "editor.action.startFindReplaceAction"
    },
    {
        "key": "ctrl+enter",
        "when": "commentEditorFocused",
        "command": "editor.action.submitComment"
    },
    {
        "key": "ctrl+m",
        "command": "editor.action.toggleTabFocusMode"
    },
    {
        "key": "alt+z",
        "command": "editor.action.toggleWordWrap"
    },
    {
        "key": "ctrl+shift+space",
        "when": "editorHasSignatureHelpProvider && editorTextFocus",
        "command": "editor.action.triggerParameterHints"
    },
    {
        "key": "ctrl+i",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible",
        "command": "editor.action.triggerSuggest"
    },
    {
        "key": "ctrl+space",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible",
        "command": "editor.action.triggerSuggest"
    },
    {
        "key": "ctrl+k ctrl+x",
        "when": "editorTextFocus && !editorReadonly",
        "command": "editor.action.trimTrailingWhitespace"
    },
    {
        "key": "enter",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'",
        "command": "editor.action.webvieweditor.findNext"
    },
    {
        "key": "shift+enter",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'",
        "command": "editor.action.webvieweditor.findPrevious"
    },
    {
        "key": "escape",
        "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'",
        "command": "editor.action.webvieweditor.hideFind"
    },
    {
        "key": "ctrl+f",
        "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'",
        "command": "editor.action.webvieweditor.showFind"
    },
    {
        "key": "f7",
        "when": "editorTextFocus && hasWordHighlights",
        "command": "editor.action.wordHighlight.next"
    },
    {
        "key": "shift+f7",
        "when": "editorTextFocus && hasWordHighlights",
        "command": "editor.action.wordHighlight.prev"
    },
    {
        "key": "escape",
        "when": "cancellableOperation",
        "command": "editor.cancelOperation"
    },
    {
        "key": "ctrl+.",
        "when": "dropWidgetVisible",
        "command": "editor.changeDropType"
    },
    {
        "key": "ctrl+.",
        "when": "pasteWidgetVisible",
        "command": "editor.changePasteType"
    },
    {
        "key": "ctrl+k ctrl+,",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.createFoldingRangeFromSelection"
    },
    {
        "key": "escape",
        "when": "exceptionWidgetVisible",
        "command": "editor.debug.action.closeExceptionWidget"
    },
    {
        "key": "ctrl+k ctrl+i",
        "when": "editorTextFocus && inDebugMode",
        "command": "editor.debug.action.showDebugHover"
    },
    {
        "key": "f9",
        "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus",
        "command": "editor.debug.action.toggleBreakpoint"
    },
    {
        "key": "tab",
        "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus",
        "command": "editor.emmet.action.expandAbbreviation"
    },
    {
        "key": "ctrl+shift+[",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.fold"
    },
    {
        "key": "ctrl+k ctrl+0",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.foldAll"
    },
    {
        "key": "ctrl+k ctrl+/",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.foldAllBlockComments"
    },
    {
        "key": "ctrl+k ctrl+-",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.foldAllExcept"
    },
    {
        "key": "ctrl+k ctrl+8",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.foldAllMarkerRegions"
    },
    {
        "key": "ctrl+k ctrl+1",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.foldLevel1"
    },
    {
        "key": "ctrl+k ctrl+2",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.foldLevel2"
    },
    {
        "key": "ctrl+k ctrl+3",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.foldLevel3"
    },
    {
        "key": "ctrl+k ctrl+4",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.foldLevel4"
    },
    {
        "key": "ctrl+k ctrl+5",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.foldLevel5"
    },
    {
        "key": "ctrl+k ctrl+6",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.foldLevel6"
    },
    {
        "key": "ctrl+k ctrl+7",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.foldLevel7"
    },
    {
        "key": "ctrl+k ctrl+[",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.foldRecursively"
    },
    {
        "key": "f12",
        "when": "hasSymbols",
        "command": "editor.gotoNextSymbolFromResult"
    },
    {
        "key": "escape",
        "when": "hasSymbols",
        "command": "editor.gotoNextSymbolFromResult.cancel"
    },
    {
        "key": "escape",
        "when": "dropWidgetVisible",
        "command": "editor.hideDropWidget"
    },
    {
        "key": "escape",
        "when": "pasteWidgetVisible",
        "command": "editor.hidePasteWidget"
    },
    {
        "key": "ctrl+k ctrl+.",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.removeManualFoldingRanges"
    },
    {
        "key": "ctrl+k ctrl+l",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.toggleFold"
    },
    {
        "key": "ctrl+shift+]",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.unfold"
    },
    {
        "key": "ctrl+k ctrl+j",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.unfoldAll"
    },
    {
        "key": "ctrl+k ctrl+=",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.unfoldAllExcept"
    },
    {
        "key": "ctrl+k ctrl+9",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.unfoldAllMarkerRegions"
    },
    {
        "key": "ctrl+k ctrl+]",
        "when": "editorTextFocus && foldingEnabled",
        "command": "editor.unfoldRecursively"
    },
    {
        "key": "escape",
        "when": "isReadingLineWithInlayHints",
        "command": "inlayHints.stopReadingLineWithHint"
    },
    {
        "key": "tab",
        "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode",
        "command": "insertSnippet"
    },
    {
        "key": "shift+enter",
        "when": "config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'",
        "command": "interactive.execute"
    },
    {
        "key": "enter",
        "when": "!config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'",
        "command": "interactive.execute"
    },
    {
        "key": "ctrl+enter",
        "when": "activeEditor == 'workbench.editor.interactive'",
        "command": "interactive.execute"
    },
    {
        "key": "escape",
        "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused && !notebookChatUserDidEdit",
        "command": "notebook.cell.chat.discard"
    },
    {
        "key": "pagedown",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused",
        "command": "notebook.cell.cursorPageDown"
    },
    {
        "key": "shift+pagedown",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputFocused",
        "command": "notebook.cell.cursorPageDownSelect"
    },
    {
        "key": "pageup",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused",
        "command": "notebook.cell.cursorPageUp"
    },
    {
        "key": "shift+pageup",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputFocused",
        "command": "notebook.cell.cursorPageUpSelect"
    },
    {
        "key": "ctrl+alt+enter",
        "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || !notebookCellExecuting && notebookCellType == 'code' && notebookCellListFocused || inlineChatFocused && notebookCellChatFocused && notebookKernelCount > 0 || !notebookCellExecuting && notebookCellType == 'code' && notebookCellListFocused || inlineChatFocused && notebookCellChatFocused && notebookKernelSourceCount > 0 || inlineChatFocused && notebookCellChatFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code'",
        "command": "notebook.cell.execute"
    },
    {
        "key": "alt+enter",
        "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0",
        "command": "notebook.cell.executeAndInsertBelow"
    },
    {
        "key": "shift+enter",
        "when": "notebookCellListFocused && !inlineChatFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0",
        "command": "notebook.cell.executeAndSelectBelow"
    },
    {
        "key": "ctrl+shift+v",
        "when": "notebookEditorFocused && !inputFocus",
        "command": "notebook.cell.pasteAbove"
    },
    {
        "key": "down",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'",
        "command": "notebook.focusNextEditor"
    },
    {
        "key": "up",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'",
        "command": "notebook.focusPreviousEditor"
    },
    {
        "key": "shift+alt+f",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'",
        "command": "notebook.formatCell"
    },
    {
        "key": "ctrl+enter",
        "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused",
        "command": "openReferenceToSide"
    },
    {
        "key": "enter",
        "when": "inDebugRepl && textInputFocus",
        "command": "repl.action.acceptInput"
    },
    {
        "key": "ctrl+f",
        "when": "inDebugRepl && textInputFocus",
        "command": "repl.action.filter"
    },
    {
        "key": "ctrl+shift+r",
        "when": "inSearchEditor",
        "command": "rerunSearchEditorSearch"
    },
    {
        "key": "escape",
        "when": "inSearchEditor",
        "command": "search.action.focusQueryEditorWidget"
    },
    {
        "key": "ctrl+shift+backspace",
        "when": "inSearchEditor",
        "command": "search.searchEditor.action.deleteFileResults"
    },
    {
        "key": "escape",
        "when": "inSettingsEditor && inSettingsSearch",
        "command": "settings.action.clearSearchResults"
    },
    {
        "key": "down",
        "when": "inSettingsSearch && !suggestWidgetVisible",
        "command": "settings.action.focusSettingsFile"
    },
    {
        "key": "ctrl+f",
        "when": "inSettingsEditor",
        "command": "settings.action.search"
    },
    {
        "key": "ctrl+/",
        "when": "suggestWidgetVisible",
        "command": "toggleExplainMode"
    },
    {
        "key": "ctrl+k f2",
        "when": "inReferenceSearchEditor || referenceSearchVisible",
        "command": "togglePeekWidgetFocus"
    },
    {
        "key": "escape",
        "when": "inWelcome && activeEditor == 'gettingStartedPage'",
        "command": "welcome.goBack"
    },
    {
        "key": "ctrl+k ctrl+alt+c",
        "command": "workbench.action.addComment"
    },
    {
        "key": "ctrl+/",
        "when": "inChatInput",
        "command": "workbench.action.chat.attachContext"
    },
    {
        "key": "ctrl+alt+enter",
        "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat",
        "command": "workbench.action.chat.runInTerminal"
    },
    {
        "key": "enter",
        "when": "chatInputHasText && inChatInput && !chatSessionRequestInProgress",
        "command": "workbench.action.chat.submit"
    },
    {
        "key": "ctrl+enter",
        "when": "chatInputHasText && inChatInput && !chatInputHasAgent && !chatSessionRequestInProgress",
        "command": "workbench.action.chat.submitSecondaryAgent"
    },
    {
        "key": "alt+f5",
        "when": "editorTextFocus && !textCompareEditorActive",
        "command": "workbench.action.editor.nextChange"
    },
    {
        "key": "shift+alt+f5",
        "when": "editorTextFocus && !textCompareEditorActive",
        "command": "workbench.action.editor.previousChange"
    },
    {
        "key": "shift+escape",
        "when": "commentEditorFocused",
        "command": "workbench.action.hideComment"
    },
    {
        "key": "escape",
        "when": "commentEditorFocused",
        "command": "workbench.action.hideComment"
    },
    {
        "key": "tab",
        "when": "cursorAtInlineEdit && inlineEditVisible && !editorReadonly",
        "command": "editor.action.inlineEdit.accept"
    },
    {
        "key": "ctrl+alt+=",
        "when": "inlineEditVisible && !cursorAtInlineEdit && !editorReadonly",
        "command": "editor.action.inlineEdit.jumpTo"
    },
    {
        "key": "ctrl+alt+=",
        "when": "!editorReadonly && !inlineEditVisible",
        "command": "editor.action.inlineEdit.trigger"
    },
    {
        "key": "ctrl+right",
        "when": "inlineSuggestionVisible && !editorReadonly",
        "command": "editor.action.inlineSuggest.acceptNextWord"
    },
    {
        "key": "alt+f8",
        "when": "editorFocus && testing.isPeekVisible",
        "command": "testing.goToNextMessage"
    },
    {
        "key": "shift+alt+f8",
        "when": "editorFocus && testing.isPeekVisible",
        "command": "testing.goToPreviousMessage"
    },
    {
        "key": "shift+escape",
        "when": "editorFocus && findWidgetVisible && !isComposing",
        "command": "closeFindWidget"
    },
    {
        "key": "escape",
        "when": "editorFocus && findWidgetVisible && !isComposing",
        "command": "closeFindWidget"
    },
    {
        "key": "ctrl+alt+enter",
        "when": "editorFocus && findWidgetVisible",
        "command": "editor.action.replaceAll"
    },
    {
        "key": "ctrl+shift+1",
        "when": "editorFocus && findWidgetVisible",
        "command": "editor.action.replaceOne"
    },
    {
        "key": "enter",
        "when": "editorFocus && findWidgetVisible && replaceInputFocussed",
        "command": "editor.action.replaceOne"
    },
    {
        "key": "alt+enter",
        "when": "editorFocus && findWidgetVisible",
        "command": "editor.action.selectAllMatches"
    },
    {
        "key": "alt+c",
        "when": "editorFocus",
        "command": "toggleFindCaseSensitive"
    },
    {
        "key": "alt+l",
        "when": "editorFocus",
        "command": "toggleFindInSelection"
    },
    {
        "key": "alt+r",
        "when": "editorFocus",
        "command": "toggleFindRegex"
    },
    {
        "key": "alt+w",
        "when": "editorFocus",
        "command": "toggleFindWholeWord"
    },
    {
        "key": "alt+p",
        "when": "editorFocus",
        "command": "togglePreserveCase"
    },
    {
        "key": "ctrl+alt+=",
        "when": "cursorAtInlineEdit && !editorReadonly",
        "command": "editor.action.inlineEdit.jumpBack"
    },
    {
        "key": "ctrl+enter",
        "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused",
        "command": "notebook.cell.chat.acceptChanges"
    },
    {
        "key": "tab",
        "when": "hasNextTabstop && inSnippetMode && textInputFocus",
        "command": "jumpToNextSnippetPlaceholder"
    },
    {
        "key": "shift+tab",
        "when": "hasPrevTabstop && inSnippetMode && textInputFocus",
        "command": "jumpToPrevSnippetPlaceholder"
    },
    {
        "key": "escape",
        "when": "messageVisible",
        "command": "leaveEditorMessage"
    },
    {
        "key": "shift+escape",
        "when": "inSnippetMode && textInputFocus",
        "command": "leaveSnippet"
    },
    {
        "key": "escape",
        "when": "inSnippetMode && textInputFocus",
        "command": "leaveSnippet"
    },
    {
        "key": "shift+escape",
        "when": "dirtyDiffVisible",
        "command": "closeDirtyDiff"
    },
    {
        "key": "escape",
        "when": "dirtyDiffVisible",
        "command": "closeDirtyDiff"
    },
    {
        "key": "shift+escape",
        "when": "editorFocus && markersNavigationVisible",
        "command": "closeMarkersNavigation"
    },
    {
        "key": "escape",
        "when": "editorFocus && markersNavigationVisible",
        "command": "closeMarkersNavigation"
    },
    {
        "key": "escape",
        "when": "notificationToastsVisible",
        "command": "notifications.hideToasts"
    },
    {
        "key": "shift+escape",
        "when": "editorFocus && parameterHintsVisible",
        "command": "closeParameterHints"
    },
    {
        "key": "escape",
        "when": "editorFocus && parameterHintsVisible",
        "command": "closeParameterHints"
    },
    {
        "key": "alt+down",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible",
        "command": "showNextParameterHint"
    },
    {
        "key": "down",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible",
        "command": "showNextParameterHint"
    },
    {
        "key": "alt+up",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible",
        "command": "showPrevParameterHint"
    },
    {
        "key": "up",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible",
        "command": "showPrevParameterHint"
    },
    {
        "key": "shift+tab",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus",
        "command": "acceptAlternativeSelectedSuggestion"
    },
    {
        "key": "shift+enter",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus",
        "command": "acceptAlternativeSelectedSuggestion"
    },
    {
        "key": "tab",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus",
        "command": "acceptSelectedSuggestion"
    },
    {
        "key": "enter",
        "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus",
        "command": "acceptSelectedSuggestion"
    },
    {
        "key": "ctrl+i",
        "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion",
        "command": "focusSuggestion"
    },
    {
        "key": "ctrl+space",
        "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion",
        "command": "focusSuggestion"
    },
    {
        "key": "shift+escape",
        "when": "suggestWidgetVisible && textInputFocus",
        "command": "hideSuggestWidget"
    },
    {
        "key": "escape",
        "when": "suggestWidgetVisible && textInputFocus",
        "command": "hideSuggestWidget"
    },
    {
        "key": "tab",
        "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'",
        "command": "insertBestCompletion"
    },
    {
        "key": "tab",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'",
        "command": "insertNextSuggestion"
    },
    {
        "key": "shift+tab",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'",
        "command": "insertPrevSuggestion"
    },
    {
        "key": "ctrl+pagedown",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion",
        "command": "selectNextPageSuggestion"
    },
    {
        "key": "pagedown",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion",
        "command": "selectNextPageSuggestion"
    },
    {
        "key": "ctrl+down",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion",
        "command": "selectNextSuggestion"
    },
    {
        "key": "down",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion",
        "command": "selectNextSuggestion"
    },
    {
        "key": "ctrl+pageup",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion",
        "command": "selectPrevPageSuggestion"
    },
    {
        "key": "pageup",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion",
        "command": "selectPrevPageSuggestion"
    },
    {
        "key": "ctrl+up",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion",
        "command": "selectPrevSuggestion"
    },
    {
        "key": "up",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion",
        "command": "selectPrevSuggestion"
    },
    {
        "key": "ctrl+i",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus",
        "command": "toggleSuggestionDetails"
    },
    {
        "key": "ctrl+space",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus",
        "command": "toggleSuggestionDetails"
    },
    {
        "key": "ctrl+alt+space",
        "when": "suggestWidgetVisible && textInputFocus",
        "command": "toggleSuggestionFocus"
    },
    {
        "key": "enter",
        "when": "editorFocus && renameInputVisible && !isComposing",
        "command": "acceptRenameInput"
    },
    {
        "key": "ctrl+enter",
        "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible && !isComposing",
        "command": "acceptRenameInputWithPreview"
    },
    {
        "key": "shift+escape",
        "when": "LinkedEditingInputVisible && editorTextFocus",
        "command": "cancelLinkedEditingInput"
    },
    {
        "key": "escape",
        "when": "LinkedEditingInputVisible && editorTextFocus",
        "command": "cancelLinkedEditingInput"
    },
    {
        "key": "shift+escape",
        "when": "editorFocus && renameInputVisible",
        "command": "cancelRenameInput"
    },
    {
        "key": "escape",
        "when": "editorFocus && renameInputVisible",
        "command": "cancelRenameInput"
    },
    {
        "key": "down",
        "when": "renameInputVisible",
        "command": "focusNextRenameSuggestion"
    },
    {
        "key": "up",
        "when": "renameInputVisible",
        "command": "focusPreviousRenameSuggestion"
    },
    {
        "key": "ctrl+shift+l",
        "when": "fileMatchOrMatchFocus && searchViewletVisible",
        "command": "addCursorsAtSearchResults"
    },
    {
        "key": "ctrl+shift+;",
        "when": "breadcrumbsPossible && breadcrumbsVisible",
        "command": "breadcrumbs.focus"
    },
    {
        "key": "ctrl+shift+.",
        "when": "breadcrumbsPossible && breadcrumbsVisible",
        "command": "breadcrumbs.focusAndSelect"
    },
    {
        "key": "ctrl+right",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "breadcrumbs.focusNext"
    },
    {
        "key": "right",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "breadcrumbs.focusNext"
    },
    {
        "key": "ctrl+left",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "breadcrumbs.focusPrevious"
    },
    {
        "key": "left",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "breadcrumbs.focusPrevious"
    },
    {
        "key": "ctrl+enter",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "breadcrumbs.revealFocused"
    },
    {
        "key": "space",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "breadcrumbs.revealFocused"
    },
    {
        "key": "ctrl+enter",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "breadcrumbs.revealFocusedFromTreeAside"
    },
    {
        "key": "down",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "breadcrumbs.selectFocused"
    },
    {
        "key": "enter",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "breadcrumbs.selectFocused"
    },
    {
        "key": "ctrl+shift+.",
        "when": "!config.breadcrumbs.enabled",
        "command": "breadcrumbs.toggleToOn"
    },
    {
        "key": "escape",
        "when": "replaceInputBoxFocus && searchViewletVisible",
        "command": "closeReplaceInFilesWidget"
    },
    {
        "key": "escape",
        "when": "commentsFilterFocus",
        "command": "commentsClearFilterText"
    },
    {
        "key": "ctrl+f",
        "when": "focusedView == 'workbench.panel.comments'",
        "command": "commentsFocusFilter"
    },
    {
        "key": "ctrl+down",
        "when": "commentsFilterFocus",
        "command": "commentsFocusViewFromFilter"
    },
    {
        "key": "shift+alt+c",
        "when": "!editorFocus",
        "command": "copyFilePath"
    },
    {
        "key": "shift+alt+c",
        "when": "editorFocus",
        "command": "copyFilePath"
    },
    {
        "key": "ctrl+k ctrl+shift+c",
        "when": "!editorFocus",
        "command": "copyRelativeFilePath"
    },
    {
        "key": "ctrl+k ctrl+shift+c",
        "when": "editorFocus",
        "command": "copyRelativeFilePath"
    },
    {
        "key": "alt+enter",
        "when": "breakpointsFocused",
        "command": "debug.openBreakpointToSide"
    },
    {
        "key": "ctrl+enter",
        "when": "breakpointsFocused",
        "command": "debug.openBreakpointToSide"
    },
    {
        "key": "ctrl+f5",
        "when": "!debuggersAvailable",
        "command": "debug.openView"
    },
    {
        "key": "f5",
        "when": "!debuggersAvailable",
        "command": "debug.openView"
    },
    {
        "key": "delete",
        "when": "breakpointsFocused && !breakpointInputFocused",
        "command": "debug.removeBreakpoint"
    },
    {
        "key": "delete",
        "when": "watchExpressionsFocused && !expressionSelected",
        "command": "debug.removeWatchExpression"
    },
    {
        "key": "alt+-",
        "when": "inSearchEditor",
        "command": "decreaseSearchEditorContextLines"
    },
    {
        "key": "alt+f1",
        "when": "!accessibilityHelpIsShown",
        "command": "editor.action.accessibilityHelp"
    },
    {
        "key": "alt+k",
        "when": "accessibilityHelpIsShown",
        "command": "editor.action.accessibilityHelpConfigureKeybindings"
    },
    {
        "key": "alt+h",
        "when": "accessibilityHelpIsShown",
        "command": "editor.action.accessibilityHelpOpenHelpLink"
    },
    {
        "key": "alt+f2",
        "command": "editor.action.accessibleView"
    },
    {
        "key": "ctrl+/",
        "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'inlineCompletions'",
        "command": "editor.action.accessibleViewAcceptInlineCompletion"
    },
    {
        "key": "alt+f6",
        "when": "accessibilityHelpIsShown && accessibleViewVerbosityEnabled || accessibleViewIsShown && accessibleViewVerbosityEnabled",
        "command": "editor.action.accessibleViewDisableHint"
    },
    {
        "key": "alt+]",
        "when": "accessibleViewIsShown && accessibleViewSupportsNavigation",
        "command": "editor.action.accessibleViewNext"
    },
    {
        "key": "ctrl+alt+pagedown",
        "when": "accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'panelChat'",
        "command": "editor.action.accessibleViewNextCodeBlock"
    },
    {
        "key": "alt+[",
        "when": "accessibleViewIsShown && accessibleViewSupportsNavigation",
        "command": "editor.action.accessibleViewPrevious"
    },
    {
        "key": "ctrl+alt+pageup",
        "when": "accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'panelChat'",
        "command": "editor.action.accessibleViewPreviousCodeBlock"
    },
    {
        "key": "ctrl+k ctrl+k",
        "when": "resource == 'vscode-userdata:/d%3A/a/vs-code-default-keybindings/vs-code-default-keybindings/scripts/get_default_keybindings/empty2/User/keybindings.json'",
        "command": "editor.action.defineKeybinding"
    },
    {
        "key": "tab",
        "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible",
        "command": "editor.action.inlineSuggest.commit"
    },
    {
        "key": "shift+f9",
        "when": "editorTextFocus",
        "command": "editor.debug.action.toggleInlineBreakpoint"
    },
    {
        "key": "shift+alt+d",
        "when": "editorTextFocus && !notebookEditable",
        "command": "editor.detectLanguage"
    },
    {
        "key": "shift+enter",
        "when": "callHierarchyVisible",
        "command": "editor.refocusCallHierarchy"
    },
    {
        "key": "shift+enter",
        "when": "typeHierarchyVisible",
        "command": "editor.refocusTypeHierarchy"
    },
    {
        "key": "shift+alt+h",
        "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor",
        "command": "editor.showCallHierarchy"
    },
    {
        "key": "shift+alt+h",
        "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'",
        "command": "editor.showIncomingCalls"
    },
    {
        "key": "shift+alt+h",
        "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'",
        "command": "editor.showOutgoingCalls"
    },
    {
        "key": "shift+alt+h",
        "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'",
        "command": "editor.showSubtypes"
    },
    {
        "key": "shift+alt+h",
        "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'",
        "command": "editor.showSupertypes"
    },
    {
        "key": "ctrl+enter",
        "when": "explorerViewletFocus && foldersViewVisible && !inputFocus",
        "command": "explorer.openToSide"
    },
    {
        "key": "shift+alt+f",
        "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus",
        "command": "filesExplorer.findInFolder"
    },
    {
        "key": "alt+down",
        "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible",
        "command": "history.showNext"
    },
    {
        "key": "down",
        "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible",
        "command": "history.showNext"
    },
    {
        "key": "alt+up",
        "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible",
        "command": "history.showPrevious"
    },
    {
        "key": "up",
        "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible",
        "command": "history.showPrevious"
    },
    {
        "key": "down",
        "when": "iconSelectBoxFocus",
        "command": "iconSelectBox.focusDown"
    },
    {
        "key": "right",
        "when": "iconSelectBoxFocus && iconSelectBoxInputEmpty || iconSelectBoxFocus && !iconSelectBoxInputFocus",
        "command": "iconSelectBox.focusNext"
    },
    {
        "key": "left",
        "when": "iconSelectBoxFocus && iconSelectBoxInputEmpty || iconSelectBoxFocus && !iconSelectBoxInputFocus",
        "command": "iconSelectBox.focusPrevious"
    },
    {
        "key": "up",
        "when": "iconSelectBoxFocus",
        "command": "iconSelectBox.focusUp"
    },
    {
        "key": "enter",
        "when": "iconSelectBoxFocus",
        "command": "iconSelectBox.selectFocused"
    },
    {
        "key": "alt+=",
        "when": "inSearchEditor",
        "command": "increaseSearchEditorContextLines"
    },
    {
        "key": "ctrl+i",
        "when": "hasSpeechProvider && inlineChatHasProvider && inlineChatVisible && textInputFocus",
        "command": "inlineChat.holdForSpeech"
    },
    {
        "key": "f7",
        "when": "inlineChatHasProvider && inlineChatVisible",
        "command": "inlineChat.moveToNextHunk"
    },
    {
        "key": "shift+f7",
        "when": "inlineChatHasProvider && inlineChatVisible",
        "command": "inlineChat.moveToPreviousHunk"
    },
    {
        "key": "ctrl+k i",
        "when": "editorFocus && inlineChatHasProvider && !editorReadonly",
        "command": "inlineChat.start"
    },
    {
        "key": "ctrl+i",
        "when": "editorFocus && inlineChatHasProvider && !editorReadonly",
        "command": "inlineChat.start"
    },
    {
        "key": "ctrl+z",
        "when": "inlineChatHasStashedSession && !editorReadonly",
        "command": "inlineChat.unstash"
    },
    {
        "key": "down",
        "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'",
        "command": "interactive.history.next"
    },
    {
        "key": "up",
        "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'",
        "command": "interactive.history.previous"
    },
    {
        "key": "ctrl+end",
        "when": "activeEditor == 'workbench.editor.interactive'",
        "command": "interactive.scrollToBottom"
    },
    {
        "key": "ctrl+home",
        "when": "activeEditor == 'workbench.editor.interactive'",
        "command": "interactive.scrollToTop"
    },
    {
        "key": "enter",
        "when": "inKeybindings && whenFocus && !suggestWidgetVisible",
        "command": "keybindings.editor.acceptWhenExpression"
    },
    {
        "key": "ctrl+k ctrl+a",
        "when": "inKeybindings && keybindingFocus",
        "command": "keybindings.editor.addKeybinding"
    },
    {
        "key": "escape",
        "when": "inKeybindings && inKeybindingsSearch",
        "command": "keybindings.editor.clearSearchResults"
    },
    {
        "key": "ctrl+c",
        "when": "inKeybindings && keybindingFocus && !whenFocus",
        "command": "keybindings.editor.copyKeybindingEntry"
    },
    {
        "key": "enter",
        "when": "inKeybindings && keybindingFocus && !whenFocus",
        "command": "keybindings.editor.defineKeybinding"
    },
    {
        "key": "ctrl+k ctrl+e",
        "when": "inKeybindings && keybindingFocus",
        "command": "keybindings.editor.defineWhenExpression"
    },
    {
        "key": "ctrl+down",
        "when": "inKeybindings && inKeybindingsSearch",
        "command": "keybindings.editor.focusKeybindings"
    },
    {
        "key": "alt+k",
        "when": "inKeybindings && inKeybindingsSearch",
        "command": "keybindings.editor.recordSearchKeys"
    },
    {
        "key": "escape",
        "when": "inKeybindings && whenFocus && !suggestWidgetVisible",
        "command": "keybindings.editor.rejectWhenExpression"
    },
    {
        "key": "delete",
        "when": "inKeybindings && keybindingFocus && !inputFocus",
        "command": "keybindings.editor.removeKeybinding"
    },
    {
        "key": "ctrl+f",
        "when": "inKeybindings",
        "command": "keybindings.editor.searchKeybindings"
    },
    {
        "key": "alt+p",
        "when": "inKeybindings",
        "command": "keybindings.editor.toggleSortByPrecedence"
    },
    {
        "key": "escape",
        "when": "listFocus && listHasSelectionOrFocus && !inputFocus && !treestickyScrollFocused",
        "command": "list.clear"
    },
    {
        "key": "escape",
        "when": "listFocus && treeFindOpen",
        "command": "list.closeFind"
    },
    {
        "key": "left",
        "when": "listFocus && treeElementCanCollapse && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasParent && !inputFocus && !treestickyScrollFocused",
        "command": "list.collapse"
    },
    {
        "key": "ctrl+left",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "list.collapseAll"
    },
    {
        "key": "right",
        "when": "listFocus && treeElementCanExpand && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasChild && !inputFocus && !treestickyScrollFocused",
        "command": "list.expand"
    },
    {
        "key": "shift+down",
        "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused",
        "command": "list.expandSelectionDown"
    },
    {
        "key": "shift+up",
        "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused",
        "command": "list.expandSelectionUp"
    },
    {
        "key": "f3",
        "when": "listFocus && listSupportsFind",
        "command": "list.find"
    },
    {
        "key": "ctrl+alt+f",
        "when": "listFocus && listSupportsFind",
        "command": "list.find"
    },
    {
        "key": "alt+down",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "list.focusAnyDown"
    },
    {
        "key": "alt+home",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "list.focusAnyFirst"
    },
    {
        "key": "alt+end",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "list.focusAnyLast"
    },
    {
        "key": "alt+up",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "list.focusAnyUp"
    },
    {
        "key": "down",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "list.focusDown"
    },
    {
        "key": "home",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "list.focusFirst"
    },
    {
        "key": "end",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "list.focusLast"
    },
    {
        "key": "pagedown",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "list.focusPageDown"
    },
    {
        "key": "pageup",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "list.focusPageUp"
    },
    {
        "key": "up",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "list.focusUp"
    },
    {
        "key": "ctrl+down",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'bottom'",
        "command": "list.scrollDown"
    },
    {
        "key": "ctrl+up",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'top'",
        "command": "list.scrollUp"
    },
    {
        "key": "enter",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "list.select"
    },
    {
        "key": "ctrl+a",
        "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused",
        "command": "list.selectAll"
    },
    {
        "key": "ctrl+k ctrl+i",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "list.showHover"
    },
    {
        "key": "space",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "list.toggleExpand"
    },
    {
        "key": "ctrl+shift+enter",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "list.toggleSelection"
    },
    {
        "key": "y",
        "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'",
        "command": "notebook.cell.changeToCode"
    },
    {
        "key": "m",
        "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'",
        "command": "notebook.cell.changeToMarkdown"
    },
    {
        "key": "enter",
        "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused",
        "command": "notebook.cell.chat.accept"
    },
    {
        "key": "ctrl+enter",
        "when": "notebookEditorFocused && !inputFocus && !notebookCellEditorFocused && notebookChatOuterFocusPosition == 'below'",
        "command": "notebook.cell.chat.acceptChanges"
    },
    {
        "key": "ctrl+down",
        "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == 'above'",
        "command": "notebook.cell.chat.focus"
    },
    {
        "key": "ctrl+up",
        "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == 'below'",
        "command": "notebook.cell.chat.focus"
    },
    {
        "key": "ctrl+down",
        "when": "inlineChatFocused && notebookCellChatFocused",
        "command": "notebook.cell.chat.focusNextCell"
    },
    {
        "key": "ctrl+up",
        "when": "inlineChatFocused && notebookCellChatFocused",
        "command": "notebook.cell.chat.focusPreviousCell"
    },
    {
        "key": "ctrl+k i",
        "when": "config.notebook.experimental.cellChat && inlineChatHasProvider && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && inlineChatHasProvider && notebookEditable && notebookEditorFocused && !inputFocus",
        "command": "notebook.cell.chat.start"
    },
    {
        "key": "ctrl+i",
        "when": "config.notebook.experimental.cellChat && inlineChatHasProvider && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && inlineChatHasProvider && notebookEditable && notebookEditorFocused && !inputFocus",
        "command": "notebook.cell.chat.start"
    },
    {
        "key": "alt+delete",
        "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus",
        "command": "notebook.cell.clearOutputs"
    },
    {
        "key": "ctrl+k ctrl+c",
        "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed",
        "command": "notebook.cell.collapseCellInput"
    },
    {
        "key": "ctrl+k t",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed",
        "command": "notebook.cell.collapseCellOutput"
    },
    {
        "key": "shift+alt+down",
        "when": "notebookEditorFocused && !inputFocus",
        "command": "notebook.cell.copyDown"
    },
    {
        "key": "shift+alt+up",
        "when": "notebookEditorFocused && !inputFocus",
        "command": "notebook.cell.copyUp"
    },
    {
        "key": "delete",
        "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused",
        "command": "notebook.cell.delete"
    },
    {
        "key": "shift+alt+d",
        "when": "notebookCellEditable && notebookEditable",
        "command": "notebook.cell.detectLanguage"
    },
    {
        "key": "enter",
        "when": "notebookCellListFocused && notebookEditable && !editorHoverFocused && !inputFocus && !notebookOutputInputFocused",
        "command": "notebook.cell.edit"
    },
    {
        "key": "ctrl+k ctrl+c",
        "when": "notebookCellInputIsCollapsed && notebookCellListFocused",
        "command": "notebook.cell.expandCellInput"
    },
    {
        "key": "ctrl+k t",
        "when": "notebookCellListFocused && notebookCellOutputIsCollapsed",
        "command": "notebook.cell.expandCellOutput"
    },
    {
        "key": "ctrl+down",
        "when": "notebookCellHasOutputs && notebookEditorFocused",
        "command": "notebook.cell.focusInOutput"
    },
    {
        "key": "ctrl+up",
        "when": "notebookEditorFocused && notebookOutputFocused",
        "command": "notebook.cell.focusOutOutput"
    },
    {
        "key": "ctrl+shift+enter",
        "when": "notebookCellListFocused && !inputFocus",
        "command": "notebook.cell.insertCodeCellAbove"
    },
    {
        "key": "ctrl+enter",
        "when": "notebookCellListFocused && !inputFocus && notebookChatOuterFocusPosition == ''",
        "command": "notebook.cell.insertCodeCellBelow"
    },
    {
        "key": "shift+alt+win+j",
        "when": "notebookEditorFocused",
        "command": "notebook.cell.joinAbove"
    },
    {
        "key": "alt+win+j",
        "when": "notebookEditorFocused",
        "command": "notebook.cell.joinBelow"
    },
    {
        "key": "alt+down",
        "when": "notebookEditorFocused && !inputFocus",
        "command": "notebook.cell.moveDown"
    },
    {
        "key": "alt+up",
        "when": "notebookEditorFocused && !inputFocus",
        "command": "notebook.cell.moveUp"
    },
    {
        "key": "ctrl+.",
        "when": "notebookCellFocused && notebookCellHasErrorDiagnostics && !notebookCellEditorFocused",
        "command": "notebook.cell.openFailureActions"
    },
    {
        "key": "ctrl+k ctrl+shift+\\",
        "when": "editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused",
        "command": "notebook.cell.split"
    },
    {
        "key": "ctrl+k y",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus",
        "command": "notebook.cell.toggleOutputScrolling"
    },
    {
        "key": "ctrl+l",
        "when": "notebookEditorFocused",
        "command": "notebook.centerActiveCell"
    },
    {
        "key": "alt+f3",
        "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'",
        "command": "notebook.diff.action.next"
    },
    {
        "key": "shift+alt+f3",
        "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'",
        "command": "notebook.diff.action.previous"
    },
    {
        "key": "ctrl+f",
        "when": "notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.interactive' || notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.notebook'",
        "command": "notebook.find"
    },
    {
        "key": "ctrl+end",
        "when": "notebookEditorFocused && !inputFocus",
        "command": "notebook.focusBottom"
    },
    {
        "key": "down",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'",
        "command": "notebook.focusNextEditor"
    },
    {
        "key": "ctrl+down",
        "when": "notebookEditorFocused && notebookOutputFocused",
        "command": "notebook.focusNextEditor"
    },
    {
        "key": "ctrl+alt+pagedown",
        "when": "notebookEditorFocused",
        "command": "notebook.focusNextEditor"
    },
    {
        "key": "up",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'",
        "command": "notebook.focusPreviousEditor"
    },
    {
        "key": "ctrl+alt+pageup",
        "when": "notebookEditorFocused",
        "command": "notebook.focusPreviousEditor"
    },
    {
        "key": "ctrl+home",
        "when": "notebookEditorFocused && !inputFocus",
        "command": "notebook.focusTop"
    },
    {
        "key": "left",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'",
        "command": "notebook.fold"
    },
    {
        "key": "ctrl+shift+[",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'",
        "command": "notebook.fold"
    },
    {
        "key": "shift+alt+f",
        "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'",
        "command": "notebook.format"
    },
    {
        "key": "escape",
        "when": "notebookEditorFocused && notebookFindWidgetFocused",
        "command": "notebook.hideFind"
    },
    {
        "key": "right",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'",
        "command": "notebook.unfold"
    },
    {
        "key": "ctrl+shift+]",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'",
        "command": "notebook.unfold"
    },
    {
        "key": "ctrl+shift+a",
        "when": "notificationFocus || notificationToastsVisible",
        "command": "notification.acceptPrimaryAction"
    },
    {
        "key": "delete",
        "when": "notificationFocus",
        "command": "notification.clear"
    },
    {
        "key": "left",
        "when": "notificationFocus",
        "command": "notification.collapse"
    },
    {
        "key": "right",
        "when": "notificationFocus",
        "command": "notification.expand"
    },
    {
        "key": "enter",
        "when": "notificationFocus",
        "command": "notification.toggle"
    },
    {
        "key": "space",
        "when": "notificationFocus",
        "command": "notification.toggle"
    },
    {
        "key": "home",
        "when": "notificationFocus && notificationToastsVisible",
        "command": "notifications.focusFirstToast"
    },
    {
        "key": "pageup",
        "when": "notificationFocus && notificationToastsVisible",
        "command": "notifications.focusFirstToast"
    },
    {
        "key": "end",
        "when": "notificationFocus && notificationToastsVisible",
        "command": "notifications.focusLastToast"
    },
    {
        "key": "pagedown",
        "when": "notificationFocus && notificationToastsVisible",
        "command": "notifications.focusLastToast"
    },
    {
        "key": "down",
        "when": "notificationFocus && notificationToastsVisible",
        "command": "notifications.focusNextToast"
    },
    {
        "key": "up",
        "when": "notificationFocus && notificationToastsVisible",
        "command": "notifications.focusPreviousToast"
    },
    {
        "key": "ctrl+k ctrl+shift+n",
        "command": "notifications.showList"
    },
    {
        "key": "escape",
        "when": "problemsFilterFocus",
        "command": "problems.action.clearFilterText"
    },
    {
        "key": "ctrl+c",
        "when": "problemsVisibility && !relatedInformationFocus && focusedView == 'workbench.panel.markers.view'",
        "command": "problems.action.copy"
    },
    {
        "key": "ctrl+f",
        "when": "focusedView == 'workbench.panel.markers.view'",
        "command": "problems.action.focusFilter"
    },
    {
        "key": "ctrl+down",
        "when": "problemsFilterFocus",
        "command": "problems.action.focusProblemsFromFilter"
    },
    {
        "key": "enter",
        "when": "problemFocus",
        "command": "problems.action.open"
    },
    {
        "key": "ctrl+enter",
        "when": "problemFocus",
        "command": "problems.action.openToSide"
    },
    {
        "key": "ctrl+.",
        "when": "problemFocus",
        "command": "problems.action.showQuickFixes"
    },
    {
        "key": "ctrl+alt+home",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.first"
    },
    {
        "key": "ctrl+home",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.first"
    },
    {
        "key": "ctrl+alt+end",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.last"
    },
    {
        "key": "ctrl+end",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.last"
    },
    {
        "key": "ctrl+down",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.next"
    },
    {
        "key": "down",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.next"
    },
    {
        "key": "ctrl+alt+down",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.nextSeparator"
    },
    {
        "key": "alt+down",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.nextSeparatorWithQuickAccessFallback"
    },
    {
        "key": "ctrl+alt+pagedown",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.pageNext"
    },
    {
        "key": "ctrl+pagedown",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.pageNext"
    },
    {
        "key": "alt+pagedown",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.pageNext"
    },
    {
        "key": "pagedown",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.pageNext"
    },
    {
        "key": "ctrl+alt+pageup",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.pagePrevious"
    },
    {
        "key": "ctrl+pageup",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.pagePrevious"
    },
    {
        "key": "alt+pageup",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.pagePrevious"
    },
    {
        "key": "pageup",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.pagePrevious"
    },
    {
        "key": "ctrl+up",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.previous"
    },
    {
        "key": "up",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.previous"
    },
    {
        "key": "ctrl+alt+up",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.previousSeparator"
    },
    {
        "key": "alt+up",
        "when": "inQuickInput && quickInputType == 'quickPick'",
        "command": "quickInput.previousSeparatorWithQuickAccessFallback"
    },
    {
        "key": "space",
        "when": "listFocus && refactorPreview.enabled && !inputFocus && !treestickyScrollFocused",
        "command": "refactorPreview.toggleCheckedState"
    },
    {
        "key": "shift+alt+r",
        "when": "!editorFocus",
        "command": "revealFileInOS"
    },
    {
        "key": "enter",
        "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused",
        "command": "revealReference"
    },
    {
        "key": "ctrl+k s",
        "command": "saveAll"
    },
    {
        "key": "ctrl+enter",
        "when": "scmRepository",
        "command": "scm.acceptInput"
    },
    {
        "key": "alt+down",
        "when": "scmRepository",
        "command": "scm.forceViewNextCommit"
    },
    {
        "key": "alt+up",
        "when": "scmRepository",
        "command": "scm.forceViewPreviousCommit"
    },
    {
        "key": "down",
        "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible",
        "command": "scm.viewNextCommit"
    },
    {
        "key": "up",
        "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible",
        "command": "scm.viewPreviousCommit"
    },
    {
        "key": "escape",
        "when": "listFocus && searchViewletVisible && !inputFocus && !treestickyScrollFocused && searchState != '0'",
        "command": "search.action.cancel"
    },
    {
        "key": "ctrl+c",
        "when": "fileMatchOrMatchFocus",
        "command": "search.action.copyMatch"
    },
    {
        "key": "shift+alt+c",
        "when": "fileMatchOrFolderMatchWithResourceFocus",
        "command": "search.action.copyPath"
    },
    {
        "key": "f4",
        "when": "hasSearchResult || inSearchEditor",
        "command": "search.action.focusNextSearchResult"
    },
    {
        "key": "shift+f4",
        "when": "hasSearchResult || inSearchEditor",
        "command": "search.action.focusPreviousSearchResult"
    },
    {
        "key": "ctrl+up",
        "when": "accessibilityModeEnabled && searchViewletVisible || firstMatchFocus && searchViewletVisible",
        "command": "search.action.focusSearchFromResults"
    },
    {
        "key": "alt+enter",
        "when": "hasSearchResult && searchViewletFocus",
        "command": "search.action.openInEditor"
    },
    {
        "key": "enter",
        "when": "fileMatchOrMatchFocus && searchViewletVisible",
        "command": "search.action.openResult"
    },
    {
        "key": "ctrl+enter",
        "when": "fileMatchOrMatchFocus && searchViewletVisible",
        "command": "search.action.openResultToSide"
    },
    {
        "key": "delete",
        "when": "fileMatchOrMatchFocus && searchViewletVisible",
        "command": "search.action.remove"
    },
    {
        "key": "ctrl+shift+1",
        "when": "isEditableItem && matchFocus && replaceActive && searchViewletVisible",
        "command": "search.action.replace"
    },
    {
        "key": "ctrl+alt+enter",
        "when": "replaceActive && searchViewletVisible && !findWidgetVisible",
        "command": "search.action.replaceAll"
    },
    {
        "key": "ctrl+shift+enter",
        "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible",
        "command": "search.action.replaceAllInFile"
    },
    {
        "key": "ctrl+shift+1",
        "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible",
        "command": "search.action.replaceAllInFile"
    },
    {
        "key": "ctrl+shift+enter",
        "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible",
        "command": "search.action.replaceAllInFolder"
    },
    {
        "key": "ctrl+shift+1",
        "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible",
        "command": "search.action.replaceAllInFolder"
    },
    {
        "key": "shift+alt+f",
        "when": "folderMatchWithResourceFocus && searchViewletVisible",
        "command": "search.action.restrictSearchToFolder"
    },
    {
        "key": "ctrl+down",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible",
        "command": "search.focus.nextInputBox"
    },
    {
        "key": "ctrl+up",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus",
        "command": "search.focus.previousInputBox"
    },
    {
        "key": "ctrl+shift+l",
        "when": "inSearchEditor",
        "command": "selectAllSearchEditorMatches"
    },
    {
        "key": "escape",
        "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch",
        "command": "settings.action.focusLevelUp"
    },
    {
        "key": "enter",
        "when": "inSettingsEditor && settingRowFocus",
        "command": "settings.action.focusSettingControl"
    },
    {
        "key": "down",
        "when": "inSettingsSearch && !suggestWidgetVisible",
        "command": "settings.action.focusSettingsFromSearch"
    },
    {
        "key": "enter",
        "when": "inSettingsEditor && settingsTocRowFocus",
        "command": "settings.action.focusSettingsList"
    },
    {
        "key": "left",
        "when": "inSettingsEditor && settingRowFocus",
        "command": "settings.action.focusTOC"
    },
    {
        "key": "shift+f9",
        "when": "inSettingsEditor",
        "command": "settings.action.showContextMenu"
    },
    {
        "key": "ctrl+; ctrl+x",
        "command": "testing.cancelRun"
    },
    {
        "key": "ctrl+; ctrl+shift+a",
        "command": "testing.coverageAll"
    },
    {
        "key": "ctrl+; ctrl+shift+c",
        "when": "editorTextFocus",
        "command": "testing.coverageAtCursor"
    },
    {
        "key": "ctrl+; ctrl+shift+f",
        "when": "editorTextFocus",
        "command": "testing.coverageCurrentFile"
    },
    {
        "key": "ctrl+; ctrl+shift+l",
        "command": "testing.coverageLastRun"
    },
    {
        "key": "ctrl+; ctrl+a",
        "command": "testing.debugAll"
    },
    {
        "key": "ctrl+; ctrl+c",
        "when": "editorTextFocus",
        "command": "testing.debugAtCursor"
    },
    {
        "key": "ctrl+; ctrl+f",
        "when": "editorTextFocus",
        "command": "testing.debugCurrentFile"
    },
    {
        "key": "ctrl+; ctrl+e",
        "command": "testing.debugFailTests"
    },
    {
        "key": "ctrl+; ctrl+l",
        "command": "testing.debugLastRun"
    },
    {
        "key": "ctrl+; ctrl+m",
        "command": "testing.openOutputPeek"
    },
    {
        "key": "ctrl+; e",
        "command": "testing.reRunFailTests"
    },
    {
        "key": "ctrl+; l",
        "command": "testing.reRunLastRun"
    },
    {
        "key": "ctrl+; ctrl+r",
        "when": "testing.canRefresh",
        "command": "testing.refreshTests"
    },
    {
        "key": "ctrl+; a",
        "command": "testing.runAll"
    },
    {
        "key": "ctrl+; c",
        "when": "editorTextFocus",
        "command": "testing.runAtCursor"
    },
    {
        "key": "ctrl+; f",
        "when": "editorTextFocus",
        "command": "testing.runCurrentFile"
    },
    {
        "key": "ctrl+; ctrl+o",
        "when": "testing.hasAnyResults",
        "command": "testing.showMostRecentOutput"
    },
    {
        "key": "ctrl+; ctrl+shift+i",
        "command": "testing.toggleInlineCoverage"
    },
    {
        "key": "ctrl+; ctrl+i",
        "command": "testing.toggleInlineTestOutput"
    },
    {
        "key": "alt+h",
        "when": "testing.isPeekVisible",
        "command": "testing.toggleTestingPeekHistory"
    },
    {
        "key": "alt+c",
        "when": "searchViewletFocus",
        "command": "toggleSearchCaseSensitive"
    },
    {
        "key": "alt+c",
        "when": "inSearchEditor && searchInputBoxFocus",
        "command": "toggleSearchEditorCaseSensitive"
    },
    {
        "key": "alt+l",
        "when": "inSearchEditor",
        "command": "toggleSearchEditorContextLines"
    },
    {
        "key": "alt+r",
        "when": "inSearchEditor && searchInputBoxFocus",
        "command": "toggleSearchEditorRegex"
    },
    {
        "key": "alt+w",
        "when": "inSearchEditor && searchInputBoxFocus",
        "command": "toggleSearchEditorWholeWord"
    },
    {
        "key": "alt+p",
        "when": "searchViewletFocus",
        "command": "toggleSearchPreserveCase"
    },
    {
        "key": "alt+r",
        "when": "searchViewletFocus",
        "command": "toggleSearchRegex"
    },
    {
        "key": "alt+w",
        "when": "searchViewletFocus",
        "command": "toggleSearchWholeWord"
    },
    {
        "key": "ctrl+alt+win+n",
        "command": "welcome.showNewFileEntries"
    },
    {
        "key": "ctrl+down",
        "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'bottom'",
        "command": "widgetNavigation.focusNext"
    },
    {
        "key": "ctrl+up",
        "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'top'",
        "command": "widgetNavigation.focusPrevious"
    },
    {
        "key": "ctrl+escape",
        "command": "workbench.action.chat.cancel"
    },
    {
        "key": "ctrl+down",
        "when": "inChat && !inChatInput",
        "command": "workbench.action.chat.focusInput"
    },
    {
        "key": "ctrl+i",
        "when": "chatIsEnabled && hasSpeechProvider && !chatSessionRequestInProgress && !editorFocus && !inChatInput && !inlineChatFocused && !notebookEditorFocused",
        "command": "workbench.action.chat.holdToVoiceChatInChatView"
    },
    {
        "key": "ctrl+l",
        "when": "chatIsEnabled && inChat",
        "command": "workbench.action.chat.newChat"
    },
    {
        "key": "ctrl+alt+pagedown",
        "when": "chatIsEnabled && inChat",
        "command": "workbench.action.chat.nextCodeBlock"
    },
    {
        "key": "ctrl+f9",
        "when": "chatIsEnabled && inChat",
        "command": "workbench.action.chat.nextFileTree"
    },
    {
        "key": "ctrl+alt+i",
        "command": "workbench.action.chat.open"
    },
    {
        "key": "ctrl+alt+pageup",
        "when": "chatIsEnabled && inChat",
        "command": "workbench.action.chat.previousCodeBlock"
    },
    {
        "key": "ctrl+shift+f9",
        "when": "chatIsEnabled && inChat",
        "command": "workbench.action.chat.previousFileTree"
    },
    {
        "key": "delete",
        "when": "inChat && !inChatInput",
        "command": "workbench.action.chat.remove"
    },
    {
        "key": "ctrl+shift+enter",
        "when": "chatInputHasText && inChatInput && !chatSessionRequestInProgress",
        "command": "workbench.action.chat.sendToNewChat"
    },
    {
        "key": "ctrl+i",
        "when": "chatIsEnabled && hasSpeechProvider && inChatInput && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress && !terminalChatActiveRequest || chatIsEnabled && hasSpeechProvider && inlineChatFocused && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress && !terminalChatActiveRequest",
        "command": "workbench.action.chat.startVoiceChat"
    },
    {
        "key": "ctrl+i",
        "when": "inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'view' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'view'",
        "command": "workbench.action.chat.stopListeningAndSubmit"
    },
    {
        "key": "ctrl+w",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+f4",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+k ctrl+w",
        "command": "workbench.action.closeAllEditors"
    },
    {
        "key": "ctrl+k ctrl+shift+w",
        "command": "workbench.action.closeAllGroups"
    },
    {
        "key": "ctrl+k w",
        "command": "workbench.action.closeEditorsInGroup"
    },
    {
        "key": "ctrl+k f",
        "when": "emptyWorkspaceSupport && workbenchState != 'empty'",
        "command": "workbench.action.closeFolder"
    },
    {
        "key": "ctrl+w",
        "when": "activeEditorGroupEmpty && multipleEditorGroups",
        "command": "workbench.action.closeGroup"
    },
    {
        "key": "ctrl+f4",
        "when": "activeEditorGroupEmpty && multipleEditorGroups",
        "command": "workbench.action.closeGroup"
    },
    {
        "key": "shift+escape",
        "when": "inQuickOpen",
        "command": "workbench.action.closeQuickOpen"
    },
    {
        "key": "escape",
        "when": "inQuickOpen",
        "command": "workbench.action.closeQuickOpen"
    },
    {
        "key": "ctrl+k u",
        "command": "workbench.action.closeUnmodifiedEditors"
    },
    {
        "key": "ctrl+shift+w",
        "command": "workbench.action.closeWindow"
    },
    {
        "key": "alt+f4",
        "command": "workbench.action.closeWindow"
    },
    {
        "key": "alt+f5",
        "when": "textCompareEditorVisible",
        "command": "workbench.action.compareEditor.nextChange"
    },
    {
        "key": "ctrl+k shift+o",
        "when": "inDiffEditor",
        "command": "workbench.action.compareEditor.openSide"
    },
    {
        "key": "shift+alt+f5",
        "when": "textCompareEditorVisible",
        "command": "workbench.action.compareEditor.previousChange"
    },
    {
        "key": "ctrl+k o",
        "when": "activeEditor",
        "command": "workbench.action.copyEditorToNewWindow"
    },
    {
        "key": "shift+f5",
        "when": "focusedSessionIsAttach && inDebugMode",
        "command": "workbench.action.debug.disconnect"
    },
    {
        "key": "ctrl+shift+f5",
        "when": "inDebugMode",
        "command": "workbench.action.debug.restart"
    },
    {
        "key": "ctrl+f5",
        "when": "debuggersAvailable && debugState != 'initializing'",
        "command": "workbench.action.debug.run"
    },
    {
        "key": "f5",
        "when": "debuggersAvailable && debugState == 'inactive'",
        "command": "workbench.action.debug.start"
    },
    {
        "key": "ctrl+f11",
        "when": "inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'",
        "command": "workbench.action.debug.stepIntoTarget"
    },
    {
        "key": "shift+f11",
        "when": "debugState == 'stopped'",
        "command": "workbench.action.debug.stepOut"
    },
    {
        "key": "f10",
        "when": "debugState == 'stopped'",
        "command": "workbench.action.debug.stepOver"
    },
    {
        "key": "shift+f5",
        "when": "inDebugMode && !focusedSessionIsAttach",
        "command": "workbench.action.debug.stop"
    },
    {
        "key": "ctrl+k m",
        "when": "!notebookEditorFocused",
        "command": "workbench.action.editor.changeLanguageMode"
    },
    {
        "key": "alt+`",
        "when": "hasSpeechProvider && !editorReadonly && !speechToTextInProgress",
        "command": "workbench.action.editorDictation.start"
    },
    {
        "key": "ctrl+alt+v",
        "when": "hasSpeechProvider && !editorReadonly && !speechToTextInProgress",
        "command": "workbench.action.editorDictation.start"
    },
    {
        "key": "ctrl+k p",
        "command": "workbench.action.files.copyPathOfActiveFile"
    },
    {
        "key": "ctrl+n",
        "command": "workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+o",
        "when": "true",
        "command": "workbench.action.files.openFile"
    },
    {
        "key": "ctrl+o",
        "when": "isMacNative && openFolderWorkspaceSupport",
        "command": "workbench.action.files.openFileFolder"
    },
    {
        "key": "ctrl+k ctrl+o",
        "when": "openFolderWorkspaceSupport",
        "command": "workbench.action.files.openFolder"
    },
    {
        "key": "ctrl+o",
        "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'",
        "command": "workbench.action.files.openFolderViaWorkspace"
    },
    {
        "key": "ctrl+o",
        "when": "remoteFileDialogVisible",
        "command": "workbench.action.files.openLocalFile"
    },
    {
        "key": "ctrl+k ctrl+o",
        "when": "remoteFileDialogVisible",
        "command": "workbench.action.files.openLocalFolder"
    },
    {
        "key": "ctrl+k r",
        "command": "workbench.action.files.revealActiveFileInWindows"
    },
    {
        "key": "ctrl+s",
        "command": "workbench.action.files.save"
    },
    {
        "key": "ctrl+shift+s",
        "command": "workbench.action.files.saveAs"
    },
    {
        "key": "ctrl+shift+s",
        "when": "remoteFileDialogVisible",
        "command": "workbench.action.files.saveLocalFile"
    },
    {
        "key": "ctrl+k ctrl+shift+s",
        "command": "workbench.action.files.saveWithoutFormatting"
    },
    {
        "key": "ctrl+shift+f",
        "command": "workbench.action.findInFiles"
    },
    {
        "key": "ctrl+k ctrl+up",
        "command": "workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+k ctrl+down",
        "command": "workbench.action.focusBelowGroup"
    },
    {
        "key": "ctrl+8",
        "command": "workbench.action.focusEighthEditorGroup"
    },
    {
        "key": "ctrl+5",
        "command": "workbench.action.focusFifthEditorGroup"
    },
    {
        "key": "ctrl+1",
        "command": "workbench.action.focusFirstEditorGroup"
    },
    {
        "key": "ctrl+4",
        "command": "workbench.action.focusFourthEditorGroup"
    },
    {
        "key": "ctrl+k ctrl+left",
        "command": "workbench.action.focusLeftGroup"
    },
    {
        "key": "f6",
        "command": "workbench.action.focusNextPart"
    },
    {
        "key": "shift+f6",
        "command": "workbench.action.focusPreviousPart"
    },
    {
        "key": "ctrl+k ctrl+right",
        "command": "workbench.action.focusRightGroup"
    },
    {
        "key": "ctrl+2",
        "command": "workbench.action.focusSecondEditorGroup"
    },
    {
        "key": "ctrl+7",
        "command": "workbench.action.focusSeventhEditorGroup"
    },
    {
        "key": "ctrl+0",
        "command": "workbench.action.focusSideBar"
    },
    {
        "key": "ctrl+6",
        "command": "workbench.action.focusSixthEditorGroup"
    },
    {
        "key": "ctrl+3",
        "command": "workbench.action.focusThirdEditorGroup"
    },
    {
        "key": "ctrl+g",
        "command": "workbench.action.gotoLine"
    },
    {
        "key": "ctrl+shift+o",
        "when": "!accessibilityHelpIsShown && !accessibleViewIsShown",
        "command": "workbench.action.gotoSymbol"
    },
    {
        "key": "down",
        "when": "interactivePlaygroundFocus && !editorTextFocus",
        "command": "workbench.action.interactivePlayground.arrowDown"
    },
    {
        "key": "up",
        "when": "interactivePlaygroundFocus && !editorTextFocus",
        "command": "workbench.action.interactivePlayground.arrowUp"
    },
    {
        "key": "pagedown",
        "when": "interactivePlaygroundFocus && !editorTextFocus",
        "command": "workbench.action.interactivePlayground.pageDown"
    },
    {
        "key": "pageup",
        "when": "interactivePlaygroundFocus && !editorTextFocus",
        "command": "workbench.action.interactivePlayground.pageUp"
    },
    {
        "key": "ctrl+k ctrl+shift+\\",
        "when": "sideBySideEditorActive",
        "command": "workbench.action.joinEditorInGroup"
    },
    {
        "key": "ctrl+k enter",
        "command": "workbench.action.keepEditor"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "workbench.action.keybindingsReference"
    },
    {
        "key": "ctrl+9",
        "command": "workbench.action.lastEditorInGroup"
    },
    {
        "key": "alt+0",
        "command": "workbench.action.lastEditorInGroup"
    },
    {
        "key": "ctrl+k down",
        "command": "workbench.action.moveActiveEditorGroupDown"
    },
    {
        "key": "ctrl+k left",
        "command": "workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "ctrl+k right",
        "command": "workbench.action.moveActiveEditorGroupRight"
    },
    {
        "key": "ctrl+k up",
        "command": "workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "ctrl+shift+pageup",
        "command": "workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "ctrl+shift+pagedown",
        "command": "workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "shift+alt+1",
        "command": "workbench.action.moveEditorToFirstGroup"
    },
    {
        "key": "shift+alt+9",
        "command": "workbench.action.moveEditorToLastGroup"
    },
    {
        "key": "ctrl+alt+right",
        "command": "workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+alt+left",
        "command": "workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "alt+left",
        "when": "canNavigateBack",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "alt+right",
        "when": "canNavigateForward",
        "command": "workbench.action.navigateForward"
    },
    {
        "key": "ctrl+k ctrl+q",
        "command": "workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "ctrl+shift+n",
        "command": "workbench.action.newWindow"
    },
    {
        "key": "ctrl+pagedown",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "ctrl+k ctrl+pagedown",
        "command": "workbench.action.nextEditorInGroup"
    },
    {
        "key": "alt+1",
        "command": "workbench.action.openEditorAtIndex1"
    },
    {
        "key": "alt+2",
        "command": "workbench.action.openEditorAtIndex2"
    },
    {
        "key": "alt+3",
        "command": "workbench.action.openEditorAtIndex3"
    },
    {
        "key": "alt+4",
        "command": "workbench.action.openEditorAtIndex4"
    },
    {
        "key": "alt+5",
        "command": "workbench.action.openEditorAtIndex5"
    },
    {
        "key": "alt+6",
        "command": "workbench.action.openEditorAtIndex6"
    },
    {
        "key": "alt+7",
        "command": "workbench.action.openEditorAtIndex7"
    },
    {
        "key": "alt+8",
        "command": "workbench.action.openEditorAtIndex8"
    },
    {
        "key": "alt+9",
        "command": "workbench.action.openEditorAtIndex9"
    },
    {
        "key": "ctrl+k ctrl+s",
        "command": "workbench.action.openGlobalKeybindings"
    },
    {
        "key": "ctrl+r",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "ctrl+,",
        "command": "workbench.action.openSettings"
    },
    {
        "key": "ctrl+shift+u",
        "when": "workbench.panel.output.active",
        "command": "workbench.action.output.toggleOutput"
    },
    {
        "key": "ctrl+k shift+enter",
        "when": "!activeEditorIsPinned",
        "command": "workbench.action.pinEditor"
    },
    {
        "key": "ctrl+pageup",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "ctrl+k ctrl+pageup",
        "command": "workbench.action.previousEditorInGroup"
    },
    {
        "key": "ctrl+e",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+shift+tab",
        "when": "!activeEditorGroupEmpty",
        "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+tab",
        "when": "!activeEditorGroupEmpty",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.quickOpenView"
    },
    {
        "key": "ctrl+shift+i",
        "when": "chatIsEnabled",
        "command": "workbench.action.quickchat.toggle"
    },
    {
        "key": "ctrl+alt+o",
        "command": "workbench.action.remote.showMenu"
    },
    {
        "key": "ctrl+shift+t",
        "command": "workbench.action.reopenClosedEditor"
    },
    {
        "key": "ctrl+shift+h",
        "command": "workbench.action.replaceInFiles"
    },
    {
        "key": "ctrl+shift+j",
        "when": "inSearchEditor || searchViewletFocus",
        "command": "workbench.action.search.toggleQueryDetails"
    },
    {
        "key": "ctrl+k ctrl+t",
        "command": "workbench.action.selectTheme"
    },
    {
        "key": "ctrl+k ctrl+p",
        "command": "workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+t",
        "command": "workbench.action.showAllSymbols"
    },
    {
        "key": "f1",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+shift+p",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+\\",
        "command": "workbench.action.splitEditor"
    },
    {
        "key": "ctrl+k ctrl+\\",
        "command": "workbench.action.splitEditorDown"
    },
    {
        "key": "ctrl+k ctrl+shift+\\",
        "when": "activeEditorCanSplitInGroup",
        "command": "workbench.action.splitEditorInGroup"
    },
    {
        "key": "ctrl+k ctrl+\\",
        "command": "workbench.action.splitEditorLeft"
    },
    {
        "key": "ctrl+k ctrl+\\",
        "command": "workbench.action.splitEditorOrthogonal"
    },
    {
        "key": "ctrl+k ctrl+\\",
        "command": "workbench.action.splitEditorRight"
    },
    {
        "key": "ctrl+k ctrl+\\",
        "command": "workbench.action.splitEditorUp"
    },
    {
        "key": "ctrl+shift+b",
        "when": "taskCommandsRegistered",
        "command": "workbench.action.tasks.build"
    },
    {
        "key": "shift+escape",
        "when": "terminalChatFocus && terminalChatVisible",
        "command": "workbench.action.terminal.chat.close"
    },
    {
        "key": "escape",
        "when": "terminalChatFocus && terminalChatVisible",
        "command": "workbench.action.terminal.chat.close"
    },
    {
        "key": "ctrl+i",
        "when": "terminalChatFocus && !inlineChatFocused",
        "command": "workbench.action.terminal.chat.focusInput"
    },
    {
        "key": "ctrl+up",
        "when": "terminalChatFocus && !inlineChatFocused",
        "command": "workbench.action.terminal.chat.focusInput"
    },
    {
        "key": "ctrl+down",
        "when": "terminalChatFocus",
        "command": "workbench.action.terminal.chat.focusResponse"
    },
    {
        "key": "ctrl+alt+enter",
        "when": "terminalChatAgentRegistered && terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatAgentRegistered && terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks",
        "command": "workbench.action.terminal.chat.insertCommand"
    },
    {
        "key": "alt+enter",
        "when": "terminalChatAgentRegistered && terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatAgentRegistered && terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks",
        "command": "workbench.action.terminal.chat.insertCommand"
    },
    {
        "key": "ctrl+alt+enter",
        "when": "terminalChatAgentRegistered && terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatAgentRegistered && terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest",
        "command": "workbench.action.terminal.chat.insertFirstCommand"
    },
    {
        "key": "alt+enter",
        "when": "terminalChatAgentRegistered && terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatAgentRegistered && terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest",
        "command": "workbench.action.terminal.chat.insertFirstCommand"
    },
    {
        "key": "enter",
        "when": "inlineChatFocused && terminalChatAgentRegistered && terminalHasBeenCreated && !inlineChatEmpty && !terminalChatActiveRequest || inlineChatFocused && terminalChatAgentRegistered && terminalProcessSupported && !inlineChatEmpty && !terminalChatActiveRequest",
        "command": "workbench.action.terminal.chat.makeRequest"
    },
    {
        "key": "ctrl+enter",
        "when": "terminalChatAgentRegistered && terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatAgentRegistered && terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks",
        "command": "workbench.action.terminal.chat.runCommand"
    },
    {
        "key": "ctrl+enter",
        "when": "terminalChatAgentRegistered && terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatAgentRegistered && terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest",
        "command": "workbench.action.terminal.chat.runFirstCommand"
    },
    {
        "key": "escape",
        "when": "terminalFocusInAny && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocusInAny && terminalProcessSupported && terminalTextSelected && !terminalFindVisible",
        "command": "workbench.action.terminal.clearSelection"
    },
    {
        "key": "ctrl+c",
        "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused",
        "command": "workbench.action.terminal.copyAndClearSelection"
    },
    {
        "key": "ctrl+shift+c",
        "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused",
        "command": "workbench.action.terminal.copySelection"
    },
    {
        "key": "f3",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported",
        "command": "workbench.action.terminal.findNext"
    },
    {
        "key": "shift+enter",
        "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported",
        "command": "workbench.action.terminal.findNext"
    },
    {
        "key": "shift+f3",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported",
        "command": "workbench.action.terminal.findPrevious"
    },
    {
        "key": "enter",
        "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported",
        "command": "workbench.action.terminal.findPrevious"
    },
    {
        "key": "ctrl+down",
        "when": "accessibilityModeEnabled && accessibleViewOnLastLine && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewOnLastLine && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'",
        "command": "workbench.action.terminal.focus"
    },
    {
        "key": "ctrl+up",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported",
        "command": "workbench.action.terminal.focusAccessibleBuffer"
    },
    {
        "key": "alt+f2",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported",
        "command": "workbench.action.terminal.focusAccessibleBuffer"
    },
    {
        "key": "ctrl+f",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported",
        "command": "workbench.action.terminal.focusFind"
    },
    {
        "key": "ctrl+k ctrl+i",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus",
        "command": "workbench.action.terminal.focusHover"
    },
    {
        "key": "ctrl+pagedown",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus",
        "command": "workbench.action.terminal.focusNext"
    },
    {
        "key": "alt+down",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
        "command": "workbench.action.terminal.focusNextPane"
    },
    {
        "key": "alt+right",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
        "command": "workbench.action.terminal.focusNextPane"
    },
    {
        "key": "ctrl+pageup",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus",
        "command": "workbench.action.terminal.focusPrevious"
    },
    {
        "key": "alt+up",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
        "command": "workbench.action.terminal.focusPreviousPane"
    },
    {
        "key": "alt+left",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
        "command": "workbench.action.terminal.focusPreviousPane"
    },
    {
        "key": "ctrl+shift+\\",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus",
        "command": "workbench.action.terminal.focusTabs"
    },
    {
        "key": "ctrl+g",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
        "command": "workbench.action.terminal.goToRecentDirectory"
    },
    {
        "key": "shift+escape",
        "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported",
        "command": "workbench.action.terminal.hideFind"
    },
    {
        "key": "escape",
        "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported",
        "command": "workbench.action.terminal.hideFind"
    },
    {
        "key": "delete",
        "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus",
        "command": "workbench.action.terminal.killActiveTab"
    },
    {
        "key": "ctrl+w",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported",
        "command": "workbench.action.terminal.killEditor"
    },
    {
        "key": "ctrl+f4",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported",
        "command": "workbench.action.terminal.killEditor"
    },
    {
        "key": "ctrl+shift+`",
        "when": "terminalProcessSupported || terminalWebExtensionContributedProfile",
        "command": "workbench.action.terminal.new"
    },
    {
        "key": "ctrl+shift+c",
        "when": "!terminalFocus",
        "command": "workbench.action.terminal.openNativeConsole"
    },
    {
        "key": "ctrl+shift+v",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
        "command": "workbench.action.terminal.paste"
    },
    {
        "key": "ctrl+v",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
        "command": "workbench.action.terminal.paste"
    },
    {
        "key": "f2",
        "when": "terminalHasBeenCreated && terminalTabsFocus && terminalTabsSingularSelection || terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection",
        "command": "workbench.action.terminal.renameActiveTab"
    },
    {
        "key": "ctrl+r",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported || accessibilityModeEnabled && accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'",
        "command": "workbench.action.terminal.runRecentCommand"
    },
    {
        "key": "ctrl+alt+r",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled",
        "command": "workbench.action.terminal.runRecentCommand"
    },
    {
        "key": "ctrl+alt+pagedown",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive",
        "command": "workbench.action.terminal.scrollDown"
    },
    {
        "key": "shift+pagedown",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive",
        "command": "workbench.action.terminal.scrollDownPage"
    },
    {
        "key": "ctrl+end",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive",
        "command": "workbench.action.terminal.scrollToBottom"
    },
    {
        "key": "ctrl+end",
        "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'",
        "command": "workbench.action.terminal.scrollToBottomAccessibleView"
    },
    {
        "key": "ctrl+down",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled",
        "command": "workbench.action.terminal.scrollToNextCommand"
    },
    {
        "key": "ctrl+up",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled",
        "command": "workbench.action.terminal.scrollToPreviousCommand"
    },
    {
        "key": "ctrl+home",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive",
        "command": "workbench.action.terminal.scrollToTop"
    },
    {
        "key": "ctrl+home",
        "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'",
        "command": "workbench.action.terminal.scrollToTopAccessibleView"
    },
    {
        "key": "ctrl+alt+pageup",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive",
        "command": "workbench.action.terminal.scrollUp"
    },
    {
        "key": "shift+pageup",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive",
        "command": "workbench.action.terminal.scrollUpPage"
    },
    {
        "key": "ctrl+shift+down",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
        "command": "workbench.action.terminal.selectToNextCommand"
    },
    {
        "key": "ctrl+shift+up",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
        "command": "workbench.action.terminal.selectToPreviousCommand"
    },
    {
        "key": "ctrl+v",
        "when": "terminalFocus && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u0016"
        }
    },
    {
        "key": "ctrl+space",
        "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001b[24~a"
        }
    },
    {
        "key": "alt+space",
        "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001b[24~b"
        }
    },
    {
        "key": "shift+enter",
        "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001b[24~c"
        }
    },
    {
        "key": "ctrl+space",
        "when": "config.terminal.integrated.shellIntegration.suggestEnabled && terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh' || config.terminal.integrated.suggest.enabled && terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001b[24~e"
        }
    },
    {
        "key": "ctrl+alt+r",
        "when": "accessibilityModeEnabled && terminalFocus",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u0012"
        }
    },
    {
        "key": "ctrl+alt+g",
        "when": "terminalFocus",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u0007"
        }
    },
    {
        "key": "ctrl+backspace",
        "when": "terminalFocus",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u0017"
        }
    },
    {
        "key": "ctrl+backspace",
        "when": "terminalFocus && terminalShellType == 'cmd'",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\b"
        }
    },
    {
        "key": "ctrl+delete",
        "when": "terminalFocus",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001bd"
        }
    },
    {
        "key": "ctrl+shift+2",
        "when": "terminalFocus",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u0000"
        }
    },
    {
        "key": "ctrl+shift+6",
        "when": "terminalFocus",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001e"
        }
    },
    {
        "key": "ctrl+/",
        "when": "terminalFocus",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001f"
        }
    },
    {
        "key": "ctrl+.",
        "when": "terminalFocus",
        "command": "workbench.action.terminal.showQuickFixes"
    },
    {
        "key": "alt+z",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported",
        "command": "workbench.action.terminal.sizeToContentWidth"
    },
    {
        "key": "ctrl+shift+5",
        "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile",
        "command": "workbench.action.terminal.split"
    },
    {
        "key": "ctrl+shift+5",
        "when": "terminalProcessSupported && terminalTabsFocus",
        "command": "workbench.action.terminal.splitActiveTab"
    },
    {
        "key": "alt+c",
        "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported",
        "command": "workbench.action.terminal.toggleFindCaseSensitive"
    },
    {
        "key": "alt+r",
        "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported",
        "command": "workbench.action.terminal.toggleFindRegex"
    },
    {
        "key": "alt+w",
        "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported",
        "command": "workbench.action.terminal.toggleFindWholeWord"
    },
    {
        "key": "ctrl+`",
        "when": "terminal.active",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "ctrl+alt+b",
        "command": "workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "shift+alt+0",
        "command": "workbench.action.toggleEditorGroupLayout"
    },
    {
        "key": "f11",
        "when": "!isIOS",
        "command": "workbench.action.toggleFullScreen"
    },
    {
        "key": "ctrl+k ctrl+m",
        "when": "editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups",
        "command": "workbench.action.toggleMaximizeEditorGroup"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "ctrl+b",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+k z",
        "when": "!isAuxiliaryWindowFocusedContext",
        "command": "workbench.action.toggleZenMode"
    },
    {
        "key": "ctrl+k shift+enter",
        "when": "activeEditorIsPinned",
        "command": "workbench.action.unpinEditor"
    },
    {
        "key": "ctrl+numpad_add",
        "command": "workbench.action.zoomIn"
    },
    {
        "key": "ctrl+shift+=",
        "command": "workbench.action.zoomIn"
    },
    {
        "key": "ctrl+=",
        "command": "workbench.action.zoomIn"
    },
    {
        "key": "ctrl+numpad_subtract",
        "command": "workbench.action.zoomOut"
    },
    {
        "key": "ctrl+shift+-",
        "command": "workbench.action.zoomOut"
    },
    {
        "key": "ctrl+-",
        "command": "workbench.action.zoomOut"
    },
    {
        "key": "ctrl+numpad0",
        "command": "workbench.action.zoomReset"
    },
    {
        "key": "ctrl+shift+m",
        "when": "workbench.panel.markers.view.active",
        "command": "workbench.actions.view.problems"
    },
    {
        "key": "escape",
        "when": "bannerFocused",
        "command": "workbench.banner.focusBanner"
    },
    {
        "key": "down",
        "when": "bannerFocused",
        "command": "workbench.banner.focusNextAction"
    },
    {
        "key": "right",
        "when": "bannerFocused",
        "command": "workbench.banner.focusNextAction"
    },
    {
        "key": "up",
        "when": "bannerFocused",
        "command": "workbench.banner.focusPreviousAction"
    },
    {
        "key": "left",
        "when": "bannerFocused",
        "command": "workbench.banner.focusPreviousAction"
    },
    {
        "key": "ctrl+shift+y",
        "when": "workbench.panel.repl.view.active",
        "command": "workbench.debug.action.toggleRepl"
    },
    {
        "key": "ctrl+k c",
        "command": "workbench.files.action.compareWithClipboard"
    },
    {
        "key": "ctrl+k d",
        "command": "workbench.files.action.compareWithSaved"
    },
    {
        "key": "ctrl+k e",
        "when": "workbench.explorer.openEditorsView.active",
        "command": "workbench.files.action.focusOpenEditorsView"
    },
    {
        "key": "escape",
        "when": "statusBarFocused",
        "command": "workbench.statusBar.clearFocus"
    },
    {
        "key": "home",
        "when": "statusBarFocused",
        "command": "workbench.statusBar.focusFirst"
    },
    {
        "key": "end",
        "when": "statusBarFocused",
        "command": "workbench.statusBar.focusLast"
    },
    {
        "key": "down",
        "when": "statusBarFocused",
        "command": "workbench.statusBar.focusNext"
    },
    {
        "key": "right",
        "when": "statusBarFocused",
        "command": "workbench.statusBar.focusNext"
    },
    {
        "key": "up",
        "when": "statusBarFocused",
        "command": "workbench.statusBar.focusPrevious"
    },
    {
        "key": "left",
        "when": "statusBarFocused",
        "command": "workbench.statusBar.focusPrevious"
    },
    {
        "key": "ctrl+shift+d",
        "when": "viewContainer.workbench.view.debug.enabled",
        "command": "workbench.view.debug"
    },
    {
        "key": "ctrl+shift+e",
        "when": "viewContainer.workbench.view.explorer.enabled",
        "command": "workbench.view.explorer"
    },
    {
        "key": "ctrl+shift+x",
        "when": "viewContainer.workbench.view.extensions.enabled",
        "command": "workbench.view.extensions"
    },
    {
        "key": "ctrl+shift+g",
        "when": "workbench.scm.active",
        "command": "workbench.view.scm"
    },
    {
        "key": "ctrl+shift+f",
        "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/",
        "command": "workbench.view.search"
    },
    {
        "key": "ctrl+right",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "breadcrumbs.focusNextWithPicker"
    },
    {
        "key": "ctrl+left",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "breadcrumbs.focusPreviousWithPicker"
    },
    {
        "key": "escape",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "breadcrumbs.selectEditor"
    },
    {
        "key": "down",
        "when": "notebookOutputInputFocused",
        "command": "notebook.cell.nullAction"
    },
    {
        "key": "up",
        "when": "notebookOutputInputFocused",
        "command": "notebook.cell.nullAction"
    },
    {
        "key": "ctrl+a",
        "when": "notebookEditorFocused && notebookOutputFocused",
        "command": "notebook.cell.output.selectAll"
    },
    {
        "key": "ctrl+k down",
        "when": "focusedView != ''",
        "command": "views.moveViewDown"
    },
    {
        "key": "ctrl+k left",
        "when": "focusedView != ''",
        "command": "views.moveViewLeft"
    },
    {
        "key": "ctrl+k right",
        "when": "focusedView != ''",
        "command": "views.moveViewRight"
    },
    {
        "key": "ctrl+k up",
        "when": "focusedView != ''",
        "command": "views.moveViewUp"
    },
    {
        "key": "ctrl+pagedown",
        "when": "inDebugRepl",
        "command": "workbench.action.debug.nextConsole"
    },
    {
        "key": "ctrl+pageup",
        "when": "inDebugRepl",
        "command": "workbench.action.debug.prevConsole"
    },
    {
        "key": "tab",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible",
        "command": "workbench.action.terminal.acceptSelectedSuggestion"
    },
    {
        "key": "enter",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible",
        "command": "workbench.action.terminal.acceptSelectedSuggestion"
    },
    {
        "key": "escape",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible",
        "command": "workbench.action.terminal.hideSuggestWidget"
    },
    {
        "key": "ctrl+shift+o",
        "when": "terminalFocus && terminalHasBeenCreated",
        "command": "workbench.action.terminal.openDetectedLink"
    },
    {
        "key": "ctrl+shift+g",
        "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal'",
        "command": "workbench.action.terminal.openDetectedLink"
    },
    {
        "key": "pagedown",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible",
        "command": "workbench.action.terminal.selectNextPageSuggestion"
    },
    {
        "key": "down",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible",
        "command": "workbench.action.terminal.selectNextSuggestion"
    },
    {
        "key": "pageup",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible",
        "command": "workbench.action.terminal.selectPrevPageSuggestion"
    },
    {
        "key": "up",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible",
        "command": "workbench.action.terminal.selectPrevSuggestion"
    },
    {
        "key": "f6",
        "when": "debugState == 'running'",
        "command": "workbench.action.debug.pause"
    },
    {
        "key": "alt+down",
        "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'",
        "command": "workbench.action.terminal.accessibleBufferGoToNextCommand"
    },
    {
        "key": "alt+up",
        "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'",
        "command": "workbench.action.terminal.accessibleBufferGoToPreviousCommand"
    },
    {
        "key": "f2",
        "when": "watchExpressionsFocused",
        "command": "debug.renameWatchExpression"
    },
    {
        "key": "f2",
        "when": "variablesFocused",
        "command": "debug.setVariable"
    },
    {
        "key": "space",
        "when": "breakpointsFocused && !inputFocus",
        "command": "debug.toggleBreakpoint"
    },
    {
        "key": "escape",
        "when": "notebookEditorFocused && notebookOutputFocused",
        "command": "notebook.cell.quitEdit"
    },
    {
        "key": "ctrl+v",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus",
        "command": "filesExplorer.paste"
    },
    {
        "key": "shift+delete",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus",
        "command": "deleteFile"
    },
    {
        "key": "delete",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus",
        "command": "deleteFile"
    },
    {
        "key": "ctrl+shift+.",
        "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown",
        "command": "editor.action.accessibleViewGoToSymbol"
    },
    {
        "key": "ctrl+shift+o",
        "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown",
        "command": "editor.action.accessibleViewGoToSymbol"
    },
    {
        "key": "ctrl+e",
        "when": "accessibilityHelpIsShown",
        "command": "editor.action.toggleScreenReaderAccessibilityMode"
    },
    {
        "key": "shift+alt+f1",
        "command": "editor.action.toggleScreenReaderAccessibilityMode"
    },
    {
        "key": "escape",
        "when": "callHierarchyVisible && !config.editor.stablePeek",
        "command": "editor.closeCallHierarchy"
    },
    {
        "key": "escape",
        "when": "typeHierarchyVisible && !config.editor.stablePeek",
        "command": "editor.closeTypeHierarchy"
    },
    {
        "key": "enter",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus",
        "command": "explorer.openAndPassFocus"
    },
    {
        "key": "escape",
        "when": "explorerResourceCut && filesExplorerFocus && foldersViewVisible && !inputFocus",
        "command": "filesExplorer.cancelCut"
    },
    {
        "key": "ctrl+c",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus",
        "command": "filesExplorer.copy"
    },
    {
        "key": "ctrl+x",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus",
        "command": "filesExplorer.cut"
    },
    {
        "key": "space",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus",
        "command": "filesExplorer.openFilePreserveFocus"
    },
    {
        "key": "home",
        "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus",
        "command": "firstCompressedFolder"
    },
    {
        "key": "ctrl+enter",
        "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatDocumentChanged || inlineChatHasProvider && inlineChatVisible && config.inlineChat.mode != 'preview'",
        "command": "inlineChat.acceptChanges"
    },
    {
        "key": "end",
        "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus",
        "command": "lastCompressedFolder"
    },
    {
        "key": "delete",
        "when": "explorerResourceMoveableToTrash && filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus",
        "command": "moveFileToTrash"
    },
    {
        "key": "right",
        "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus",
        "command": "nextCompressedFolder"
    },
    {
        "key": "left",
        "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus",
        "command": "previousCompressedFolder"
    },
    {
        "key": "delete",
        "when": "tunnelCloseable && tunnelViewFocus",
        "command": "remote.tunnel.closeInline"
    },
    {
        "key": "ctrl+c",
        "when": "tunnelViewFocus && tunnelType == 'Detected' && tunnelViewMultiSelection == 'undefined' || tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'",
        "command": "remote.tunnel.copyAddressInline"
    },
    {
        "key": "f2",
        "when": "tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'",
        "command": "remote.tunnel.label"
    },
    {
        "key": "f2",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus",
        "command": "renameFile"
    },
    {
        "key": "f5",
        "when": "debugState == 'stopped'",
        "command": "workbench.action.debug.continue"
    },
    {
        "key": "f11",
        "when": "debugState != 'inactive'",
        "command": "workbench.action.debug.stepInto"
    },
    {
        "key": "shift+escape",
        "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus",
        "command": "closeReferenceSearch"
    },
    {
        "key": "escape",
        "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus",
        "command": "closeReferenceSearch"
    },
    {
        "key": "left",
        "when": "treestickyScrollFocused",
        "command": "list.stickyScroll.collapse"
    },
    {
        "key": "enter",
        "when": "treestickyScrollFocused",
        "command": "list.stickyScrollselect"
    },
    {
        "key": "space",
        "when": "treestickyScrollFocused",
        "command": "list.stickyScrolltoggleExpand"
    },
    {
        "key": "escape",
        "when": "notificationCenterVisible",
        "command": "notifications.hideList"
    },
    {
        "key": "ctrl+alt+right",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'",
        "command": "quickInput.acceptInBackground"
    },
    {
        "key": "ctrl+right",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'",
        "command": "quickInput.acceptInBackground"
    },
    {
        "key": "alt+right",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'",
        "command": "quickInput.acceptInBackground"
    },
    {
        "key": "right",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'",
        "command": "quickInput.acceptInBackground"
    },
    {
        "key": "alt+left",
        "when": "inQuickOpen",
        "command": "workbench.action.quickInputBack"
    },
    {
        "key": "ctrl+tab",
        "when": "inEditorsPicker && inQuickOpen",
        "command": "workbench.action.quickOpenNavigateNextInEditorPicker"
    },
    {
        "key": "ctrl+e",
        "when": "inFilesPicker && inQuickOpen",
        "command": "workbench.action.quickOpenNavigateNextInFilePicker"
    },
    {
        "key": "ctrl+p",
        "when": "inFilesPicker && inQuickOpen",
        "command": "workbench.action.quickOpenNavigateNextInFilePicker"
    },
    {
        "key": "ctrl+r",
        "when": "inQuickOpen && inRecentFilesPicker",
        "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker"
    },
    {
        "key": "ctrl+q",
        "when": "inQuickOpen && inViewsPicker",
        "command": "workbench.action.quickOpenNavigateNextInViewPicker"
    },
    {
        "key": "ctrl+shift+tab",
        "when": "inEditorsPicker && inQuickOpen",
        "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker"
    },
    {
        "key": "ctrl+shift+e",
        "when": "inFilesPicker && inQuickOpen",
        "command": "workbench.action.quickOpenNavigatePreviousInFilePicker"
    },
    {
        "key": "ctrl+shift+p",
        "when": "inFilesPicker && inQuickOpen",
        "command": "workbench.action.quickOpenNavigatePreviousInFilePicker"
    },
    {
        "key": "ctrl+shift+r",
        "when": "inQuickOpen && inRecentFilesPicker",
        "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker"
    },
    {
        "key": "ctrl+shift+q",
        "when": "inQuickOpen && inViewsPicker",
        "command": "workbench.action.quickOpenNavigatePreviousInViewPicker"
    },
    {
        "key": "ctrl+r",
        "when": "isDevelopment",
        "command": "workbench.action.reloadWindow"
    },
    {
        "key": "ctrl+shift+f",
        "when": "terminalFocus && terminalProcessSupported && terminalTextSelected",
        "command": "workbench.action.terminal.searchWorkspace"
    },
    {
        "key": "ctrl+shift+i",
        "when": "isDevelopment",
        "command": "workbench.action.toggleDevTools"
    },
    {
        "key": "escape",
        "when": "notificationFocus && notificationToastsVisible",
        "command": "notifications.hideToasts"
    },
    {
        "key": "escape",
        "when": "voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || voiceChatInProgress && scopedVoiceChatInProgress == 'view'",
        "command": "workbench.action.chat.stopListening"
    },
    {
        "key": "escape",
        "when": "scopedChatSynthesisInProgress",
        "command": "workbench.action.chat.stopReadChatItemAloud"
    },
    {
        "key": "escape",
        "when": "editorDictation.inProgress",
        "command": "workbench.action.editorDictation.stop"
    },
    {
        "key": "escape",
        "when": "scopedChatSynthesisInProgress && textToSpeechInProgress",
        "command": "workbench.action.speech.stopReadAloud"
    },
    {
        "key": "f10",
        "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'",
        "command": "extension.node-debug.startWithStopOnEntry"
    },
    {
        "key": "ctrl+k ctrl+alt+s",
        "when": "isInDiffEditor && !operationInProgress",
        "command": "git.stageSelectedRanges"
    },
    {
        "key": "ctrl+shift+v",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'",
        "command": "markdown.showPreview"
    },
    {
        "key": "shift+alt+f12",
        "when": "editorHasReferenceProvider",
        "command": "references-view.findReferences"
    },
    {
        "key": "f11",
        "when": "!inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'node' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-node'",
        "command": "extension.node-debug.startWithStopOnEntry"
    },
    {
        "key": "ctrl+k ctrl+n",
        "when": "isInDiffEditor && !operationInProgress",
        "command": "git.unstageSelectedRanges"
    },
    {
        "key": "ctrl+k v",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'",
        "command": "markdown.showPreviewToSide"
    },
    {
        "key": "f4",
        "when": "reference-list.hasResult && references-view.canNavigate",
        "command": "references-view.next"
    },
    {
        "key": "ctrl+k ctrl+r",
        "when": "isInDiffEditor && !operationInProgress",
        "command": "git.revertSelectedRanges"
    },
    {
        "key": "shift+f4",
        "when": "reference-list.hasResult && references-view.canNavigate",
        "command": "references-view.prev"
    },
    {
        "key": "shift+alt+h",
        "when": "editorHasCallHierarchyProvider",
        "command": "references-view.showCallHierarchy"
    },
    {
        "key": "ctrl+enter",
        "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat && !inChatInput",
        "command": "workbench.action.chat.insertCodeBlock"
    },
    {
        "key": "ctrl+i",
        "when": "inlineChatHasProvider && terminalFocusInAny && terminalHasBeenCreated || inlineChatHasProvider && terminalFocusInAny && terminalProcessSupported",
        "command": "workbench.action.terminal.chat.start"
    },
    {
        "key": "ctrl+.",
        "when": "codeActionMenuVisible",
        "command": "acceptSelectedCodeAction"
    },
    {
        "key": "enter",
        "when": "codeActionMenuVisible",
        "command": "acceptSelectedCodeAction"
    },
    {
        "key": "shift+escape",
        "when": "codeActionMenuVisible",
        "command": "hideCodeActionWidget"
    },
    {
        "key": "escape",
        "when": "codeActionMenuVisible",
        "command": "hideCodeActionWidget"
    },
    {
        "key": "ctrl+enter",
        "when": "codeActionMenuVisible",
        "command": "previewSelectedCodeAction"
    },
    {
        "key": "ctrl+down",
        "when": "codeActionMenuVisible",
        "command": "selectNextCodeAction"
    },
    {
        "key": "down",
        "when": "codeActionMenuVisible",
        "command": "selectNextCodeAction"
    },
    {
        "key": "ctrl+up",
        "when": "codeActionMenuVisible",
        "command": "selectPrevCodeAction"
    },
    {
        "key": "up",
        "when": "codeActionMenuVisible",
        "command": "selectPrevCodeAction"
    },
    {
        "key": "escape",
        "when": "comparingMovedCode",
        "command": "diffEditor.exitCompareMove"
    },
    {
        "key": "ctrl+alt+r",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled",
        "command": "-workbench.action.terminal.runRecentCommand"
    },
    {
        "key": "ctrl+shift+d",
        "when": "viewContainer.workbench.view.debug.enabled",
        "command": "-workbench.view.debug"
    },
    {
        "key": "ctrl+k i",
        "when": "editorFocus && hasSpeechProvider && !inlineChat.quickChatInProgress",
        "command": "-inlineChat.quickVoice.start"
    },
    {
        "key": "ctrl+k i",
        "when": "hasSpeechProvider && inlineChat.quickChatInProgress",
        "command": "-inlineChat.quickVoice.stop"
    },
    {
        "key": "ctrl+k o",
        "when": "activeEditor",
        "command": "-workbench.action.copyEditorToNewWindow"
    },
    {
        "key": "ctrl+k ctrl+i",
        "when": "customTreeView && listFocus && !inputFocus && !treestickyScrollFocused",
        "command": "-workbench.action.showTreeHover"
    },
    {
        "key": "ctrl+m",
        "command": "editor.emmet.action.evaluateMathExpression"
    },
    {
        "key": "shift+insert",
        "command": "-editor.action.clipboardPasteAction"
    },
    {
        "key": "v",
        "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused",
        "command": "-notebook.cell.paste"
    },
    {
        "key": "ctrl+alt+j",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'nushell'",
        "command": "-editor.action.insertSnippet"
    },
    {
        "key": "ctrl+i",
        "when": "inlineChatHasProvider && !editorReadonly",
        "command": "-inlineChat.start"
    },
    {
        "key": "ctrl+i",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible",
        "command": "-editor.action.triggerSuggest"
    },
    {
        "key": "ctrl+i",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.editing.toggleItalic"
    },
    {
        "key": "ctrl+i",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus",
        "command": "-toggleSuggestionDetails"
    },
    {
        "key": "ctrl+i",
        "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion",
        "command": "-focusSuggestion"
    },
    {
        "key": "ctrl+i",
        "when": "terminalFocus",
        "command": "-github.copilot.terminal.suggestCommand"
    },
    {
        "key": "ctrl+shift+b",
        "when": "taskCommandsRegistered",
        "command": "-workbench.action.tasks.build"
    },
    {
        "key": "ctrl+shift+l",
        "when": "editorFocus",
        "command": "-editor.action.selectHighlights"
    },
    {
        "key": "ctrl+shift+d",
        "when": "viewContainer.workbench.view.debug.enabled",
        "command": "-workbench.view.debug"
    },
    {
        "key": "ctrl+1",
        "command": "-workbench.action.focusFirstEditorGroup"
    },
    {
        "key": "ctrl+shift+e",
        "when": "viewContainer.workbench.view.explorer.enabled",
        "command": "-workbench.view.explorer"
    },
    {
        "key": "ctrl+shift+g",
        "when": "workbench.scm.active",
        "command": "-workbench.view.scm"
    },
    {
        "key": "ctrl+2",
        "command": "-workbench.action.focusSecondEditorGroup"
    },
    {
        "key": "ctrl+3",
        "command": "-workbench.action.focusThirdEditorGroup"
    },
    {
        "key": "shift+alt+down",
        "when": "editorTextFocus && !editorReadonly",
        "command": "-editor.action.copyLinesDownAction"
    },
    {
        "key": "shift+alt+down",
        "when": "notebookEditorFocused && !inputFocus",
        "command": "-notebook.cell.copyDown"
    },
    {
        "key": "shift+alt+down",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/\n",
        "command": "-markdown.extension.onCopyLineDown"
    },
    {
        "key": "shift+alt+up",
        "when": "editorTextFocus && !editorReadonly",
        "command": "-editor.action.copyLinesUpAction"
    },
    {
        "key": "shift+alt+up",
        "when": "notebookEditorFocused && !inputFocus",
        "command": "-notebook.cell.copyUp"
    },
    {
        "key": "shift+alt+up",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/\n",
        "command": "-markdown.extension.onCopyLineUp"
    },
    {
        "key": "shift+alt+i",
        "when": "editorTextFocus",
        "command": "-editor.action.insertCursorAtEndOfEachLineSelected"
    },
    {
        "key": "ctrl+k ctrl+c",
        "when": "editorTextFocus && !editorReadonly",
        "command": "-editor.action.addCommentLine"
    },
    {
        "key": "ctrl+shift+f5",
        "when": "inDebugMode",
        "command": "-workbench.action.debug.restart"
    },
    {
        "key": "ctrl+k ctrl+pageup",
        "command": "-workbench.action.previousEditorInGroup"
    },
    {
        "key": "ctrl+k ctrl+pagedown",
        "command": "-workbench.action.nextEditorInGroup"
    },
    {
        "key": "ctrl+shift+oem_5",
        "when": "editorTextFocus",
        "command": "-editor.action.jumpToBracket"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "shift+alt+o",
        "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/",
        "command": "-editor.action.organizeImports"
    },
    {
        "key": "ctrl+o",
        "when": "true",
        "command": "-workbench.action.files.openFile"
    },
    {
        "key": "ctrl+o",
        "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'",
        "command": "-workbench.action.files.openFolderViaWorkspace"
    },
    {
        "key": "ctrl+o",
        "when": "isMacNative && openFolderWorkspaceSupport",
        "command": "-workbench.action.files.openFileFolder"
    },
    {
        "key": "ctrl+o",
        "when": "remoteFileDialogVisible",
        "command": "-workbench.action.files.openLocalFile"
    },
    {
        "key": "ctrl+oem_comma",
        "command": "-workbench.action.openSettings"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-workbench.action.files.saveAs"
    },
    {
        "key": "ctrl+shift+s",
        "when": "remoteFileDialogVisible",
        "command": "-workbench.action.files.saveLocalFile"
    },
    {
        "key": "ctrl+k s",
        "command": "-saveAll"
    },
    {
        "key": "ctrl+k ctrl+shift+s",
        "command": "-workbench.action.files.saveWithoutFormatting"
    },
    {
        "key": "alt+s",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.editing.toggleStrikethrough"
    },
    {
        "key": "ctrl+enter",
        "when": "accessibilityModeEnabled && hasChatProvider && inChat",
        "command": "-workbench.action.chat.insertCodeBlock"
    },
    {
        "key": "ctrl+enter",
        "when": "editorTextFocus && github.copilot.activated && !inInteractiveInput && !interactiveEditorFocused",
        "command": "-github.copilot.generate"
    },
    {
        "key": "f11",
        "when": "!inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'node' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-node'\n",
        "command": "-extension.node-debug.startWithStopOnEntry"
    },
    {
        "key": "f11",
        "when": "debugState != 'inactive'",
        "command": "-workbench.action.debug.stepInto"
    },
    {
        "key": "f11",
        "when": "!isIOS",
        "command": "-workbench.action.toggleFullScreen"
    },
    {
        "key": "ctrl+k z",
        "command": "-workbench.action.toggleZenMode"
    },
    {
        "key": "ctrl+enter",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused\n",
        "command": "-jupyter.runcurrentcell"
    },
    {
        "key": "ctrl+enter",
        "when": "notebookCellResource in 'jupyter.notebookeditor.runByLineCells'",
        "command": "-jupyter.runByLineStop"
    },
    {
        "key": "ctrl+enter",
        "when": "notebookCellListFocused || editorTextFocus && inputFocus && notebookEditorFocused",
        "command": "-notebook.cell.executeAndFocusContainer"
    },
    {
        "key": "ctrl+enter",
        "when": "notebookCellListFocused && !inputFocus",
        "command": "-notebook.cell.insertCodeCellBelow"
    },
    {
        "key": "ctrl+shift+e",
        "when": "inFilesPicker && inQuickOpen",
        "command": "-workbench.action.quickOpenNavigatePreviousInFilePicker"
    },
    {
        "key": "ctrl+shift+w",
        "command": "-workbench.action.closeWindow"
    },
    {
        "key": "ctrl+tab",
        "when": "!activeEditorGroupEmpty",
        "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+shift+tab",
        "when": "!activeEditorGroupEmpty",
        "command": "-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+q",
        "when": "inQuickOpen && inViewsPicker",
        "command": "-workbench.action.quickOpenNavigateNextInViewPicker"
    },
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quickOpenView"
    },
    {
        "key": "ctrl+shift+q",
        "when": "inQuickOpen && inViewsPicker",
        "command": "-workbench.action.quickOpenNavigatePreviousInViewPicker"
    },
    {
        "key": "f8",
        "when": "editorFocus",
        "command": "-editor.action.marker.nextInFiles"
    },
    {
        "key": "shift+f8",
        "when": "editorFocus",
        "command": "-editor.action.marker.prevInFiles"
    },
    {
        "key": "ctrl+shift+oem_period",
        "when": "breadcrumbsPossible && breadcrumbsVisible",
        "command": "-breadcrumbs.focusAndSelect"
    },
    {
        "key": "ctrl+shift+oem_1",
        "when": "breadcrumbsPossible && breadcrumbsVisible",
        "command": "-breadcrumbs.focus"
    },
    {
        "key": "ctrl+right",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "-breadcrumbs.focusNext"
    },
    {
        "key": "right",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "-breadcrumbs.focusNext"
    },
    {
        "key": "ctrl+right",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus",
        "command": "-breadcrumbs.focusNextWithPicker"
    },
    {
        "key": "ctrl+left",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "-breadcrumbs.focusPrevious"
    },
    {
        "key": "left",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "-breadcrumbs.focusPrevious"
    },
    {
        "key": "ctrl+left",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus",
        "command": "-breadcrumbs.focusPreviousWithPicker"
    },
    {
        "key": "ctrl+enter",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "-breadcrumbs.revealFocused"
    },
    {
        "key": "space",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "-breadcrumbs.revealFocused"
    },
    {
        "key": "ctrl+enter",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus",
        "command": "-breadcrumbs.revealFocusedFromTreeAside"
    },
    {
        "key": "escape",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "-breadcrumbs.selectEditor"
    },
    {
        "key": "down",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "-breadcrumbs.selectFocused"
    },
    {
        "key": "enter",
        "when": "breadcrumbsActive && breadcrumbsVisible",
        "command": "-breadcrumbs.selectFocused"
    },
    {
        "key": "shift+alt+f12",
        "when": "editorHasReferenceProvider",
        "command": "-references-view.findReferences"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "ctrl+f12",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor",
        "command": "-editor.action.goToImplementation"
    },
    {
        "key": "shift+alt+oem_period",
        "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/",
        "command": "-editor.action.autoFix"
    },
    {
        "key": "ctrl+shift+oem_period",
        "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown",
        "command": "-editor.action.accessibleViewGoToSymbol"
    },
    {
        "key": "ctrl+shift+oem_period",
        "when": "editorTextFocus && !editorReadonly",
        "command": "-editor.action.inPlaceReplace.down"
    },
    {
        "key": "ctrl+v",
        "command": "-editor.action.clipboardPasteAction"
    },
    {
        "key": "ctrl+down",
        "when": "accessibilityModeEnabled && accessibleViewOnLastLine && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewOnLastLine && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'",
        "command": "-workbench.action.terminal.focus"
    },
    {
        "key": "ctrl+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "ctrl+oem_3",
        "when": "terminal.active",
        "command": "-workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "ctrl+shift+oem_3",
        "when": "terminalProcessSupported || terminalWebExtensionContributedProfile",
        "command": "-workbench.action.terminal.new"
    },
    {
        "key": "ctrl+r",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported || accessibilityModeEnabled && accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'",
        "command": "-workbench.action.terminal.runRecentCommand"
    },
    {
        "key": "ctrl+r",
        "when": "inQuickOpen && inRecentFilesPicker",
        "command": "-workbench.action.quickOpenNavigateNextInRecentFilesPicker"
    },
    {
        "key": "ctrl+r",
        "when": "python.hasActiveTensorBoardSession",
        "command": "-python.refreshTensorBoard"
    },
    {
        "key": "ctrl+g",
        "command": "-workbench.action.gotoLine"
    },
    {
        "key": "ctrl+k ctrl+i",
        "when": "editorTextFocus",
        "command": "-editor.action.showHover"
    },
    {
        "key": "ctrl+a",
        "command": "-editor.action.selectAll"
    },
    {
        "key": "ctrl+shift+a",
        "when": "notificationFocus || notificationToastsVisible",
        "command": "-notification.acceptPrimaryAction"
    },
    {
        "key": "ctrl+shift+c",
        "when": "!terminalFocus",
        "command": "-workbench.action.terminal.openNativeConsole"
    },
    {
        "key": "ctrl+shift+g",
        "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal'",
        "command": "-workbench.action.terminal.openDetectedLink"
    },
    {
        "key": "ctrl+shift+r",
        "command": "-workbench.view.extension.thunder-client"
    },
    {
        "key": "ctrl+shift+r",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly",
        "command": "-editor.action.refactor"
    },
    {
        "key": "ctrl+shift+r",
        "when": "inSearchEditor",
        "command": "-rerunSearchEditorSearch"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+oem_5",
        "command": "-workbench.action.splitEditor"
    },
    {
        "key": "alt+g",
        "command": "-relative-goto.goto"
    },
    {
        "key": "ctrl+k ctrl+s",
        "command": "-workbench.action.openGlobalKeybindings"
    },
    {
        "key": "ctrl+k",
        "when": "cody.activated && config.cody.internal.unstable && !editorReadonly",
        "command": "-cody.command.edit-code"
    },
    {
        "key": "ctrl+k m",
        "when": "!notebookEditorFocused",
        "command": "-workbench.action.editor.changeLanguageMode"
    },
    {
        "key": "ctrl+k ctrl+alt+c",
        "command": "-workbench.action.addComment"
    },
    {
        "key": "ctrl+k ctrl+alt+down",
        "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'",
        "command": "-editor.action.nextCommentingRange"
    },
    {
        "key": "ctrl+k ctrl+alt+up",
        "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'",
        "command": "-editor.action.previousCommentingRange"
    },
    {
        "key": "ctrl+k ctrl+oem_comma",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.createFoldingRangeFromSelection"
    },
    {
        "key": "ctrl+k ctrl+i",
        "when": "editorTextFocus && inDebugMode",
        "command": "-editor.debug.action.showDebugHover"
    },
    {
        "key": "ctrl+k ctrl+k",
        "when": "resource == 'vscode-userdata:/c%3A/Users/Econn/AppData/Roaming/Code/User/keybindings.json'",
        "command": "-editor.action.defineKeybinding"
    },
    {
        "key": "ctrl+k e",
        "when": "workbench.explorer.openEditorsView.active",
        "command": "-workbench.files.action.focusOpenEditorsView"
    },
    {
        "key": "ctrl+k c",
        "command": "-workbench.files.action.compareWithClipboard"
    },
    {
        "key": "ctrl+k d",
        "command": "-workbench.files.action.compareWithSaved"
    },
    {
        "key": "ctrl+k ctrl+shift+c",
        "when": "!editorFocus",
        "command": "-copyRelativeFilePath"
    },
    {
        "key": "ctrl+k ctrl+shift+c",
        "when": "editorFocus",
        "command": "-copyRelativeFilePath"
    },
    {
        "key": "ctrl+k o",
        "when": "emptyWorkspaceSupport",
        "command": "-workbench.action.files.showOpenedFileInNewWindow"
    },
    {
        "key": "ctrl+k ctrl+o",
        "when": "openFolderWorkspaceSupport",
        "command": "-workbench.action.files.openFolder"
    },
    {
        "key": "ctrl+k ctrl+p",
        "command": "-workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+k ctrl+0",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.foldAll"
    },
    {
        "key": "ctrl+k ctrl+oem_2",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.foldAllBlockComments"
    },
    {
        "key": "ctrl+k ctrl+oem_minus",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.foldAllExcept"
    },
    {
        "key": "ctrl+k ctrl+8",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.foldAllMarkerRegions"
    },
    {
        "key": "ctrl+k ctrl+1",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.foldLevel1"
    },
    {
        "key": "ctrl+k ctrl+2",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.foldLevel2"
    },
    {
        "key": "ctrl+k ctrl+3",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.foldLevel3"
    },
    {
        "key": "ctrl+k ctrl+4",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.foldLevel4"
    },
    {
        "key": "ctrl+k ctrl+5",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.foldLevel5"
    },
    {
        "key": "ctrl+k ctrl+6",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.foldLevel6"
    },
    {
        "key": "ctrl+k ctrl+7",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.foldLevel7"
    },
    {
        "key": "ctrl+k ctrl+oem_4",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.foldRecursively"
    },
    {
        "key": "ctrl+k ctrl+f",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly",
        "command": "-editor.action.formatSelection"
    },
    {
        "key": "ctrl+k ctrl+r",
        "when": "isInDiffEditor && !operationInProgress",
        "command": "-git.revertSelectedRanges"
    },
    {
        "key": "ctrl+k ctrl+alt+s",
        "when": "isInDiffEditor && !operationInProgress",
        "command": "-git.stageSelectedRanges"
    },
    {
        "key": "ctrl+k ctrl+n",
        "when": "isInDiffEditor && !operationInProgress",
        "command": "-git.unstageSelectedRanges"
    },
    {
        "key": "ctrl+k ctrl+q",
        "command": "-workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "-workbench.action.keybindingsReference"
    },
    {
        "key": "ctrl+k i",
        "when": "editorFocus && inlineChatHasProvider && !editorReadonly",
        "command": "-inlineChat.start"
    },
    {
        "key": "ctrl+k ctrl+shift+c",
        "when": "focusedView == 'javaProjectExplorer' && java:serverMode == 'Standard'",
        "command": "-java.view.package.copyRelativeFilePath"
    },
    {
        "key": "ctrl+k v",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'",
        "command": "-markdown.showPreviewToSide"
    },
    {
        "key": "ctrl+k ctrl+d",
        "when": "editorFocus",
        "command": "-editor.action.moveSelectionToNextFindMatch"
    },
    {
        "key": "ctrl+k ctrl+c",
        "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed",
        "command": "-notebook.cell.collapseCellInput"
    },
    {
        "key": "ctrl+k t",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed",
        "command": "-notebook.cell.collapseCellOutput"
    },
    {
        "key": "ctrl+k ctrl+c",
        "when": "notebookCellInputIsCollapsed && notebookCellListFocused",
        "command": "-notebook.cell.expandCellInput"
    },
    {
        "key": "ctrl+k t",
        "when": "notebookCellListFocused && notebookCellOutputIsCollapsed",
        "command": "-notebook.cell.expandCellOutput"
    },
    {
        "key": "ctrl+k ctrl+shift+oem_5",
        "when": "editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused",
        "command": "-notebook.cell.split"
    },
    {
        "key": "ctrl+k y",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus",
        "command": "-notebook.cell.toggleOutputScrolling"
    },
    {
        "key": "ctrl+k ctrl+shift+n",
        "command": "-notifications.showList"
    },
    {
        "key": "ctrl+k f12",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor",
        "command": "-editor.action.revealDefinitionAside"
    },
    {
        "key": "ctrl+k ctrl+f12",
        "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor",
        "command": "-editor.action.revealDefinitionAside"
    },
    {
        "key": "ctrl+k ctrl+t",
        "command": "-workbench.action.selectTheme"
    },
    {
        "key": "ctrl+k ctrl+u",
        "when": "editorTextFocus && !editorReadonly",
        "command": "-editor.action.removeCommentLine"
    },
    {
        "key": "ctrl+k ctrl+oem_period",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.removeManualFoldingRanges"
    },
    {
        "key": "ctrl+k ctrl+k",
        "when": "editorTextFocus && selectionAnchorSet",
        "command": "-editor.action.selectFromAnchorToCursor"
    },
    {
        "key": "ctrl+k ctrl+b",
        "when": "editorTextFocus",
        "command": "-editor.action.setSelectionAnchor"
    },
    {
        "key": "ctrl+k ctrl+i",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus",
        "command": "-workbench.action.terminal.focusHover"
    },
    {
        "key": "ctrl+k ctrl+l",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.toggleFold"
    },
    {
        "key": "ctrl+k ctrl+x",
        "when": "editorTextFocus && !editorReadonly",
        "command": "-editor.action.trimTrailingWhitespace"
    },
    {
        "key": "ctrl+k ctrl+j",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.unfoldAll"
    },
    {
        "key": "ctrl+k ctrl+oem_plus",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.unfoldAllExcept"
    },
    {
        "key": "ctrl+k ctrl+9",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.unfoldAllMarkerRegions"
    },
    {
        "key": "ctrl+k ctrl+oem_6",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.unfoldRecursively"
    },
    {
        "key": "ctrl+k ctrl+shift+w",
        "command": "-workbench.action.closeAllGroups"
    },
    {
        "key": "ctrl+k ctrl+w",
        "command": "-workbench.action.closeAllEditors"
    },
    {
        "key": "ctrl+k w",
        "command": "-workbench.action.closeEditorsInGroup"
    },
    {
        "key": "ctrl+k u",
        "command": "-workbench.action.closeUnmodifiedEditors"
    },
    {
        "key": "ctrl+k ctrl+up",
        "command": "-workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+k ctrl+down",
        "command": "-workbench.action.focusBelowGroup"
    },
    {
        "key": "ctrl+k ctrl+left",
        "command": "-workbench.action.focusLeftGroup"
    },
    {
        "key": "ctrl+k ctrl+right",
        "command": "-workbench.action.focusRightGroup"
    },
    {
        "key": "ctrl+k ctrl+shift+oem_5",
        "when": "sideBySideEditorActive",
        "command": "-workbench.action.joinEditorInGroup"
    },
    {
        "key": "ctrl+k enter",
        "command": "-workbench.action.keepEditor"
    },
    {
        "key": "ctrl+k down",
        "command": "-workbench.action.moveActiveEditorGroupDown"
    },
    {
        "key": "ctrl+k left",
        "command": "-workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "ctrl+k right",
        "command": "-workbench.action.moveActiveEditorGroupRight"
    },
    {
        "key": "ctrl+k up",
        "command": "-workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "ctrl+k shift+enter",
        "when": "!activeEditorIsPinned",
        "command": "-workbench.action.pinEditor"
    },
    {
        "key": "ctrl+k ctrl+oem_5",
        "command": "-workbench.action.splitEditorDown"
    },
    {
        "key": "ctrl+k ctrl+shift+oem_5",
        "when": "activeEditorCanSplitInGroup",
        "command": "-workbench.action.splitEditorInGroup"
    },
    {
        "key": "ctrl+k ctrl+oem_5",
        "command": "-workbench.action.splitEditorLeft"
    },
    {
        "key": "ctrl+k ctrl+oem_5",
        "command": "-workbench.action.splitEditorOrthogonal"
    },
    {
        "key": "ctrl+k ctrl+oem_5",
        "command": "-workbench.action.splitEditorRight"
    },
    {
        "key": "ctrl+k ctrl+oem_5",
        "command": "-workbench.action.splitEditorUp"
    },
    {
        "key": "ctrl+k ctrl+m",
        "when": "editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups",
        "command": "-workbench.action.toggleMaximizeEditorGroup"
    },
    {
        "key": "ctrl+k shift+enter",
        "when": "activeEditorIsPinned",
        "command": "-workbench.action.unpinEditor"
    },
    {
        "key": "ctrl+k f",
        "when": "emptyWorkspaceSupport && workbenchState != 'empty'",
        "command": "-workbench.action.closeFolder"
    },
    {
        "key": "ctrl+k ctrl+a",
        "when": "inKeybindings && keybindingFocus",
        "command": "-keybindings.editor.addKeybinding"
    },
    {
        "key": "ctrl+k ctrl+e",
        "when": "inKeybindings && keybindingFocus",
        "command": "-keybindings.editor.defineWhenExpression"
    },
    {
        "key": "ctrl+k v",
        "when": "activeWebviewPanelId == 'markdown.preview'",
        "command": "-markdown.extension.closePreview"
    },
    {
        "key": "ctrl+k f2",
        "when": "inReferenceSearchEditor || referenceSearchVisible",
        "command": "-togglePeekWidgetFocus"
    },
    {
        "key": "ctrl+k down",
        "when": "focusedView != ''",
        "command": "-views.moveViewDown"
    },
    {
        "key": "ctrl+k left",
        "when": "focusedView != ''",
        "command": "-views.moveViewLeft"
    },
    {
        "key": "ctrl+k right",
        "when": "focusedView != ''",
        "command": "-views.moveViewRight"
    },
    {
        "key": "ctrl+k up",
        "when": "focusedView != ''",
        "command": "-views.moveViewUp"
    },
    {
        "key": "ctrl+k shift+o",
        "when": "inDiffEditor",
        "command": "-workbench.action.compareEditor.openSide"
    },
    {
        "key": "ctrl+k p",
        "command": "-workbench.action.files.copyPathOfActiveFile"
    },
    {
        "key": "ctrl+k ctrl+o",
        "when": "remoteFileDialogVisible",
        "command": "-workbench.action.files.openLocalFolder"
    },
    {
        "key": "ctrl+k r",
        "command": "-workbench.action.files.revealActiveFileInWindows"
    },
    {
        "key": "ctrl+k ctrl+i",
        "when": "customTreeView && listFocus && !inputFocus",
        "command": "-workbench.action.showTreeHover"
    },
    {
        "key": "ctrl+alt+up",
        "when": "editorTextFocus",
        "command": "-editor.action.insertCursorAbove"
    },
    {
        "key": "ctrl+alt+down",
        "when": "editorTextFocus",
        "command": "-editor.action.insertCursorBelow"
    },
    {
        "key": "ctrl+v",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
        "command": "-workbench.action.terminal.paste"
    },
    {
        "key": "ctrl+shift+v",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
        "command": "-workbench.action.terminal.paste"
    },
    {
        "key": "ctrl+shift+oem_period",
        "when": "!config.breadcrumbs.enabled",
        "command": "-breadcrumbs.toggleToOn"
    },
    {
        "key": "f1",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "ctrl+a",
        "when": "editorTextFocus",
        "command": "editor.action.smartSelect.grow"
    },
    {
        "key": "ctrl+a",
        "when": "inputFocus&&!editorTextFocus",
        "command": "editor.action.selectAll"
    },
    {
        "key": "ctrl+shift+a",
        "when": "editorTextFocus",
        "command": "editor.action.selectAll"
    },
    {
        "key": "ctrl+r",
        "when": "editorTextFocus&&!isDevelopment",
        "command": "workbench.action.quickOpen",
        "args": "task "
    },
    {
        "key": "ctrl+g",
        "when": "editorTextFocus",
        "command": "workbench.action.quickOpen",
        "args": "@: "
    },
    {
        "key": "ctrl+;",
        "when": "editorTextFocus",
        "command": "workbench.action.quickOpen",
        "args": ": "
    },
    {
        "key": "ctrl+i",
        "command": "editor.action.insertSnippet"
    },
    {
        "key": "ctrl+shift+d",
        "when": "editorFocus",
        "command": "editor.action.selectHighlights"
    },
    {
        "key": "ctrl+1",
        "when": "viewContainer.workbench.view.explorer.enabled",
        "command": "workbench.view.explorer"
    },
    {
        "key": "ctrl+3",
        "command": "workbench.view.debug"
    },
    {
        "key": "f5",
        "when": "inDebugMode && debugState == 'running'",
        "command": "workbench.action.debug.restart"
    },
    {
        "key": "alt+left",
        "command": "workbench.action.previousEditorInGroup"
    },
    {
        "key": "alt+right",
        "command": "workbench.action.nextEditorInGroup"
    },
    {
        "key": "ctrl+b",
        "when": "editorTextFocus && editorLangId!=markdown",
        "command": "editor.action.jumpToBracket"
    },
    {
        "key": "ctrl+oem_8",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+o",
        "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/",
        "command": "editor.action.organizeImports"
    },
    {
        "key": "ctrl+shift+s",
        "command": "saveAll"
    },
    {
        "key": "alt+s",
        "command": "workbench.action.files.saveWithoutFormatting"
    },
    {
        "key": "f11",
        "command": "workbench.action.toggleZenMode"
    },
    {
        "key": "ctrl+shift+e",
        "command": "workbench.action.openSettingsJson"
    },
    {
        "key": "f5",
        "when": "notebookEditorFocused",
        "command": "notebook.execute"
    },
    {
        "key": "ctrl+shift+w",
        "command": "workbench.action.closeOtherEditors"
    },
    {
        "key": "ctrl+tab",
        "when": "inQuickOpen && inViewsPicker",
        "command": "workbench.action.quickOpenNavigateNextInViewPicker"
    },
    {
        "key": "ctrl+tab",
        "when": "!inQuickOpen",
        "command": "workbench.action.quickOpenView"
    },
    {
        "key": "ctrl+e",
        "command": "workbench.action.focusActiveEditorGroup"
    },
    {
        "key": "ctrl+shift+tab",
        "when": "inQuickOpen && inViewsPicker",
        "command": "workbench.action.quickOpenNavigatePreviousInViewPicker"
    },
    {
        "key": "ctrl+e",
        "when": "editorFocus",
        "command": "editor.action.marker.nextInFiles"
    },
    {
        "key": "ctrl+shift+e",
        "when": "editorFocus",
        "command": "editor.action.marker.prevInFiles"
    },
    {
        "key": "alt+enter",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor",
        "command": "editor.action.goToImplementation"
    },
    {
        "key": "ctrl+shift+oem_period",
        "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/",
        "command": "editor.action.autoFix"
    },
    {
        "key": "ctrl+v",
        "when": "!terminalFocus",
        "command": "editor.action.clipboardPasteAction"
    },
    {
        "key": "f4",
        "command": "references-view.findReferences"
    },
    {
        "key": "f3",
        "command": "references-view.findImplementations"
    },
    {
        "key": "ctrl+q",
        "command": "editor.action.fixAll"
    },
    {
        "key": "ctrl+w",
        "when": "terminalFocus",
        "command": "workbench.action.terminal.killEditor"
    },
    {
        "key": "shift+space",
        "when": "editorTextFocus",
        "command": "editor.action.showHover"
    },
    {
        "key": "ctrl+oem_5",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.terminal.clear"
    },
    {
        "key": "shift+alt+up",
        "when": "editorTextFocus",
        "command": "editor.action.insertCursorAbove"
    },
    {
        "key": "shift+alt+down",
        "when": "editorTextFocus",
        "command": "editor.action.insertCursorBelow"
    },
    {
        "key": "ctrl+t",
        "command": "workbench.action.createTerminalEditor"
    },
    {
        "key": "ctrl+v",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported",
        "command": "workbench.action.terminal.paste"
    },
    {
        "key": "f1",
        "command": "editor.action.goToTypeDefinition"
    },
    {
        "key": "ctrl+r",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled",
        "command": "workbench.action.terminal.runRecentCommand"
    },
    {
        "key": "ctrl+shift+g",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.createTerminalEditor",
                {
                    "command": "workbench.action.terminal.sendSequence",
                    "args": {
                        "text": "lazygit\r"
                    }
                }
            ]
        }
    },
    {
        "key": "ctrl+shift+i",
        "when": "editorTextFocus",
        "command": "toggle",
        "args": {
            "id": "minimap",
            "value": [
                {
                    "editor.inlayHints.enabled": "onUnlessPressed"
                },
                {
                    "editor.inlayHints.enabled": "offUnlessPressed"
                }
            ]
        }
    },
    {
        "key": "ctrl+shift+l",
        "when": "editorTextFocus",
        "command": "toggle",
        "args": {
            "id": "minimap",
            "value": [
                {
                    "editor.lineNumbers": "off"
                },
                {
                    "editor.lineNumbers": "on"
                }
            ]
        }
    },
    {
        "key": "ctrl+left",
        "when": "terminalFocus",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001b[1;5D"
        }
    },
    {
        "key": "ctrl+right",
        "when": "terminalFocus",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001b[1;5C"
        }
    },
    {
        "key": "ctrl+c",
        "when": "!terminalTextSelectedInFocused && terminalFocus",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u0003"
        }
    },
    {
        "key": "ctrl+space",
        "when": "config.terminal.integrated.suggest.enabled && terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "command": "-workbench.action.terminal.sendSequence"
    },
    {
        "key": "ctrl+shift+v",
        "when": "activeWebviewPanelId == 'markdown.preview'",
        "command": "-markdown.extension.closePreview"
    },
    {
        "key": "ctrl+k v",
        "when": "activeWebviewPanelId == 'markdown.preview'",
        "command": "-markdown.extension.closePreview"
    },
    {
        "key": "ctrl+v",
        "when": "editorHasSelection && editorTextFocus && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.editing.paste"
    },
    {
        "key": "ctrl+shift+[",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.editing.toggleHeadingDown"
    },
    {
        "key": "ctrl+shift+]",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.editing.toggleHeadingUp"
    },
    {
        "key": "backspace",
        "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.onBackspaceKey"
    },
    {
        "key": "ctrl+shift+alt+down",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.onCopyLineDown"
    },
    {
        "key": "ctrl+shift+alt+up",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.onCopyLineUp"
    },
    {
        "key": "ctrl+enter",
        "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/ || editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && config.editor.acceptSuggestionOnEnter == 'off' && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.onCtrlEnterKey"
    },
    {
        "key": "enter",
        "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && editorLangId =~ /^markdown$|^rmd$|^quarto$/ || editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && config.editor.acceptSuggestionOnEnter == 'off' && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine' && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.onEnterKey"
    },
    {
        "key": "ctrl+]",
        "when": "editorTextFocus && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.onIndentLines"
    },
    {
        "key": "alt+down",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.onMoveLineDown"
    },
    {
        "key": "alt+up",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.onMoveLineUp"
    },
    {
        "key": "ctrl+[",
        "when": "editorTextFocus && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.onOutdentLines"
    },
    {
        "key": "shift+enter",
        "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/ || editorTextFocus && !editorHasMultipleSelections && !editorReadonly && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && config.editor.acceptSuggestionOnEnter == 'off' && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.onShiftEnterKey"
    },
    {
        "key": "shift+tab",
        "when": "editorTextFocus && markdown.extension.editor.cursor.inList && !editorHasMultipleSelections && !editorReadonly && !editorTabMovesFocus && !hasOtherSuggestions && !hasSnippetCompletions && !inSnippetMode && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.onShiftTabKey"
    },
    {
        "key": "tab",
        "when": "editorTextFocus && markdown.extension.editor.cursor.inList && !editorHasMultipleSelections && !editorReadonly && !editorTabMovesFocus && !hasOtherSuggestions && !hasSnippetCompletions && !inSnippetMode && !inlineSuggestionVisible && !markdown.extension.editor.cursor.inFencedCodeBlock && !markdown.extension.editor.cursor.inMathEnv && !suggestWidgetVisible && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.onTabKey"
    },
    {
        "key": "ctrl+k i",
        "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus",
        "command": "-notebook.cell.chat.start"
    },
    {
        "key": "ctrl+i",
        "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus",
        "command": "-notebook.cell.chat.start"
    },
    {
        "key": "ctrl+shift+f9",
        "command": "-o.showOutput"
    },
    {
        "key": "escape",
        "when": "scmRepository && !suggestWidgetVisible",
        "command": "-scm.clearInput"
    },
    {
        "key": "ctrl+space",
        "when": "inlineEditsVisible",
        "command": "-editor.action.inlineEdits.accept"
    },
    {
        "key": "alt+a",
        "when": "editorTextFocus",
        "command": "-yo1dog.cursor-align.alignCursors"
    },
    {
        "key": "alt+d",
        "when": "cody.activated && !editorReadonly",
        "command": "-cody.command.document-code"
    },
    {
        "key": "alt+k",
        "when": "cody.activated && !editorReadonly",
        "command": "-cody.command.edit-code"
    },
    {
        "key": "alt+c",
        "when": "cody.activated",
        "command": "-cody.menu.commands"
    },
    {
        "key": "shift+alt+c",
        "when": "cody.activated && workspaceFolderCount > 0",
        "command": "-cody.menu.custom-commands"
    },
    {
        "key": "alt+/",
        "when": "cody.activated && cody.hasChatPanelsOpened && editorHasSelection && editorTextFocus",
        "command": "-cody.mention.selection"
    },
    {
        "key": "alt+l",
        "when": "cody.activated && cody.hasChatPanelsOpened && editorHasSelection && editorTextFocus",
        "command": "-cody.mention.selection"
    },
    {
        "key": "alt+m",
        "when": "cody.activated && config.cody.autocomplete.enabled && config.cody.autocomplete.experimental.multiModelCompletions && editorTextFocus && !editorHasSelection && !editorReadonly && !inlineSuggestionsVisible",
        "command": "-cody.multi-model-autocomplete.manual-trigger"
    },
    {
        "key": "alt+/",
        "when": "cody.activated",
        "command": "-cody.chat.panel.new"
    },
    {
        "key": "alt+l",
        "when": "cody.activated",
        "command": "-cody.chat.panel.new"
    },
    {
        "key": "alt+/",
        "when": "!cody.activated",
        "command": "-cody.chat.focus"
    },
    {
        "key": "alt+l",
        "when": "!cody.activated",
        "command": "-cody.chat.focus"
    },
    {
        "key": "alt+\\",
        "when": "cody.activated && config.cody.autocomplete.enabled && editorTextFocus && !editorHasSelection && !editorReadonly && !inlineSuggestionsVisible",
        "command": "-cody.autocomplete.manual-trigger"
    },
    {
        "key": "ctrl+s",
        "when": "!issues.creatingFromFile && resourceScheme == 'newIssue' && config.files.autoSave != 'off'",
        "command": "-issue.createIssueFromFile"
    },
    {
        "key": "ctrl+enter",
        "when": "!issues.creatingFromFile && resourceScheme == 'newIssue'",
        "command": "-issue.createIssueFromFile"
    },
    {
        "key": "ctrl+k ctrl+k",
        "when": "resource == 'vscode-userdata:/home/econn/.config/Code/User/keybindings.json'",
        "command": "-editor.action.defineKeybinding"
    },
    {
        "key": "ctrl+k ctrl+shift+s",
        "command": "-easySnippet.run"
    },
    {
        "key": "ctrl+shift+space",
        "when": "suggestWidgetVisible",
        "command": "-issue.suggestRefresh"
    },
    {
        "key": "ctrl+k m",
        "when": "commentEditorFocused",
        "command": "-pr.makeSuggestion"
    },
    {
        "key": "ctrl+g",
        "when": "activeCustomEditorId == 'hexEditor.hexedit'",
        "command": "-hexEditor.goToOffset"
    },
    {
        "key": "insert",
        "when": "hexEditor:isActive",
        "command": "-hexEditor.switchEditMode"
    },
    {
        "key": "escape",
        "when": "inlineEditsVisible",
        "command": "-editor.action.inlineEdits.hide"
    },
    {
        "key": "ctrl+i",
        "when": "terminalChatAgentRegistered && terminalFocusInAny && terminalHasBeenCreated || terminalChatAgentRegistered && terminalFocusInAny && terminalProcessSupported",
        "command": "-workbench.action.terminal.chat.start"
    },
    {
        "key": "ctrl+alt+t",
        "when": "editorLangId =~ /(javascript|javascriptreact|typescript|typescriptreact|vue)/",
        "command": "-io.orta.jest.editor.run-all-tests"
    },
    {
        "key": "ctrl+b",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.editing.toggleBold"
    },
    {
        "key": "ctrl+i",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.editing.toggleItalic"
    },
    {
        "key": "ctrl+m",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.editing.toggleMath"
    },
    {
        "key": "alt+s",
        "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.editing.toggleStrikethrough"
    },
    {
        "key": "alt+c",
        "when": "editorTextFocus && editorLangId =~ /^markdown$|^rmd$|^quarto$/",
        "command": "-markdown.extension.checkTaskList"
    },
    {
        "key": "ctrl+pageup",
        "when": "accessibilityModeEnabled && notebookCellEditorFocused",
        "command": "-notebook.focusPreviousEditor"
    },
    {
        "key": "shift+alt+p",
        "when": "editorTextFocus && !openapiErrors",
        "command": "-openapi.preview"
    },
    {
        "key": "ctrl+pagedown",
        "when": "accessibilityModeEnabled && notebookCellEditorFocused",
        "command": "-notebook.focusNextEditor"
    },
    {
        "key": "alt+]",
        "when": "inlineEditsVisible && !editorReadonly",
        "command": "-editor.action.inlineEdits.showNext"
    },
    {
        "key": "alt+[",
        "when": "inlineEditsVisible && !editorReadonly",
        "command": "-editor.action.inlineEdits.showPrevious"
    },
    {
        "key": ";",
        "command": "-smartersemicolon.insert"
    },
    {
        "key": "ctrl+;",
        "command": "-smartersemicolon.toggle"
    },
    {
        "key": "ctrl+alt+p",
        "when": "resourceLangId == 'svg' || resourceLangId == 'xml'",
        "command": "-svgPreview.showPreviewToSide"
    },
    {
        "key": "ctrl+alt+enter",
        "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks",
        "command": "-workbench.action.terminal.chat.insertCommand"
    },
    {
        "key": "alt+enter",
        "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks",
        "command": "-workbench.action.terminal.chat.insertCommand"
    },
    {
        "key": "ctrl+alt+enter",
        "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest",
        "command": "-workbench.action.terminal.chat.insertFirstCommand"
    },
    {
        "key": "alt+enter",
        "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest",
        "command": "-workbench.action.terminal.chat.insertFirstCommand"
    },
    {
        "key": "enter",
        "when": "terminalChatFocus && terminalHasBeenCreated && !inlineChatEmpty && !terminalChatActiveRequest || terminalChatFocus && terminalProcessSupported && !inlineChatEmpty && !terminalChatActiveRequest",
        "command": "-workbench.action.terminal.chat.makeRequest"
    },
    {
        "key": "down",
        "when": "terminalChatFocus",
        "command": "-workbench.action.terminal.chat.nextFromHistory"
    },
    {
        "key": "up",
        "when": "terminalChatFocus",
        "command": "-workbench.action.terminal.chat.previousFromHistory"
    },
    {
        "key": "ctrl+enter",
        "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks",
        "command": "-workbench.action.terminal.chat.runCommand"
    },
    {
        "key": "ctrl+enter",
        "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest",
        "command": "-workbench.action.terminal.chat.runFirstCommand"
    },
    {
        "key": "ctrl+e",
        "when": "activeWebviewPanelId == 'tc.env-view' || activeWebviewPanelId == 'tc.request-view' || activeWebviewPanelId == 'tc.runcol-view'",
        "command": "-thunder-client.change-env"
    },
    {
        "key": "ctrl+u",
        "when": "activeWebviewPanelId == 'tc.env-view' || activeWebviewPanelId == 'tc.request-view'",
        "command": "-thunder-client.import-curl"
    },
    {
        "key": "ctrl+k ctrl+shift+l",
        "when": "editorTextFocus && foldingEnabled",
        "command": "-editor.toggleFoldRecursively"
    },
    {
        "key": "ctrl+shift+r",
        "command": "-workbench.view.extension.thunder-client"
    },
    {
        "key": "alt+a",
        "when": "cody.activated && cody.hasActionableEdit && !editorReadonly",
        "command": "-cody.fixup.acceptNearest"
    },
    {
        "key": "alt+z",
        "when": "cody.activated && cody.hasActionableEdit && !editorReadonly",
        "command": "-cody.fixup.cancelNearest"
    },
    {
        "key": "alt+r",
        "when": "cody.activated && cody.hasActionableEdit && !editorReadonly",
        "command": "-cody.fixup.retryNearest"
    },
    {
        "key": "alt+x",
        "when": "cody.activated && cody.hasActionableEdit && !editorReadonly",
        "command": "-cody.fixup.undoNearest"
    },
    {
        "key": "ctrl+shift+down",
        "when": "cody.activated && cody.hasActionableSupercompletion && !editorReadonly",
        "command": "-cody.supercompletion.jumpTo"
    },
    {
        "key": "ctrl+shift+up",
        "when": "cody.activated && cody.hasActionableSupercompletion && !editorReadonly",
        "command": "-cody.supercompletion.jumpTo"
    },
    {
        "key": "alt+l",
        "when": "cody.activated && cody.tutorialActive",
        "command": "-cody.tutorial.chat"
    },
    {
        "key": "alt+k",
        "when": "cody.activated && cody.tutorialActive && !editorReadonly",
        "command": "-cody.tutorial.edit"
    },
    {
        "key": "escape",
        "when": "inlineChatHasProvider && inlineChatVisible",
        "command": "-inlineChat.close"
    },
    {
        "key": "escape",
        "when": "inlineChatHasProvider && inlineChatVisible && inlineChatResponseType == 'messagesAndEdits'",
        "command": "-inlineChat.discardHunkChange"
    },
    {
        "key": "ctrl+r",
        "when": "inlineChatHasProvider && inlineChatVisible",
        "command": "-inlineChat.regenerate"
    },
    {
        "key": "ctrl+down",
        "when": "inlineChatHasProvider && inlineChatVisible",
        "command": "-inlineChat.viewInChat"
    },
    {
        "key": "ctrl+enter",
        "when": "activeEditor == 'workbench.editor.interactive'",
        "command": "-interactive.execute"
    },
    {
        "key": "down",
        "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.repl' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'",
        "command": "-interactive.history.next"
    },
    {
        "key": "up",
        "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.repl' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'",
        "command": "-interactive.history.previous"
    },
    {
        "key": "escape escape",
        "command": "-workbench.action.exitZenMode",
        "when": "inZenMode"
    },
    {
        "key": "shift+escape",
        "command": "-closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek"
    },
    {
        "key": "escape",
        "command": "-closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek"
    },
    {
        "key": "escape",
        "command": "-editor.closeTestPeek",
        "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek"
    },
    {
        "key": "shift+escape",
        "command": "-cancelSelection",
        "when": "editorHasSelection && textInputFocus"
    },
    {
        "key": "escape",
        "command": "-cancelSelection",
        "when": "editorHasSelection && textInputFocus"
    },
    {
        "key": "ctrl+end",
        "command": "-cursorBottom",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+end",
        "command": "-cursorBottomSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+down",
        "command": "-cursorColumnSelectDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+left",
        "command": "-cursorColumnSelectLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+pagedown",
        "command": "-cursorColumnSelectPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+pageup",
        "command": "-cursorColumnSelectPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+right",
        "command": "-cursorColumnSelectRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+up",
        "command": "-cursorColumnSelectUp",
        "when": "textInputFocus"
    },
    {
        "key": "down",
        "command": "-cursorDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+down",
        "command": "-cursorDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+down",
        "command": "-cursorDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "end",
        "command": "-cursorEnd",
        "when": "textInputFocus",
        "args": {
            "sticky": false
        }
    },
    {
        "key": "shift+end",
        "command": "-cursorEndSelect",
        "when": "textInputFocus",
        "args": {
            "sticky": false
        }
    },
    {
        "key": "home",
        "command": "-cursorHome",
        "when": "textInputFocus"
    },
    {
        "key": "shift+home",
        "command": "-cursorHomeSelect",
        "when": "textInputFocus"
    },
    {
        "key": "left",
        "command": "-cursorLeft",
        "when": "textInputFocus"
    },
    {
        "key": "shift+left",
        "command": "-cursorLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "pagedown",
        "command": "-cursorPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "shift+pagedown",
        "command": "-cursorPageDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "pageup",
        "command": "-cursorPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "shift+pageup",
        "command": "-cursorPageUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "right",
        "command": "-cursorRight",
        "when": "textInputFocus"
    },
    {
        "key": "shift+right",
        "command": "-cursorRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+home",
        "command": "-cursorTop",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+home",
        "command": "-cursorTopSelect",
        "when": "textInputFocus"
    },
    {
        "key": "up",
        "command": "-cursorUp",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+up",
        "command": "-cursorUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+up",
        "command": "-cursorUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+backspace",
        "command": "-deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "backspace",
        "command": "-deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "delete",
        "command": "-deleteRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+a",
        "command": "-editor.action.selectAll"
    },
    {
        "key": "ctrl+l",
        "command": "-expandLineSelection",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+down",
        "command": "-inlineChat.arrowOutDown",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorLast && !accessibilityModeEnabled && !isEmbeddedDiffEditor"
    },
    {
        "key": "ctrl+up",
        "command": "-inlineChat.arrowOutUp",
        "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorFirst && !accessibilityModeEnabled && !isEmbeddedDiffEditor"
    },
    {
        "key": "shift+tab",
        "command": "-outdent",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "ctrl+shift+z",
        "command": "-redo"
    },
    {
        "key": "ctrl+y",
        "command": "-redo"
    },
    {
        "key": "ctrl+down",
        "command": "-scrollLineDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+up",
        "command": "-scrollLineUp",
        "when": "textInputFocus"
    },
    {
        "key": "alt+pagedown",
        "command": "-scrollPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "alt+pageup",
        "command": "-scrollPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "tab",
        "command": "-tab",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "ctrl+z",
        "command": "-undo"
    },
    {
        "key": "shift+down",
        "command": "-cursorColumnSelectDown",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+left",
        "command": "-cursorColumnSelectLeft",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+pagedown",
        "command": "-cursorColumnSelectPageDown",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+pageup",
        "command": "-cursorColumnSelectPageUp",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+right",
        "command": "-cursorColumnSelectRight",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+up",
        "command": "-cursorColumnSelectUp",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+escape",
        "command": "-removeSecondaryCursors",
        "when": "editorHasMultipleSelections && textInputFocus"
    },
    {
        "key": "escape",
        "command": "-removeSecondaryCursors",
        "when": "editorHasMultipleSelections && textInputFocus"
    },
    {
        "key": "ctrl+down",
        "command": "-notebook.cell.chat.arrowOutDown",
        "when": "inlineChatFocused && inlineChatInnerCursorLast && notebookCellChatFocused && !accessibilityModeEnabled && !notebookCellEditorFocused"
    },
    {
        "key": "ctrl+up",
        "command": "-notebook.cell.chat.arrowOutUp",
        "when": "inlineChatFocused && inlineChatInnerCursorFirst && notebookCellChatFocused && !accessibilityModeEnabled && !notebookCellEditorFocused"
    },
    {
        "key": "ctrl+up",
        "command": "-notebook.cell.focusChatWidget",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
    },
    {
        "key": "ctrl+down",
        "command": "-notebook.cell.focusNextChatWidget",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
    },
    {
        "key": "ctrl+down",
        "command": "-inlineChat.focus",
        "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'above'"
    },
    {
        "key": "ctrl+up",
        "command": "-inlineChat.focus",
        "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'below'"
    },
    {
        "key": "escape",
        "command": "-notebook.cell.chat.acceptChanges",
        "when": "inlineChatFocused && notebookCellChatFocused && notebookChatUserDidEdit && !notebookCellEditorFocused"
    },
    {
        "key": "down",
        "command": "-notebook.cell.chat.nextFromHistory",
        "when": "inlineChatFocused && notebookCellChatFocused"
    },
    {
        "key": "up",
        "command": "-notebook.cell.chat.previousFromHistory",
        "when": "inlineChatFocused && notebookCellChatFocused"
    },
    {
        "key": "f12",
        "command": "-goToNextReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "f4",
        "command": "-goToNextReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "shift+f12",
        "command": "-goToPreviousReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "shift+f4",
        "command": "-goToPreviousReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "ctrl+enter",
        "command": "-refactorPreview.apply",
        "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'"
    },
    {
        "key": "alt+enter",
        "command": "-testing.editFocusedTest",
        "when": "focusedView == 'workbench.view.testing'"
    },
    {
        "key": "escape",
        "command": "-notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !inlineChatFocused"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && !inlineChatFocused && notebookCellType == 'markup'"
    },
    {
        "key": "escape",
        "command": "-inlineChat.discard",
        "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatUserDidEdit"
    },
    {
        "key": "ctrl+f",
        "command": "-actions.find",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "enter",
        "command": "-breakpointWidget.action.acceptInput",
        "when": "breakpointWidgetVisible && inBreakpointWidget"
    },
    {
        "key": "ctrl+up",
        "command": "-chat.action.focus",
        "when": "chatCursorAtTop && inChatInput && chatLocation == 'panel'"
    },
    {
        "key": "ctrl+up",
        "command": "-chat.action.focus",
        "when": "inChatInput && isLinux && chatLocation == 'panel' || inChatInput && isWindows && chatLocation == 'panel'"
    },
    {
        "key": "shift+escape",
        "command": "-closeBreakpointWidget",
        "when": "breakpointWidgetVisible && textInputFocus"
    },
    {
        "key": "escape",
        "command": "-closeBreakpointWidget",
        "when": "breakpointWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+u",
        "command": "-cursorUndo",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+right",
        "command": "-cursorWordEndRight",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+shift+right",
        "command": "-cursorWordEndRightSelect",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+left",
        "command": "-cursorWordLeft",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+shift+left",
        "command": "-cursorWordLeftSelect",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+backspace",
        "command": "-deleteWordLeft",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+delete",
        "command": "-deleteWordRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "f7",
        "command": "-editor.action.accessibleDiffViewer.next",
        "when": "isInDiffEditor"
    },
    {
        "key": "shift+f7",
        "command": "-editor.action.accessibleDiffViewer.prev",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "-editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+d",
        "command": "-editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+.",
        "command": "-editor.action.autoFix",
        "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
    },
    {
        "key": "shift+alt+a",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "escape",
        "command": "-editor.action.cancelSelectionAnchor",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "key": "ctrl+f2",
        "command": "-editor.action.changeAll",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+insert",
        "command": "-editor.action.clipboardCopyAction"
    },
    {
        "key": "ctrl+c",
        "command": "-editor.action.clipboardCopyAction"
    },
    {
        "key": "shift+delete",
        "command": "-editor.action.clipboardCutAction"
    },
    {
        "key": "ctrl+x",
        "command": "-editor.action.clipboardCutAction"
    },
    {
        "key": "shift+insert",
        "command": "-editor.action.clipboardPasteAction"
    },
    {
        "key": "ctrl+v",
        "command": "-editor.action.clipboardPasteAction"
    },
    {
        "key": "ctrl+/",
        "command": "-editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+down",
        "command": "-editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+up",
        "command": "-editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+k",
        "command": "-editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "alt+f3",
        "command": "-editor.action.dirtydiff.next",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "shift+alt+f3",
        "command": "-editor.action.dirtydiff.previous",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "enter",
        "command": "-editor.action.extensioneditor.findNext",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "shift+enter",
        "command": "-editor.action.extensioneditor.findPrevious",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "ctrl+f",
        "command": "-editor.action.extensioneditor.showfind",
        "when": "!editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "shift+alt+f",
        "command": "-editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
    },
    {
        "key": "shift+alt+f",
        "command": "-editor.action.formatDocument.none",
        "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+f",
        "command": "-editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+down",
        "command": "-editor.action.goToBottomHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "end",
        "command": "-editor.action.goToBottomHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "enter",
        "command": "-editor.action.goToFocusedStickyScrollLine",
        "when": "stickyScrollFocused"
    },
    {
        "key": "ctrl+f12",
        "command": "-editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus"
    },
    {
        "key": "shift+f12",
        "command": "-editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+up",
        "command": "-editor.action.goToTopHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "home",
        "command": "-editor.action.goToTopHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "escape",
        "command": "-editor.action.hideColorPicker",
        "when": "standaloneColorPickerVisible"
    },
    {
        "key": "ctrl+shift+.",
        "command": "-editor.action.inPlaceReplace.down",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+,",
        "command": "-editor.action.inPlaceReplace.up",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+]",
        "command": "-editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "escape",
        "command": "-editor.action.inlineEdit.reject",
        "when": "inlineEditVisible && !editorReadonly"
    },
    {
        "key": "escape",
        "command": "-editor.action.inlineEdits.hide",
        "when": "inlineEditsVisible"
    },
    {
        "key": "alt+]",
        "command": "-editor.action.inlineEdits.showNext",
        "when": "inlineEditsVisible && !editorReadonly"
    },
    {
        "key": "alt+[",
        "command": "-editor.action.inlineEdits.showPrevious",
        "when": "inlineEditsVisible && !editorReadonly"
    },
    {
        "key": "escape",
        "command": "-editor.action.inlineSuggest.hide",
        "when": "inlineSuggestionVisible"
    },
    {
        "key": "alt+]",
        "command": "-editor.action.inlineSuggest.showNext",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "alt+[",
        "command": "-editor.action.inlineSuggest.showPrevious",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "enter",
        "command": "-editor.action.insertColorWithStandaloneColorPicker",
        "when": "standaloneColorPickerFocused"
    },
    {
        "key": "ctrl+alt+up",
        "command": "-editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+i",
        "command": "-editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+down",
        "command": "-editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "-editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-editor.action.insertLineBefore",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+\\",
        "command": "-editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+f2",
        "command": "-editor.action.linkedEditing",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+f8",
        "command": "-editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "f8",
        "command": "-editor.action.marker.nextInFiles",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+f8",
        "command": "-editor.action.marker.prev",
        "when": "editorFocus"
    },
    {
        "key": "shift+f8",
        "command": "-editor.action.marker.prevInFiles",
        "when": "editorFocus"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+d",
        "command": "-editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "alt+f9",
        "command": "-editor.action.nextCommentThreadAction"
    },
    {
        "key": "ctrl+k ctrl+alt+down",
        "command": "-editor.action.nextCommentingRange",
        "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'"
    },
    {
        "key": "f3",
        "command": "-editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "enter",
        "command": "-editor.action.nextMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "ctrl+f3",
        "command": "-editor.action.nextSelectionMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+o",
        "command": "-editor.action.organizeImports",
        "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
    },
    {
        "key": "ctrl+[",
        "command": "-editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.pageDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "pagedown",
        "command": "-editor.action.pageDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.pageUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "pageup",
        "command": "-editor.action.pageUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "alt+f12",
        "command": "-editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+shift+f12",
        "command": "-editor.action.peekImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "shift+alt+f9",
        "command": "-editor.action.previousCommentThreadAction"
    },
    {
        "key": "ctrl+k ctrl+alt+up",
        "command": "-editor.action.previousCommentingRange",
        "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'"
    },
    {
        "key": "shift+f3",
        "command": "-editor.action.previousMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+enter",
        "command": "-editor.action.previousMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "ctrl+shift+f3",
        "command": "-editor.action.previousSelectionMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+.",
        "command": "-editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+r",
        "command": "-editor.action.refactor",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+backspace",
        "command": "-editor.action.removeBrackets",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k ctrl+u",
        "command": "-editor.action.removeCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "f2",
        "command": "-editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus"
    },
    {
        "key": "ctrl+f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && isWeb"
    },
    {
        "key": "ctrl+k f12",
        "command": "-editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+k ctrl+f12",
        "command": "-editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor"
    },
    {
        "key": "down",
        "command": "-editor.action.scrollDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "left",
        "command": "-editor.action.scrollLeftHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "right",
        "command": "-editor.action.scrollRightHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "up",
        "command": "-editor.action.scrollUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "escape",
        "command": "-editor.action.selectEditor",
        "when": "stickyScrollFocused"
    },
    {
        "key": "ctrl+k ctrl+k",
        "command": "-editor.action.selectFromAnchorToCursor",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "key": "ctrl+shift+l",
        "command": "-editor.action.selectHighlights",
        "when": "editorFocus"
    },
    {
        "key": "down",
        "command": "-editor.action.selectNextStickyScrollLine",
        "when": "stickyScrollFocused"
    },
    {
        "key": "up",
        "command": "-editor.action.selectPreviousStickyScrollLine",
        "when": "stickyScrollFocused"
    },
    {
        "key": "ctrl+k ctrl+b",
        "command": "-editor.action.setSelectionAnchor",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+f10",
        "command": "-editor.action.showContextMenu",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+right",
        "command": "-editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+left",
        "command": "-editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+h",
        "command": "-editor.action.startFindReplaceAction",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "ctrl+enter",
        "command": "-editor.action.submitComment",
        "when": "commentEditorFocused"
    },
    {
        "key": "ctrl+m",
        "command": "-editor.action.toggleTabFocusMode"
    },
    {
        "key": "alt+z",
        "command": "-editor.action.toggleWordWrap"
    },
    {
        "key": "ctrl+shift+space",
        "command": "-editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "ctrl+i",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+space",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+k ctrl+x",
        "command": "-editor.action.trimTrailingWhitespace",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "enter",
        "command": "-editor.action.webvieweditor.findNext",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "shift+enter",
        "command": "-editor.action.webvieweditor.findPrevious",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "escape",
        "command": "-editor.action.webvieweditor.hideFind",
        "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "ctrl+f",
        "command": "-editor.action.webvieweditor.showFind",
        "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "f7",
        "command": "-editor.action.wordHighlight.next",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "shift+f7",
        "command": "-editor.action.wordHighlight.prev",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "escape",
        "command": "-editor.cancelOperation",
        "when": "cancellableOperation"
    },
    {
        "key": "ctrl+.",
        "command": "-editor.changeDropType",
        "when": "dropWidgetVisible"
    },
    {
        "key": "ctrl+.",
        "command": "-editor.changePasteType",
        "when": "pasteWidgetVisible"
    },
    {
        "key": "ctrl+k ctrl+,",
        "command": "-editor.createFoldingRangeFromSelection",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "escape",
        "command": "-editor.debug.action.closeExceptionWidget",
        "when": "exceptionWidgetVisible"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "f9",
        "command": "-editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"
    },
    {
        "key": "tab",
        "command": "-editor.emmet.action.expandAbbreviation",
        "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "ctrl+shift+[",
        "command": "-editor.fold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+0",
        "command": "-editor.foldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+/",
        "command": "-editor.foldAllBlockComments",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+-",
        "command": "-editor.foldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+8",
        "command": "-editor.foldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+1",
        "command": "-editor.foldLevel1",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+2",
        "command": "-editor.foldLevel2",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+3",
        "command": "-editor.foldLevel3",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+4",
        "command": "-editor.foldLevel4",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+5",
        "command": "-editor.foldLevel5",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+6",
        "command": "-editor.foldLevel6",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+7",
        "command": "-editor.foldLevel7",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+[",
        "command": "-editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "f12",
        "command": "-editor.gotoNextSymbolFromResult",
        "when": "hasSymbols"
    },
    {
        "key": "escape",
        "command": "-editor.gotoNextSymbolFromResult.cancel",
        "when": "hasSymbols"
    },
    {
        "key": "escape",
        "command": "-editor.hideDropWidget",
        "when": "dropWidgetVisible"
    },
    {
        "key": "escape",
        "command": "-editor.hidePasteWidget",
        "when": "pasteWidgetVisible"
    },
    {
        "key": "ctrl+k ctrl+.",
        "command": "-editor.removeManualFoldingRanges",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+l",
        "command": "-editor.toggleFold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+shift+l",
        "command": "-editor.toggleFoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+shift+]",
        "command": "-editor.unfold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+j",
        "command": "-editor.unfoldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+=",
        "command": "-editor.unfoldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+9",
        "command": "-editor.unfoldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+]",
        "command": "-editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "escape",
        "command": "-inlayHints.stopReadingLineWithHint",
        "when": "isReadingLineWithInlayHints"
    },
    {
        "key": "tab",
        "command": "-insertSnippet",
        "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
    },
    {
        "key": "ctrl+enter",
        "command": "-interactive.execute",
        "when": "activeEditor == 'workbench.editor.interactive'"
    },
    {
        "key": "shift+enter",
        "command": "-interactive.execute",
        "when": "config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'"
    },
    {
        "key": "enter",
        "command": "-interactive.execute",
        "when": "!config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'"
    },
    {
        "key": "escape",
        "command": "-notebook.cell.chat.discard",
        "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused && !notebookChatUserDidEdit"
    },
    {
        "key": "pagedown",
        "command": "-notebook.cell.cursorPageDown",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused"
    },
    {
        "key": "shift+pagedown",
        "command": "-notebook.cell.cursorPageDownSelect",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputFocused"
    },
    {
        "key": "pageup",
        "command": "-notebook.cell.cursorPageUp",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused"
    },
    {
        "key": "shift+pageup",
        "command": "-notebook.cell.cursorPageUpSelect",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputFocused"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-notebook.cell.execute",
        "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || !notebookCellExecuting && notebookCellType == 'code' && notebookCellListFocused || inlineChatFocused && notebookCellChatFocused && notebookKernelCount > 0 || !notebookCellExecuting && notebookCellType == 'code' && notebookCellListFocused || inlineChatFocused && notebookCellChatFocused && notebookKernelSourceCount > 0 || inlineChatFocused && notebookCellChatFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code'"
    },
    {
        "key": "alt+enter",
        "command": "-notebook.cell.executeAndInsertBelow",
        "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "shift+enter",
        "command": "-notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && !inlineChatFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "ctrl+shift+v",
        "command": "-notebook.cell.pasteAbove",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "down",
        "command": "-notebook.focusNextEditor",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
    },
    {
        "key": "up",
        "command": "-notebook.focusPreviousEditor",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
    },
    {
        "key": "shift+alt+f",
        "command": "-notebook.formatCell",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+enter",
        "command": "-openReferenceToSide",
        "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused"
    },
    {
        "key": "enter",
        "command": "-repl.action.acceptInput",
        "when": "inDebugRepl && textInputFocus"
    },
    {
        "key": "ctrl+f",
        "command": "-repl.action.filter",
        "when": "inDebugRepl && textInputFocus"
    },
    {
        "key": "ctrl+shift+r",
        "command": "-rerunSearchEditorSearch",
        "when": "inSearchEditor"
    },
    {
        "key": "escape",
        "command": "-search.action.focusQueryEditorWidget",
        "when": "inSearchEditor"
    },
    {
        "key": "ctrl+shift+backspace",
        "command": "-search.searchEditor.action.deleteFileResults",
        "when": "inSearchEditor"
    },
    {
        "key": "escape",
        "command": "-settings.action.clearSearchResults",
        "when": "inSettingsEditor && inSettingsSearch"
    },
    {
        "key": "down",
        "command": "-settings.action.focusSettingsFile",
        "when": "inSettingsSearch && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+f",
        "command": "-settings.action.search",
        "when": "inSettingsEditor"
    },
    {
        "key": "ctrl+/",
        "command": "-toggleExplainMode",
        "when": "suggestWidgetVisible"
    },
    {
        "key": "ctrl+k f2",
        "command": "-togglePeekWidgetFocus",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "escape",
        "command": "-welcome.goBack",
        "when": "inWelcome && activeEditor == 'gettingStartedPage'"
    },
    {
        "key": "ctrl+k ctrl+alt+c",
        "command": "-workbench.action.addComment"
    },
    {
        "key": "ctrl+/",
        "command": "-workbench.action.chat.attachContext",
        "when": "inChatInput"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-workbench.action.chat.runInTerminal",
        "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat"
    },
    {
        "key": "enter",
        "command": "-workbench.action.chat.submit",
        "when": "chatInputHasText && inChatInput && !chatSessionRequestInProgress"
    },
    {
        "key": "ctrl+enter",
        "command": "-workbench.action.chat.submitSecondaryAgent",
        "when": "chatInputHasText && inChatInput && !chatInputHasAgent && !chatSessionRequestInProgress"
    },
    {
        "key": "alt+f5",
        "command": "-workbench.action.editor.nextChange",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "shift+alt+f5",
        "command": "-workbench.action.editor.previousChange",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "shift+escape",
        "command": "-workbench.action.hideComment",
        "when": "commentEditorFocused"
    },
    {
        "key": "escape",
        "command": "-workbench.action.hideComment",
        "when": "commentEditorFocused"
    },
    {
        "key": "tab",
        "command": "-editor.action.inlineEdit.accept",
        "when": "cursorAtInlineEdit && inlineEditVisible && !editorReadonly"
    },
    {
        "key": "ctrl+alt+=",
        "command": "-editor.action.inlineEdit.jumpTo",
        "when": "inlineEditVisible && !cursorAtInlineEdit && !editorReadonly"
    },
    {
        "key": "ctrl+alt+=",
        "command": "-editor.action.inlineEdit.trigger",
        "when": "!editorReadonly && !inlineEditVisible"
    },
    {
        "key": "ctrl+right",
        "command": "-editor.action.inlineSuggest.acceptNextWord",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "alt+f8",
        "command": "-testing.goToNextMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "shift+alt+f8",
        "command": "-testing.goToPreviousMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "shift+escape",
        "command": "-closeFindWidget",
        "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
        "key": "escape",
        "command": "-closeFindWidget",
        "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-editor.action.replaceAll",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "ctrl+shift+1",
        "command": "-editor.action.replaceOne",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "enter",
        "command": "-editor.action.replaceOne",
        "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
    },
    {
        "key": "alt+enter",
        "command": "-editor.action.selectAllMatches",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "alt+c",
        "command": "-toggleFindCaseSensitive",
        "when": "editorFocus"
    },
    {
        "key": "alt+l",
        "command": "-toggleFindInSelection",
        "when": "editorFocus"
    },
    {
        "key": "alt+r",
        "command": "-toggleFindRegex",
        "when": "editorFocus"
    },
    {
        "key": "alt+w",
        "command": "-toggleFindWholeWord",
        "when": "editorFocus"
    },
    {
        "key": "alt+p",
        "command": "-togglePreserveCase",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+alt+=",
        "command": "-editor.action.inlineEdit.jumpBack",
        "when": "cursorAtInlineEdit && !editorReadonly"
    },
    {
        "key": "ctrl+enter",
        "command": "-notebook.cell.chat.acceptChanges",
        "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused"
    },
    {
        "key": "tab",
        "command": "-jumpToNextSnippetPlaceholder",
        "when": "hasNextTabstop && inSnippetMode && textInputFocus"
    },
    {
        "key": "shift+tab",
        "command": "-jumpToPrevSnippetPlaceholder",
        "when": "hasPrevTabstop && inSnippetMode && textInputFocus"
    },
    {
        "key": "escape",
        "command": "-leaveEditorMessage",
        "when": "messageVisible"
    },
    {
        "key": "shift+escape",
        "command": "-leaveSnippet",
        "when": "inSnippetMode && textInputFocus"
    },
    {
        "key": "escape",
        "command": "-leaveSnippet",
        "when": "inSnippetMode && textInputFocus"
    },
    {
        "key": "shift+escape",
        "command": "-closeDirtyDiff",
        "when": "dirtyDiffVisible"
    },
    {
        "key": "escape",
        "command": "-closeDirtyDiff",
        "when": "dirtyDiffVisible"
    },
    {
        "key": "shift+escape",
        "command": "-closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible"
    },
    {
        "key": "escape",
        "command": "-closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible"
    },
    {
        "key": "escape",
        "command": "-notifications.hideToasts",
        "when": "notificationToastsVisible"
    },
    {
        "key": "shift+escape",
        "command": "-closeParameterHints",
        "when": "editorFocus && parameterHintsVisible"
    },
    {
        "key": "escape",
        "command": "-closeParameterHints",
        "when": "editorFocus && parameterHintsVisible"
    },
    {
        "key": "alt+down",
        "command": "-showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "down",
        "command": "-showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+up",
        "command": "-showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "up",
        "command": "-showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "shift+tab",
        "command": "-acceptAlternativeSelectedSuggestion",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "shift+enter",
        "command": "-acceptAlternativeSelectedSuggestion",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "tab",
        "command": "-acceptSelectedSuggestion",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "enter",
        "command": "-acceptSelectedSuggestion",
        "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
    },
    {
        "key": "ctrl+i",
        "command": "-focusSuggestion",
        "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "ctrl+space",
        "command": "-focusSuggestion",
        "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "shift+escape",
        "command": "-hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "escape",
        "command": "-hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "tab",
        "command": "-insertBestCompletion",
        "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "tab",
        "command": "-insertNextSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "shift+tab",
        "command": "-insertPrevSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-selectNextPageSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "pagedown",
        "command": "-selectNextPageSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "ctrl+down",
        "command": "-selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "down",
        "command": "-selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "ctrl+pageup",
        "command": "-selectPrevPageSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "pageup",
        "command": "-selectPrevPageSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "ctrl+up",
        "command": "-selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "up",
        "command": "-selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "ctrl+i",
        "command": "-toggleSuggestionDetails",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+space",
        "command": "-toggleSuggestionDetails",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+alt+space",
        "command": "-toggleSuggestionFocus",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "enter",
        "command": "-acceptRenameInput",
        "when": "editorFocus && renameInputVisible && !isComposing"
    },
    {
        "key": "ctrl+enter",
        "command": "-acceptRenameInputWithPreview",
        "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible && !isComposing"
    },
    {
        "key": "shift+escape",
        "command": "-cancelLinkedEditingInput",
        "when": "LinkedEditingInputVisible && editorTextFocus"
    },
    {
        "key": "escape",
        "command": "-cancelLinkedEditingInput",
        "when": "LinkedEditingInputVisible && editorTextFocus"
    },
    {
        "key": "shift+escape",
        "command": "-cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "escape",
        "command": "-cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "down",
        "command": "-focusNextRenameSuggestion",
        "when": "renameInputVisible"
    },
    {
        "key": "up",
        "command": "-focusPreviousRenameSuggestion",
        "when": "renameInputVisible"
    },
    {
        "key": "ctrl+shift+l",
        "command": "-addCursorsAtSearchResults",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+shift+;",
        "command": "-breadcrumbs.focus",
        "when": "breadcrumbsPossible && breadcrumbsVisible"
    },
    {
        "key": "ctrl+shift+.",
        "command": "-breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible && breadcrumbsVisible"
    },
    {
        "key": "ctrl+right",
        "command": "-breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "right",
        "command": "-breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+left",
        "command": "-breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "left",
        "command": "-breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+enter",
        "command": "-breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "space",
        "command": "-breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+enter",
        "command": "-breadcrumbs.revealFocusedFromTreeAside",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "down",
        "command": "-breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "enter",
        "command": "-breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+shift+.",
        "command": "-breadcrumbs.toggleToOn",
        "when": "!config.breadcrumbs.enabled"
    },
    {
        "key": "escape",
        "command": "-closeReplaceInFilesWidget",
        "when": "replaceInputBoxFocus && searchViewletVisible"
    },
    {
        "key": "escape",
        "command": "-commentsClearFilterText",
        "when": "commentsFilterFocus"
    },
    {
        "key": "ctrl+f",
        "command": "-commentsFocusFilter",
        "when": "focusedView == 'workbench.panel.comments'"
    },
    {
        "key": "ctrl+down",
        "command": "-commentsFocusViewFromFilter",
        "when": "commentsFilterFocus"
    },
    {
        "key": "shift+alt+c",
        "command": "-copyFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "shift+alt+c",
        "command": "-copyFilePath",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+k ctrl+shift+c",
        "command": "-copyRelativeFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+k ctrl+shift+c",
        "command": "-copyRelativeFilePath",
        "when": "editorFocus"
    },
    {
        "key": "alt+enter",
        "command": "-debug.openBreakpointToSide",
        "when": "breakpointsFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "-debug.openBreakpointToSide",
        "when": "breakpointsFocused"
    },
    {
        "key": "ctrl+f5",
        "command": "-debug.openView",
        "when": "!debuggersAvailable"
    },
    {
        "key": "f5",
        "command": "-debug.openView",
        "when": "!debuggersAvailable"
    },
    {
        "key": "delete",
        "command": "-debug.removeBreakpoint",
        "when": "breakpointsFocused && !breakpointInputFocused"
    },
    {
        "key": "delete",
        "command": "-debug.removeWatchExpression",
        "when": "watchExpressionsFocused && !expressionSelected"
    },
    {
        "key": "alt+-",
        "command": "-decreaseSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "alt+f1",
        "command": "-editor.action.accessibilityHelp",
        "when": "!accessibilityHelpIsShown"
    },
    {
        "key": "alt+k",
        "command": "-editor.action.accessibilityHelpConfigureKeybindings",
        "when": "accessibilityHelpIsShown"
    },
    {
        "key": "alt+h",
        "command": "-editor.action.accessibilityHelpOpenHelpLink",
        "when": "accessibilityHelpIsShown"
    },
    {
        "key": "alt+f2",
        "command": "-editor.action.accessibleView"
    },
    {
        "key": "ctrl+/",
        "command": "-editor.action.accessibleViewAcceptInlineCompletion",
        "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'inlineCompletions'"
    },
    {
        "key": "alt+f6",
        "command": "-editor.action.accessibleViewDisableHint",
        "when": "accessibilityHelpIsShown && accessibleViewVerbosityEnabled || accessibleViewIsShown && accessibleViewVerbosityEnabled"
    },
    {
        "key": "alt+]",
        "command": "-editor.action.accessibleViewNext",
        "when": "accessibleViewIsShown && accessibleViewSupportsNavigation"
    },
    {
        "key": "ctrl+alt+pagedown",
        "command": "-editor.action.accessibleViewNextCodeBlock",
        "when": "accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'panelChat'"
    },
    {
        "key": "alt+[",
        "command": "-editor.action.accessibleViewPrevious",
        "when": "accessibleViewIsShown && accessibleViewSupportsNavigation"
    },
    {
        "key": "ctrl+alt+pageup",
        "command": "-editor.action.accessibleViewPreviousCodeBlock",
        "when": "accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'panelChat'"
    },
    {
        "key": "ctrl+k ctrl+k",
        "command": "-editor.action.defineKeybinding",
        "when": "resource == 'vscode-userdata:/d%3A/a/vs-code-default-keybindings/vs-code-default-keybindings/scripts/get_default_keybindings/empty2/User/keybindings.json'"
    },
    {
        "key": "tab",
        "command": "-editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
    },
    {
        "key": "shift+f9",
        "command": "-editor.debug.action.toggleInlineBreakpoint",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+d",
        "command": "-editor.detectLanguage",
        "when": "editorTextFocus && !notebookEditable"
    },
    {
        "key": "shift+enter",
        "command": "-editor.refocusCallHierarchy",
        "when": "callHierarchyVisible"
    },
    {
        "key": "shift+enter",
        "command": "-editor.refocusTypeHierarchy",
        "when": "typeHierarchyVisible"
    },
    {
        "key": "shift+alt+h",
        "command": "-editor.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor"
    },
    {
        "key": "shift+alt+h",
        "command": "-editor.showIncomingCalls",
        "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'"
    },
    {
        "key": "shift+alt+h",
        "command": "-editor.showOutgoingCalls",
        "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'"
    },
    {
        "key": "shift+alt+h",
        "command": "-editor.showSubtypes",
        "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'"
    },
    {
        "key": "shift+alt+h",
        "command": "-editor.showSupertypes",
        "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'"
    },
    {
        "key": "ctrl+enter",
        "command": "-explorer.openToSide",
        "when": "explorerViewletFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "shift+alt+f",
        "command": "-filesExplorer.findInFolder",
        "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "alt+down",
        "command": "-history.showNext",
        "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
    },
    {
        "key": "down",
        "command": "-history.showNext",
        "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
    },
    {
        "key": "alt+up",
        "command": "-history.showPrevious",
        "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
    },
    {
        "key": "up",
        "command": "-history.showPrevious",
        "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
    },
    {
        "key": "down",
        "command": "-iconSelectBox.focusDown",
        "when": "iconSelectBoxFocus"
    },
    {
        "key": "right",
        "command": "-iconSelectBox.focusNext",
        "when": "iconSelectBoxFocus && iconSelectBoxInputEmpty || iconSelectBoxFocus && !iconSelectBoxInputFocus"
    },
    {
        "key": "left",
        "command": "-iconSelectBox.focusPrevious",
        "when": "iconSelectBoxFocus && iconSelectBoxInputEmpty || iconSelectBoxFocus && !iconSelectBoxInputFocus"
    },
    {
        "key": "up",
        "command": "-iconSelectBox.focusUp",
        "when": "iconSelectBoxFocus"
    },
    {
        "key": "enter",
        "command": "-iconSelectBox.selectFocused",
        "when": "iconSelectBoxFocus"
    },
    {
        "key": "alt+=",
        "command": "-increaseSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "escape",
        "command": "-inlineChat.close",
        "when": "inlineChatHasProvider && inlineChatVisible"
    },
    {
        "key": "escape",
        "command": "-inlineChat.discardHunkChange",
        "when": "inlineChatHasProvider && inlineChatVisible && inlineChatResponseType == 'messagesAndEdits'"
    },
    {
        "key": "ctrl+i",
        "command": "-inlineChat.holdForSpeech",
        "when": "hasSpeechProvider && inlineChatHasProvider && inlineChatVisible && textInputFocus"
    },
    {
        "key": "f7",
        "command": "-inlineChat.moveToNextHunk",
        "when": "inlineChatHasProvider && inlineChatVisible"
    },
    {
        "key": "shift+f7",
        "command": "-inlineChat.moveToPreviousHunk",
        "when": "inlineChatHasProvider && inlineChatVisible"
    },
    {
        "key": "ctrl+r",
        "command": "-inlineChat.regenerate",
        "when": "inlineChatHasProvider && inlineChatVisible"
    },
    {
        "key": "ctrl+k i",
        "command": "-inlineChat.start",
        "when": "editorFocus && inlineChatHasProvider && !editorReadonly"
    },
    {
        "key": "ctrl+i",
        "command": "-inlineChat.start",
        "when": "editorFocus && inlineChatHasProvider && !editorReadonly"
    },
    {
        "key": "ctrl+z",
        "command": "-inlineChat.unstash",
        "when": "inlineChatHasStashedSession && !editorReadonly"
    },
    {
        "key": "ctrl+down",
        "command": "-inlineChat.viewInChat",
        "when": "inlineChatHasProvider && inlineChatVisible"
    },
    {
        "key": "down",
        "command": "-interactive.history.next",
        "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'"
    },
    {
        "key": "down",
        "command": "-interactive.history.next",
        "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.repl' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'"
    },
    {
        "key": "up",
        "command": "-interactive.history.previous",
        "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
    },
    {
        "key": "up",
        "command": "-interactive.history.previous",
        "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.repl' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
    },
    {
        "key": "ctrl+end",
        "command": "-interactive.scrollToBottom",
        "when": "activeEditor == 'workbench.editor.interactive'"
    },
    {
        "key": "ctrl+home",
        "command": "-interactive.scrollToTop",
        "when": "activeEditor == 'workbench.editor.interactive'"
    },
    {
        "key": "enter",
        "command": "-keybindings.editor.acceptWhenExpression",
        "when": "inKeybindings && whenFocus && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+k ctrl+a",
        "command": "-keybindings.editor.addKeybinding",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "escape",
        "command": "-keybindings.editor.clearSearchResults",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "ctrl+c",
        "command": "-keybindings.editor.copyKeybindingEntry",
        "when": "inKeybindings && keybindingFocus && !whenFocus"
    },
    {
        "key": "enter",
        "command": "-keybindings.editor.defineKeybinding",
        "when": "inKeybindings && keybindingFocus && !whenFocus"
    },
    {
        "key": "ctrl+k ctrl+e",
        "command": "-keybindings.editor.defineWhenExpression",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+down",
        "command": "-keybindings.editor.focusKeybindings",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "alt+k",
        "command": "-keybindings.editor.recordSearchKeys",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "escape",
        "command": "-keybindings.editor.rejectWhenExpression",
        "when": "inKeybindings && whenFocus && !suggestWidgetVisible"
    },
    {
        "key": "delete",
        "command": "-keybindings.editor.removeKeybinding",
        "when": "inKeybindings && keybindingFocus && !inputFocus"
    },
    {
        "key": "ctrl+f",
        "command": "-keybindings.editor.searchKeybindings",
        "when": "inKeybindings"
    },
    {
        "key": "alt+p",
        "command": "-keybindings.editor.toggleSortByPrecedence",
        "when": "inKeybindings"
    },
    {
        "key": "escape",
        "command": "-list.clear",
        "when": "listFocus && listHasSelectionOrFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "escape",
        "command": "-list.closeFind",
        "when": "listFocus && treeFindOpen"
    },
    {
        "key": "left",
        "command": "-list.collapse",
        "when": "listFocus && treeElementCanCollapse && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasParent && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+left",
        "command": "-list.collapseAll",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "right",
        "command": "-list.expand",
        "when": "listFocus && treeElementCanExpand && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasChild && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "shift+down",
        "command": "-list.expandSelectionDown",
        "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "shift+up",
        "command": "-list.expandSelectionUp",
        "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "f3",
        "command": "-list.find",
        "when": "listFocus && listSupportsFind"
    },
    {
        "key": "ctrl+alt+f",
        "command": "-list.find",
        "when": "listFocus && listSupportsFind"
    },
    {
        "key": "alt+down",
        "command": "-list.focusAnyDown",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "alt+home",
        "command": "-list.focusAnyFirst",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "alt+end",
        "command": "-list.focusAnyLast",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "alt+up",
        "command": "-list.focusAnyUp",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "down",
        "command": "-list.focusDown",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "home",
        "command": "-list.focusFirst",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "end",
        "command": "-list.focusLast",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "pagedown",
        "command": "-list.focusPageDown",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "pageup",
        "command": "-list.focusPageUp",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "up",
        "command": "-list.focusUp",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+down",
        "command": "-list.scrollDown",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'bottom'"
    },
    {
        "key": "ctrl+up",
        "command": "-list.scrollUp",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'top'"
    },
    {
        "key": "enter",
        "command": "-list.select",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+a",
        "command": "-list.selectAll",
        "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-list.showHover",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "space",
        "command": "-list.toggleExpand",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-list.toggleSelection",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "y",
        "command": "-notebook.cell.changeToCode",
        "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'"
    },
    {
        "key": "m",
        "command": "-notebook.cell.changeToMarkdown",
        "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'"
    },
    {
        "key": "enter",
        "command": "-notebook.cell.chat.accept",
        "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "-notebook.cell.chat.acceptChanges",
        "when": "notebookEditorFocused && !inputFocus && !notebookCellEditorFocused && notebookChatOuterFocusPosition == 'below'"
    },
    {
        "key": "ctrl+down",
        "command": "-notebook.cell.chat.focus",
        "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == 'above'"
    },
    {
        "key": "ctrl+up",
        "command": "-notebook.cell.chat.focus",
        "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == 'below'"
    },
    {
        "key": "ctrl+down",
        "command": "-notebook.cell.chat.focusNextCell",
        "when": "inlineChatFocused && notebookCellChatFocused"
    },
    {
        "key": "ctrl+up",
        "command": "-notebook.cell.chat.focusPreviousCell",
        "when": "inlineChatFocused && notebookCellChatFocused"
    },
    {
        "key": "ctrl+k i",
        "command": "-notebook.cell.chat.start",
        "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+i",
        "command": "-notebook.cell.chat.start",
        "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+delete",
        "command": "-notebook.cell.clearOutputs",
        "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "-notebook.cell.collapseCellInput",
        "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
    },
    {
        "key": "ctrl+k t",
        "command": "-notebook.cell.collapseCellOutput",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
    },
    {
        "key": "shift+alt+down",
        "command": "-notebook.cell.copyDown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "shift+alt+up",
        "command": "-notebook.cell.copyUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "delete",
        "command": "-notebook.cell.delete",
        "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
    },
    {
        "key": "shift+alt+d",
        "command": "-notebook.cell.detectLanguage",
        "when": "notebookCellEditable && notebookEditable"
    },
    {
        "key": "enter",
        "command": "-notebook.cell.edit",
        "when": "notebookCellListFocused && notebookEditable && !editorHoverFocused && !inputFocus && !notebookOutputInputFocused"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "-notebook.cell.expandCellInput",
        "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
    },
    {
        "key": "ctrl+k t",
        "command": "-notebook.cell.expandCellOutput",
        "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
    },
    {
        "key": "ctrl+down",
        "command": "-notebook.cell.focusInOutput",
        "when": "notebookCellHasOutputs && notebookEditorFocused"
    },
    {
        "key": "ctrl+up",
        "command": "-notebook.cell.focusOutOutput",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-notebook.cell.insertCodeCellAbove",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "-notebook.cell.insertCodeCellBelow",
        "when": "notebookCellListFocused && !inputFocus && notebookChatOuterFocusPosition == ''"
    },
    {
        "key": "shift+alt+win+j",
        "command": "-notebook.cell.joinAbove",
        "when": "notebookEditorFocused"
    },
    {
        "key": "alt+win+j",
        "command": "-notebook.cell.joinBelow",
        "when": "notebookEditorFocused"
    },
    {
        "key": "alt+down",
        "command": "-notebook.cell.moveDown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+up",
        "command": "-notebook.cell.moveUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+.",
        "command": "-notebook.cell.openFailureActions",
        "when": "notebookCellFocused && notebookCellHasErrorDiagnostics && !notebookCellEditorFocused"
    },
    {
        "key": "ctrl+k ctrl+shift+\\",
        "command": "-notebook.cell.split",
        "when": "editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused"
    },
    {
        "key": "ctrl+k y",
        "command": "-notebook.cell.toggleOutputScrolling",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus"
    },
    {
        "key": "ctrl+l",
        "command": "-notebook.centerActiveCell",
        "when": "notebookEditorFocused"
    },
    {
        "key": "alt+f3",
        "command": "-notebook.diff.action.next",
        "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'"
    },
    {
        "key": "shift+alt+f3",
        "command": "-notebook.diff.action.previous",
        "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'"
    },
    {
        "key": "ctrl+f",
        "command": "-notebook.find",
        "when": "notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.interactive' || notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+end",
        "command": "-notebook.focusBottom",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "down",
        "command": "-notebook.focusNextEditor",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'"
    },
    {
        "key": "ctrl+down",
        "command": "-notebook.focusNextEditor",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "up",
        "command": "-notebook.focusPreviousEditor",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'"
    },
    {
        "key": "ctrl+home",
        "command": "-notebook.focusTop",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "left",
        "command": "-notebook.fold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+shift+[",
        "command": "-notebook.fold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "shift+alt+f",
        "command": "-notebook.format",
        "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "escape",
        "command": "-notebook.hideFind",
        "when": "notebookEditorFocused && notebookFindWidgetFocused"
    },
    {
        "key": "right",
        "command": "-notebook.unfold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+shift+]",
        "command": "-notebook.unfold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+shift+a",
        "command": "-notification.acceptPrimaryAction",
        "when": "notificationFocus || notificationToastsVisible"
    },
    {
        "key": "delete",
        "command": "-notification.clear",
        "when": "notificationFocus"
    },
    {
        "key": "left",
        "command": "-notification.collapse",
        "when": "notificationFocus"
    },
    {
        "key": "right",
        "command": "-notification.expand",
        "when": "notificationFocus"
    },
    {
        "key": "enter",
        "command": "-notification.toggle",
        "when": "notificationFocus"
    },
    {
        "key": "space",
        "command": "-notification.toggle",
        "when": "notificationFocus"
    },
    {
        "key": "home",
        "command": "-notifications.focusFirstToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "pageup",
        "command": "-notifications.focusFirstToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "end",
        "command": "-notifications.focusLastToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "pagedown",
        "command": "-notifications.focusLastToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "down",
        "command": "-notifications.focusNextToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "up",
        "command": "-notifications.focusPreviousToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "ctrl+k ctrl+shift+n",
        "command": "-notifications.showList"
    },
    {
        "key": "escape",
        "command": "-problems.action.clearFilterText",
        "when": "problemsFilterFocus"
    },
    {
        "key": "ctrl+c",
        "command": "-problems.action.copy",
        "when": "problemsVisibility && !relatedInformationFocus && focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "ctrl+f",
        "command": "-problems.action.focusFilter",
        "when": "focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "ctrl+down",
        "command": "-problems.action.focusProblemsFromFilter",
        "when": "problemsFilterFocus"
    },
    {
        "key": "enter",
        "command": "-problems.action.open",
        "when": "problemFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "-problems.action.openToSide",
        "when": "problemFocus"
    },
    {
        "key": "ctrl+.",
        "command": "-problems.action.showQuickFixes",
        "when": "problemFocus"
    },
    {
        "key": "ctrl+alt+home",
        "command": "-quickInput.first",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+home",
        "command": "-quickInput.first",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+alt+end",
        "command": "-quickInput.last",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+end",
        "command": "-quickInput.last",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+down",
        "command": "-quickInput.next",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "down",
        "command": "-quickInput.next",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+alt+down",
        "command": "-quickInput.nextSeparator",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "alt+down",
        "command": "-quickInput.nextSeparatorWithQuickAccessFallback",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+alt+pagedown",
        "command": "-quickInput.pageNext",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-quickInput.pageNext",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "alt+pagedown",
        "command": "-quickInput.pageNext",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "pagedown",
        "command": "-quickInput.pageNext",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+alt+pageup",
        "command": "-quickInput.pagePrevious",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+pageup",
        "command": "-quickInput.pagePrevious",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "alt+pageup",
        "command": "-quickInput.pagePrevious",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "pageup",
        "command": "-quickInput.pagePrevious",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+up",
        "command": "-quickInput.previous",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "up",
        "command": "-quickInput.previous",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+alt+up",
        "command": "-quickInput.previousSeparator",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "alt+up",
        "command": "-quickInput.previousSeparatorWithQuickAccessFallback",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "space",
        "command": "-refactorPreview.toggleCheckedState",
        "when": "listFocus && refactorPreview.enabled && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "shift+alt+r",
        "command": "-revealFileInOS",
        "when": "!editorFocus"
    },
    {
        "key": "enter",
        "command": "-revealReference",
        "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+k s",
        "command": "-saveAll"
    },
    {
        "key": "ctrl+enter",
        "command": "-scm.acceptInput",
        "when": "scmRepository"
    },
    {
        "key": "escape",
        "command": "-scm.clearInput",
        "when": "scmRepository && !suggestWidgetVisible"
    },
    {
        "key": "alt+down",
        "command": "-scm.forceViewNextCommit",
        "when": "scmRepository"
    },
    {
        "key": "alt+up",
        "command": "-scm.forceViewPreviousCommit",
        "when": "scmRepository"
    },
    {
        "key": "down",
        "command": "-scm.viewNextCommit",
        "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible"
    },
    {
        "key": "up",
        "command": "-scm.viewPreviousCommit",
        "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible"
    },
    {
        "key": "escape",
        "command": "-search.action.cancel",
        "when": "listFocus && searchViewletVisible && !inputFocus && !treestickyScrollFocused && searchState != '0'"
    },
    {
        "key": "ctrl+c",
        "command": "-search.action.copyMatch",
        "when": "fileMatchOrMatchFocus"
    },
    {
        "key": "shift+alt+c",
        "command": "-search.action.copyPath",
        "when": "fileMatchOrFolderMatchWithResourceFocus"
    },
    {
        "key": "f4",
        "command": "-search.action.focusNextSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "shift+f4",
        "command": "-search.action.focusPreviousSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "ctrl+up",
        "command": "-search.action.focusSearchFromResults",
        "when": "accessibilityModeEnabled && searchViewletVisible || firstMatchFocus && searchViewletVisible"
    },
    {
        "key": "alt+enter",
        "command": "-search.action.openInEditor",
        "when": "hasSearchResult && searchViewletFocus"
    },
    {
        "key": "enter",
        "command": "-search.action.openResult",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+enter",
        "command": "-search.action.openResultToSide",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "delete",
        "command": "-search.action.remove",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+shift+1",
        "command": "-search.action.replace",
        "when": "isEditableItem && matchFocus && replaceActive && searchViewletVisible"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-search.action.replaceAll",
        "when": "replaceActive && searchViewletVisible && !findWidgetVisible"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-search.action.replaceAllInFile",
        "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
    },
    {
        "key": "ctrl+shift+1",
        "command": "-search.action.replaceAllInFile",
        "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-search.action.replaceAllInFolder",
        "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
    },
    {
        "key": "ctrl+shift+1",
        "command": "-search.action.replaceAllInFolder",
        "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
    },
    {
        "key": "shift+alt+f",
        "command": "-search.action.restrictSearchToFolder",
        "when": "folderMatchWithResourceFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+down",
        "command": "-search.focus.nextInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+up",
        "command": "-search.focus.previousInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
    },
    {
        "key": "ctrl+shift+l",
        "command": "-selectAllSearchEditorMatches",
        "when": "inSearchEditor"
    },
    {
        "key": "escape",
        "command": "-settings.action.focusLevelUp",
        "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch"
    },
    {
        "key": "enter",
        "command": "-settings.action.focusSettingControl",
        "when": "inSettingsEditor && settingRowFocus"
    },
    {
        "key": "down",
        "command": "-settings.action.focusSettingsFromSearch",
        "when": "inSettingsSearch && !suggestWidgetVisible"
    },
    {
        "key": "enter",
        "command": "-settings.action.focusSettingsList",
        "when": "inSettingsEditor && settingsTocRowFocus"
    },
    {
        "key": "left",
        "command": "-settings.action.focusTOC",
        "when": "inSettingsEditor && settingRowFocus"
    },
    {
        "key": "shift+f9",
        "command": "-settings.action.showContextMenu",
        "when": "inSettingsEditor"
    },
    {
        "key": "ctrl+; ctrl+x",
        "command": "-testing.cancelRun"
    },
    {
        "key": "ctrl+; ctrl+shift+a",
        "command": "-testing.coverageAll"
    },
    {
        "key": "ctrl+; ctrl+shift+c",
        "command": "-testing.coverageAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; ctrl+shift+f",
        "command": "-testing.coverageCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; ctrl+shift+l",
        "command": "-testing.coverageLastRun"
    },
    {
        "key": "ctrl+; ctrl+a",
        "command": "-testing.debugAll"
    },
    {
        "key": "ctrl+; ctrl+c",
        "command": "-testing.debugAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; ctrl+f",
        "command": "-testing.debugCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; ctrl+e",
        "command": "-testing.debugFailTests"
    },
    {
        "key": "ctrl+; ctrl+l",
        "command": "-testing.debugLastRun"
    },
    {
        "key": "ctrl+; ctrl+m",
        "command": "-testing.openOutputPeek"
    },
    {
        "key": "ctrl+; e",
        "command": "-testing.reRunFailTests"
    },
    {
        "key": "ctrl+; l",
        "command": "-testing.reRunLastRun"
    },
    {
        "key": "ctrl+; ctrl+r",
        "command": "-testing.refreshTests",
        "when": "testing.canRefresh"
    },
    {
        "key": "ctrl+; a",
        "command": "-testing.runAll"
    },
    {
        "key": "ctrl+; c",
        "command": "-testing.runAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; f",
        "command": "-testing.runCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; ctrl+o",
        "command": "-testing.showMostRecentOutput",
        "when": "testing.hasAnyResults"
    },
    {
        "key": "ctrl+; ctrl+shift+i",
        "command": "-testing.toggleInlineCoverage"
    },
    {
        "key": "ctrl+; ctrl+i",
        "command": "-testing.toggleInlineTestOutput"
    },
    {
        "key": "alt+h",
        "command": "-testing.toggleTestingPeekHistory",
        "when": "testing.isPeekVisible"
    },
    {
        "key": "alt+c",
        "command": "-toggleSearchCaseSensitive",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+c",
        "command": "-toggleSearchEditorCaseSensitive",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+l",
        "command": "-toggleSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "alt+r",
        "command": "-toggleSearchEditorRegex",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+w",
        "command": "-toggleSearchEditorWholeWord",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+p",
        "command": "-toggleSearchPreserveCase",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+r",
        "command": "-toggleSearchRegex",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+w",
        "command": "-toggleSearchWholeWord",
        "when": "searchViewletFocus"
    },
    {
        "key": "ctrl+alt+win+n",
        "command": "-welcome.showNewFileEntries"
    },
    {
        "key": "ctrl+down",
        "command": "-widgetNavigation.focusNext",
        "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'bottom'"
    },
    {
        "key": "ctrl+up",
        "command": "-widgetNavigation.focusPrevious",
        "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'top'"
    },
    {
        "key": "alt+backspace",
        "command": "-workbench.action.chat.cancel"
    },
    {
        "key": "ctrl+down",
        "command": "-workbench.action.chat.focusInput",
        "when": "inChat && !inChatInput"
    },
    {
        "key": "ctrl+i",
        "command": "-workbench.action.chat.holdToVoiceChatInChatView",
        "when": "chatIsEnabled && hasSpeechProvider && !chatSessionRequestInProgress && !editorFocus && !inChatInput && !inlineChatFocused && !notebookEditorFocused"
    },
    {
        "key": "ctrl+l",
        "command": "-workbench.action.chat.newChat",
        "when": "chatIsEnabled && inChat"
    },
    {
        "key": "ctrl+alt+pagedown",
        "command": "-workbench.action.chat.nextCodeBlock",
        "when": "chatIsEnabled && inChat"
    },
    {
        "key": "ctrl+f9",
        "command": "-workbench.action.chat.nextFileTree",
        "when": "chatIsEnabled && inChat"
    },
    {
        "key": "ctrl+alt+i",
        "command": "-workbench.action.chat.open"
    },
    {
        "key": "ctrl+alt+pageup",
        "command": "-workbench.action.chat.previousCodeBlock",
        "when": "chatIsEnabled && inChat"
    },
    {
        "key": "ctrl+shift+f9",
        "command": "-workbench.action.chat.previousFileTree",
        "when": "chatIsEnabled && inChat"
    },
    {
        "key": "delete",
        "command": "-workbench.action.chat.remove",
        "when": "inChat && !inChatInput"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-workbench.action.chat.sendToNewChat",
        "when": "chatInputHasText && inChatInput && !chatSessionRequestInProgress"
    },
    {
        "key": "ctrl+i",
        "command": "-workbench.action.chat.startVoiceChat",
        "when": "chatIsEnabled && hasSpeechProvider && inChatInput && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress && !terminalChatActiveRequest || chatIsEnabled && hasSpeechProvider && inlineChatFocused && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress && !terminalChatActiveRequest"
    },
    {
        "key": "ctrl+i",
        "command": "-workbench.action.chat.stopListeningAndSubmit",
        "when": "inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'view' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'view'"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+k ctrl+w",
        "command": "-workbench.action.closeAllEditors"
    },
    {
        "key": "ctrl+k ctrl+shift+w",
        "command": "-workbench.action.closeAllGroups"
    },
    {
        "key": "ctrl+k w",
        "command": "-workbench.action.closeEditorsInGroup"
    },
    {
        "key": "ctrl+k f",
        "command": "-workbench.action.closeFolder",
        "when": "emptyWorkspaceSupport && workbenchState != 'empty'"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "shift+escape",
        "command": "-workbench.action.closeQuickOpen",
        "when": "inQuickOpen"
    },
    {
        "key": "escape",
        "command": "-workbench.action.closeQuickOpen",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+k u",
        "command": "-workbench.action.closeUnmodifiedEditors"
    },
    {
        "key": "ctrl+shift+w",
        "command": "-workbench.action.closeWindow"
    },
    {
        "key": "alt+f4",
        "command": "-workbench.action.closeWindow"
    },
    {
        "key": "alt+f5",
        "command": "-workbench.action.compareEditor.nextChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "ctrl+k shift+o",
        "command": "-workbench.action.compareEditor.openSide",
        "when": "inDiffEditor"
    },
    {
        "key": "shift+alt+f5",
        "command": "-workbench.action.compareEditor.previousChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "ctrl+k o",
        "command": "-workbench.action.copyEditorToNewWindow",
        "when": "activeEditor"
    },
    {
        "key": "shift+f5",
        "command": "-workbench.action.debug.disconnect",
        "when": "focusedSessionIsAttach && inDebugMode"
    },
    {
        "key": "ctrl+shift+f5",
        "command": "-workbench.action.debug.restart",
        "when": "inDebugMode"
    },
    {
        "key": "ctrl+f5",
        "command": "-workbench.action.debug.run",
        "when": "debuggersAvailable && debugState != 'initializing'"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.start",
        "when": "debuggersAvailable && debugState == 'inactive'"
    },
    {
        "key": "ctrl+f11",
        "command": "-workbench.action.debug.stepIntoTarget",
        "when": "inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'"
    },
    {
        "key": "shift+f11",
        "command": "-workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f10",
        "command": "-workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "shift+f5",
        "command": "-workbench.action.debug.stop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "ctrl+k m",
        "command": "-workbench.action.editor.changeLanguageMode",
        "when": "!notebookEditorFocused"
    },
    {
        "key": "alt+`",
        "command": "-workbench.action.editorDictation.start",
        "when": "hasSpeechProvider && !editorReadonly && !speechToTextInProgress"
    },
    {
        "key": "ctrl+alt+v",
        "command": "-workbench.action.editorDictation.start",
        "when": "hasSpeechProvider && !editorReadonly && !speechToTextInProgress"
    },
    {
        "key": "ctrl+k p",
        "command": "-workbench.action.files.copyPathOfActiveFile"
    },
    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFile",
        "when": "true"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFileFolder",
        "when": "isMacNative && openFolderWorkspaceSupport"
    },
    {
        "key": "ctrl+k ctrl+o",
        "command": "-workbench.action.files.openFolder",
        "when": "openFolderWorkspaceSupport"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFolderViaWorkspace",
        "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+k ctrl+o",
        "command": "-workbench.action.files.openLocalFolder",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+k r",
        "command": "-workbench.action.files.revealActiveFileInWindows"
    },
    {
        "key": "ctrl+s",
        "command": "-workbench.action.files.save"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-workbench.action.files.saveAs"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-workbench.action.files.saveLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+k ctrl+shift+s",
        "command": "-workbench.action.files.saveWithoutFormatting"
    },
    {
        "key": "ctrl+shift+f",
        "command": "-workbench.action.findInFiles"
    },
    {
        "key": "ctrl+k ctrl+up",
        "command": "-workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+k ctrl+down",
        "command": "-workbench.action.focusBelowGroup"
    },
    {
        "key": "ctrl+8",
        "command": "-workbench.action.focusEighthEditorGroup"
    },
    {
        "key": "ctrl+5",
        "command": "-workbench.action.focusFifthEditorGroup"
    },
    {
        "key": "ctrl+1",
        "command": "-workbench.action.focusFirstEditorGroup"
    },
    {
        "key": "ctrl+4",
        "command": "-workbench.action.focusFourthEditorGroup"
    },
    {
        "key": "ctrl+k ctrl+left",
        "command": "-workbench.action.focusLeftGroup"
    },
    {
        "key": "f6",
        "command": "-workbench.action.focusNextPart"
    },
    {
        "key": "shift+f6",
        "command": "-workbench.action.focusPreviousPart"
    },
    {
        "key": "ctrl+k ctrl+right",
        "command": "-workbench.action.focusRightGroup"
    },
    {
        "key": "ctrl+2",
        "command": "-workbench.action.focusSecondEditorGroup"
    },
    {
        "key": "ctrl+7",
        "command": "-workbench.action.focusSeventhEditorGroup"
    },
    {
        "key": "ctrl+0",
        "command": "-workbench.action.focusSideBar"
    },
    {
        "key": "ctrl+6",
        "command": "-workbench.action.focusSixthEditorGroup"
    },
    {
        "key": "ctrl+3",
        "command": "-workbench.action.focusThirdEditorGroup"
    },
    {
        "key": "ctrl+g",
        "command": "-workbench.action.gotoLine"
    },
    {
        "key": "ctrl+shift+o",
        "command": "-workbench.action.gotoSymbol",
        "when": "!accessibilityHelpIsShown && !accessibleViewIsShown"
    },
    {
        "key": "down",
        "command": "-workbench.action.interactivePlayground.arrowDown",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "up",
        "command": "-workbench.action.interactivePlayground.arrowUp",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "pagedown",
        "command": "-workbench.action.interactivePlayground.pageDown",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "pageup",
        "command": "-workbench.action.interactivePlayground.pageUp",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "ctrl+k ctrl+shift+\\",
        "command": "-workbench.action.joinEditorInGroup",
        "when": "sideBySideEditorActive"
    },
    {
        "key": "ctrl+k enter",
        "command": "-workbench.action.keepEditor"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "-workbench.action.keybindingsReference"
    },
    {
        "key": "ctrl+9",
        "command": "-workbench.action.lastEditorInGroup"
    },
    {
        "key": "alt+0",
        "command": "-workbench.action.lastEditorInGroup"
    },
    {
        "key": "ctrl+k down",
        "command": "-workbench.action.moveActiveEditorGroupDown"
    },
    {
        "key": "ctrl+k left",
        "command": "-workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "ctrl+k right",
        "command": "-workbench.action.moveActiveEditorGroupRight"
    },
    {
        "key": "ctrl+k up",
        "command": "-workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "ctrl+shift+pageup",
        "command": "-workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "ctrl+shift+pagedown",
        "command": "-workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "shift+alt+1",
        "command": "-workbench.action.moveEditorToFirstGroup"
    },
    {
        "key": "shift+alt+9",
        "command": "-workbench.action.moveEditorToLastGroup"
    },
    {
        "key": "ctrl+alt+right",
        "command": "-workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+alt+left",
        "command": "-workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "ctrl+k ctrl+q",
        "command": "-workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "ctrl+shift+n",
        "command": "-workbench.action.newWindow"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "ctrl+k ctrl+pagedown",
        "command": "-workbench.action.nextEditorInGroup"
    },
    {
        "key": "alt+1",
        "command": "-workbench.action.openEditorAtIndex1"
    },
    {
        "key": "alt+2",
        "command": "-workbench.action.openEditorAtIndex2"
    },
    {
        "key": "alt+3",
        "command": "-workbench.action.openEditorAtIndex3"
    },
    {
        "key": "alt+4",
        "command": "-workbench.action.openEditorAtIndex4"
    },
    {
        "key": "alt+5",
        "command": "-workbench.action.openEditorAtIndex5"
    },
    {
        "key": "alt+6",
        "command": "-workbench.action.openEditorAtIndex6"
    },
    {
        "key": "alt+7",
        "command": "-workbench.action.openEditorAtIndex7"
    },
    {
        "key": "alt+8",
        "command": "-workbench.action.openEditorAtIndex8"
    },
    {
        "key": "alt+9",
        "command": "-workbench.action.openEditorAtIndex9"
    },
    {
        "key": "ctrl+k ctrl+s",
        "command": "-workbench.action.openGlobalKeybindings"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "ctrl+,",
        "command": "-workbench.action.openSettings"
    },
    {
        "key": "ctrl+shift+u",
        "command": "-workbench.action.output.toggleOutput",
        "when": "workbench.panel.output.active"
    },
    {
        "key": "ctrl+k shift+enter",
        "command": "-workbench.action.pinEditor",
        "when": "!activeEditorIsPinned"
    },
    {
        "key": "ctrl+pageup",
        "command": "-workbench.action.previousEditor"
    },
    {
        "key": "ctrl+k ctrl+pageup",
        "command": "-workbench.action.previousEditorInGroup"
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quickOpenView"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-workbench.action.quickchat.toggle",
        "when": "chatIsEnabled"
    },
    {
        "key": "ctrl+alt+o",
        "command": "-workbench.action.remote.showMenu"
    },
    {
        "key": "ctrl+shift+t",
        "command": "-workbench.action.reopenClosedEditor"
    },
    {
        "key": "ctrl+shift+h",
        "command": "-workbench.action.replaceInFiles"
    },
    {
        "key": "ctrl+shift+j",
        "command": "-workbench.action.search.toggleQueryDetails",
        "when": "inSearchEditor || searchViewletFocus"
    },
    {
        "key": "ctrl+k ctrl+t",
        "command": "-workbench.action.selectTheme"
    },
    {
        "key": "ctrl+k ctrl+p",
        "command": "-workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "f1",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "ctrl+shift+p",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "ctrl+\\",
        "command": "-workbench.action.splitEditor"
    },
    {
        "key": "ctrl+k ctrl+\\",
        "command": "-workbench.action.splitEditorDown"
    },
    {
        "key": "ctrl+k ctrl+shift+\\",
        "command": "-workbench.action.splitEditorInGroup",
        "when": "activeEditorCanSplitInGroup"
    },
    {
        "key": "ctrl+k ctrl+\\",
        "command": "-workbench.action.splitEditorLeft"
    },
    {
        "key": "ctrl+k ctrl+\\",
        "command": "-workbench.action.splitEditorOrthogonal"
    },
    {
        "key": "ctrl+k ctrl+\\",
        "command": "-workbench.action.splitEditorRight"
    },
    {
        "key": "ctrl+k ctrl+\\",
        "command": "-workbench.action.splitEditorUp"
    },
    {
        "key": "ctrl+shift+b",
        "command": "-workbench.action.tasks.build",
        "when": "taskCommandsRegistered"
    },
    {
        "key": "shift+escape",
        "command": "-workbench.action.terminal.chat.close",
        "when": "terminalChatFocus && terminalChatVisible"
    },
    {
        "key": "escape",
        "command": "-workbench.action.terminal.chat.close",
        "when": "terminalChatFocus && terminalChatVisible"
    },
    {
        "key": "ctrl+i",
        "command": "-workbench.action.terminal.chat.focusInput",
        "when": "terminalChatFocus && !inlineChatFocused"
    },
    {
        "key": "ctrl+up",
        "command": "-workbench.action.terminal.chat.focusInput",
        "when": "terminalChatFocus && !inlineChatFocused"
    },
    {
        "key": "ctrl+down",
        "command": "-workbench.action.terminal.chat.focusResponse",
        "when": "terminalChatFocus"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-workbench.action.terminal.chat.insertCommand",
        "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks"
    },
    {
        "key": "alt+enter",
        "command": "-workbench.action.terminal.chat.insertCommand",
        "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-workbench.action.terminal.chat.insertFirstCommand",
        "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest"
    },
    {
        "key": "alt+enter",
        "command": "-workbench.action.terminal.chat.insertFirstCommand",
        "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest"
    },
    {
        "key": "enter",
        "command": "-workbench.action.terminal.chat.makeRequest",
        "when": "terminalChatFocus && terminalHasBeenCreated && !inlineChatEmpty && !terminalChatActiveRequest || terminalChatFocus && terminalProcessSupported && !inlineChatEmpty && !terminalChatActiveRequest"
    },
    {
        "key": "down",
        "command": "-workbench.action.terminal.chat.nextFromHistory",
        "when": "terminalChatFocus"
    },
    {
        "key": "up",
        "command": "-workbench.action.terminal.chat.previousFromHistory",
        "when": "terminalChatFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "-workbench.action.terminal.chat.runCommand",
        "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks"
    },
    {
        "key": "ctrl+enter",
        "command": "-workbench.action.terminal.chat.runFirstCommand",
        "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest"
    },
    {
        "key": "escape",
        "command": "-workbench.action.terminal.clearSelection",
        "when": "terminalFocusInAny && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocusInAny && terminalProcessSupported && terminalTextSelected && !terminalFindVisible"
    },
    {
        "key": "ctrl+c",
        "command": "-workbench.action.terminal.copyAndClearSelection",
        "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-workbench.action.terminal.copySelection",
        "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused"
    },
    {
        "key": "f3",
        "command": "-workbench.action.terminal.findNext",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "shift+enter",
        "command": "-workbench.action.terminal.findNext",
        "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
    },
    {
        "key": "shift+f3",
        "command": "-workbench.action.terminal.findPrevious",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "enter",
        "command": "-workbench.action.terminal.findPrevious",
        "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
    },
    {
        "key": "ctrl+down",
        "command": "-workbench.action.terminal.focus",
        "when": "accessibilityModeEnabled && accessibleViewOnLastLine && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewOnLastLine && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "ctrl+up",
        "command": "-workbench.action.terminal.focusAccessibleBuffer",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+f2",
        "command": "-workbench.action.terminal.focusAccessibleBuffer",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+f",
        "command": "-workbench.action.terminal.focusFind",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-workbench.action.terminal.focusHover",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-workbench.action.terminal.focusNext",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "alt+down",
        "command": "-workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+pageup",
        "command": "-workbench.action.terminal.focusPrevious",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "alt+up",
        "command": "-workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+\\",
        "command": "-workbench.action.terminal.focusTabs",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "ctrl+g",
        "command": "-workbench.action.terminal.goToRecentDirectory",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+escape",
        "command": "-workbench.action.terminal.hideFind",
        "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "escape",
        "command": "-workbench.action.terminal.hideFind",
        "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "delete",
        "command": "-workbench.action.terminal.killActiveTab",
        "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+`",
        "command": "-workbench.action.terminal.new",
        "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-workbench.action.terminal.openNativeConsole",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+shift+v",
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+v",
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "f2",
        "command": "-workbench.action.terminal.renameActiveTab",
        "when": "terminalHasBeenCreated && terminalTabsFocus && terminalTabsSingularSelection || terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.terminal.runRecentCommand",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported || accessibilityModeEnabled && accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "ctrl+alt+r",
        "command": "-workbench.action.terminal.runRecentCommand",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+alt+pagedown",
        "command": "-workbench.action.terminal.scrollDown",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "shift+pagedown",
        "command": "-workbench.action.terminal.scrollDownPage",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "ctrl+end",
        "command": "-workbench.action.terminal.scrollToBottom",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "ctrl+end",
        "command": "-workbench.action.terminal.scrollToBottomAccessibleView",
        "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "ctrl+down",
        "command": "-workbench.action.terminal.scrollToNextCommand",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+up",
        "command": "-workbench.action.terminal.scrollToPreviousCommand",
        "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+home",
        "command": "-workbench.action.terminal.scrollToTop",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "ctrl+home",
        "command": "-workbench.action.terminal.scrollToTopAccessibleView",
        "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "ctrl+alt+pageup",
        "command": "-workbench.action.terminal.scrollUp",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "shift+pageup",
        "command": "-workbench.action.terminal.scrollUpPage",
        "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "ctrl+shift+down",
        "command": "-workbench.action.terminal.selectToNextCommand",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+up",
        "command": "-workbench.action.terminal.selectToPreviousCommand",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+v",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "args": {
            "text": "\u0016"
        }
    },
    {
        "key": "ctrl+space",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "args": {
            "text": "\u001b[24~a"
        }
    },
    {
        "key": "alt+space",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "args": {
            "text": "\u001b[24~b"
        }
    },
    {
        "key": "shift+enter",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "args": {
            "text": "\u001b[24~c"
        }
    },
    {
        "key": "ctrl+space",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "config.terminal.integrated.suggest.enabled && terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "args": {
            "text": "\u001b[24~e"
        }
    },
    {
        "key": "ctrl+alt+r",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "accessibilityModeEnabled && terminalFocus",
        "args": {
            "text": "\u0012"
        }
    },
    {
        "key": "ctrl+alt+g",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u0007"
        }
    },
    {
        "key": "ctrl+backspace",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u0017"
        }
    },
    {
        "key": "ctrl+backspace",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus && terminalShellType == 'cmd'",
        "args": {
            "text": "\b"
        }
    },
    {
        "key": "ctrl+delete",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u001bd"
        }
    },
    {
        "key": "ctrl+shift+2",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u0000"
        }
    },
    {
        "key": "ctrl+shift+6",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u001e"
        }
    },
    {
        "key": "ctrl+/",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u001f"
        }
    },
    {
        "key": "ctrl+.",
        "command": "-workbench.action.terminal.showQuickFixes",
        "when": "terminalFocus"
    },
    {
        "key": "alt+z",
        "command": "-workbench.action.terminal.sizeToContentWidth",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+5",
        "command": "-workbench.action.terminal.split",
        "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
    },
    {
        "key": "ctrl+shift+5",
        "command": "-workbench.action.terminal.splitActiveTab",
        "when": "terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "alt+c",
        "command": "-workbench.action.terminal.toggleFindCaseSensitive",
        "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported"
    },
    {
        "key": "alt+r",
        "command": "-workbench.action.terminal.toggleFindRegex",
        "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported"
    },
    {
        "key": "alt+w",
        "command": "-workbench.action.terminal.toggleFindWholeWord",
        "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported"
    },
    {
        "key": "ctrl+`",
        "command": "-workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+alt+b",
        "command": "-workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "shift+alt+0",
        "command": "-workbench.action.toggleEditorGroupLayout"
    },
    {
        "key": "f11",
        "command": "-workbench.action.toggleFullScreen",
        "when": "!isIOS"
    },
    {
        "key": "ctrl+k ctrl+m",
        "command": "-workbench.action.toggleMaximizeEditorGroup",
        "when": "editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+k z",
        "command": "-workbench.action.toggleZenMode",
        "when": "!isAuxiliaryWindowFocusedContext"
    },
    {
        "key": "ctrl+k shift+enter",
        "command": "-workbench.action.unpinEditor",
        "when": "activeEditorIsPinned"
    },
    {
        "key": "ctrl+numpad_add",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "ctrl+shift+=",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "ctrl+=",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "ctrl+numpad_subtract",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "ctrl+shift+-",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "ctrl+-",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "ctrl+numpad0",
        "command": "-workbench.action.zoomReset"
    },
    {
        "key": "ctrl+shift+m",
        "command": "-workbench.actions.view.problems",
        "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "escape",
        "command": "-workbench.banner.focusBanner",
        "when": "bannerFocused"
    },
    {
        "key": "down",
        "command": "-workbench.banner.focusNextAction",
        "when": "bannerFocused"
    },
    {
        "key": "right",
        "command": "-workbench.banner.focusNextAction",
        "when": "bannerFocused"
    },
    {
        "key": "up",
        "command": "-workbench.banner.focusPreviousAction",
        "when": "bannerFocused"
    },
    {
        "key": "left",
        "command": "-workbench.banner.focusPreviousAction",
        "when": "bannerFocused"
    },
    {
        "key": "ctrl+shift+y",
        "command": "-workbench.debug.action.toggleRepl",
        "when": "workbench.panel.repl.view.active"
    },
    {
        "key": "ctrl+k c",
        "command": "-workbench.files.action.compareWithClipboard"
    },
    {
        "key": "ctrl+k d",
        "command": "-workbench.files.action.compareWithSaved"
    },
    {
        "key": "ctrl+k e",
        "command": "-workbench.files.action.focusOpenEditorsView",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "key": "escape",
        "command": "-workbench.statusBar.clearFocus",
        "when": "statusBarFocused"
    },
    {
        "key": "home",
        "command": "-workbench.statusBar.focusFirst",
        "when": "statusBarFocused"
    },
    {
        "key": "end",
        "command": "-workbench.statusBar.focusLast",
        "when": "statusBarFocused"
    },
    {
        "key": "down",
        "command": "-workbench.statusBar.focusNext",
        "when": "statusBarFocused"
    },
    {
        "key": "right",
        "command": "-workbench.statusBar.focusNext",
        "when": "statusBarFocused"
    },
    {
        "key": "up",
        "command": "-workbench.statusBar.focusPrevious",
        "when": "statusBarFocused"
    },
    {
        "key": "left",
        "command": "-workbench.statusBar.focusPrevious",
        "when": "statusBarFocused"
    },
    {
        "key": "ctrl+shift+d",
        "command": "-workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "ctrl+shift+e",
        "command": "-workbench.view.explorer",
        "when": "viewContainer.workbench.view.explorer.enabled"
    },
    {
        "key": "ctrl+shift+x",
        "command": "-workbench.view.extensions",
        "when": "viewContainer.workbench.view.extensions.enabled"
    },
    {
        "key": "ctrl+shift+g",
        "command": "-workbench.view.scm",
        "when": "workbench.scm.active"
    },
    {
        "key": "ctrl+shift+f",
        "command": "-workbench.view.search",
        "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/"
    },
    {
        "key": "ctrl+right",
        "command": "-breadcrumbs.focusNextWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+left",
        "command": "-breadcrumbs.focusPreviousWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "escape",
        "command": "-breadcrumbs.selectEditor",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "down",
        "command": "-notebook.cell.nullAction",
        "when": "notebookOutputInputFocused"
    },
    {
        "key": "up",
        "command": "-notebook.cell.nullAction",
        "when": "notebookOutputInputFocused"
    },
    {
        "key": "ctrl+a",
        "command": "-notebook.cell.output.selectAll",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-notebook.focusNextEditor",
        "when": "accessibilityModeEnabled && notebookCellEditorFocused"
    },
    {
        "key": "ctrl+pageup",
        "command": "-notebook.focusPreviousEditor",
        "when": "accessibilityModeEnabled && notebookCellEditorFocused"
    },
    {
        "key": "ctrl+k down",
        "command": "-views.moveViewDown",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+k left",
        "command": "-views.moveViewLeft",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+k right",
        "command": "-views.moveViewRight",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+k up",
        "command": "-views.moveViewUp",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-workbench.action.debug.nextConsole",
        "when": "inDebugRepl"
    },
    {
        "key": "ctrl+pageup",
        "command": "-workbench.action.debug.prevConsole",
        "when": "inDebugRepl"
    },
    {
        "key": "tab",
        "command": "-workbench.action.terminal.acceptSelectedSuggestion",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "enter",
        "command": "-workbench.action.terminal.acceptSelectedSuggestion",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "escape",
        "command": "-workbench.action.terminal.hideSuggestWidget",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "ctrl+shift+o",
        "command": "-workbench.action.terminal.openDetectedLink",
        "when": "terminalFocus && terminalHasBeenCreated"
    },
    {
        "key": "ctrl+shift+g",
        "command": "-workbench.action.terminal.openDetectedLink",
        "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "pagedown",
        "command": "-workbench.action.terminal.selectNextPageSuggestion",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "down",
        "command": "-workbench.action.terminal.selectNextSuggestion",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "pageup",
        "command": "-workbench.action.terminal.selectPrevPageSuggestion",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "up",
        "command": "-workbench.action.terminal.selectPrevSuggestion",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "f6",
        "command": "-workbench.action.debug.pause",
        "when": "debugState == 'running'"
    },
    {
        "key": "alt+down",
        "command": "-workbench.action.terminal.accessibleBufferGoToNextCommand",
        "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "alt+up",
        "command": "-workbench.action.terminal.accessibleBufferGoToPreviousCommand",
        "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "f2",
        "command": "-debug.renameWatchExpression",
        "when": "watchExpressionsFocused"
    },
    {
        "key": "f2",
        "command": "-debug.setVariable",
        "when": "variablesFocused"
    },
    {
        "key": "space",
        "command": "-debug.toggleBreakpoint",
        "when": "breakpointsFocused && !inputFocus"
    },
    {
        "key": "escape",
        "command": "-notebook.cell.quitEdit",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "ctrl+v",
        "command": "-filesExplorer.paste",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "shift+delete",
        "command": "-deleteFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "delete",
        "command": "-deleteFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "ctrl+shift+.",
        "command": "-editor.action.accessibleViewGoToSymbol",
        "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown"
    },
    {
        "key": "ctrl+shift+o",
        "command": "-editor.action.accessibleViewGoToSymbol",
        "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown"
    },
    {
        "key": "ctrl+e",
        "command": "-editor.action.toggleScreenReaderAccessibilityMode",
        "when": "accessibilityHelpIsShown"
    },
    {
        "key": "shift+alt+f1",
        "command": "-editor.action.toggleScreenReaderAccessibilityMode"
    },
    {
        "key": "escape",
        "command": "-editor.closeCallHierarchy",
        "when": "callHierarchyVisible && !config.editor.stablePeek"
    },
    {
        "key": "escape",
        "command": "-editor.closeTypeHierarchy",
        "when": "typeHierarchyVisible && !config.editor.stablePeek"
    },
    {
        "key": "enter",
        "command": "-explorer.openAndPassFocus",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "escape",
        "command": "-filesExplorer.cancelCut",
        "when": "explorerResourceCut && filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "ctrl+c",
        "command": "-filesExplorer.copy",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus"
    },
    {
        "key": "ctrl+x",
        "command": "-filesExplorer.cut",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "space",
        "command": "-filesExplorer.openFilePreserveFocus",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "home",
        "command": "-firstCompressedFolder",
        "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "-inlineChat.acceptChanges",
        "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatDocumentChanged || inlineChatHasProvider && inlineChatVisible && config.inlineChat.mode != 'preview'"
    },
    {
        "key": "end",
        "command": "-lastCompressedFolder",
        "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus"
    },
    {
        "key": "delete",
        "command": "-moveFileToTrash",
        "when": "explorerResourceMoveableToTrash && filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "right",
        "command": "-nextCompressedFolder",
        "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus"
    },
    {
        "key": "left",
        "command": "-previousCompressedFolder",
        "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus"
    },
    {
        "key": "delete",
        "command": "-remote.tunnel.closeInline",
        "when": "tunnelCloseable && tunnelViewFocus"
    },
    {
        "key": "ctrl+c",
        "command": "-remote.tunnel.copyAddressInline",
        "when": "tunnelViewFocus && tunnelType == 'Detected' && tunnelViewMultiSelection == 'undefined' || tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'"
    },
    {
        "key": "f2",
        "command": "-remote.tunnel.label",
        "when": "tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'"
    },
    {
        "key": "f2",
        "command": "-renameFile",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f11",
        "command": "-workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "shift+escape",
        "command": "-closeReferenceSearch",
        "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus"
    },
    {
        "key": "escape",
        "command": "-closeReferenceSearch",
        "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus"
    },
    {
        "key": "left",
        "command": "-list.stickyScroll.collapse",
        "when": "treestickyScrollFocused"
    },
    {
        "key": "enter",
        "command": "-list.stickyScrollselect",
        "when": "treestickyScrollFocused"
    },
    {
        "key": "space",
        "command": "-list.stickyScrolltoggleExpand",
        "when": "treestickyScrollFocused"
    },
    {
        "key": "escape",
        "command": "-notifications.hideList",
        "when": "notificationCenterVisible"
    },
    {
        "key": "ctrl+alt+right",
        "command": "-quickInput.acceptInBackground",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+right",
        "command": "-quickInput.acceptInBackground",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
    },
    {
        "key": "alt+right",
        "command": "-quickInput.acceptInBackground",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
    },
    {
        "key": "right",
        "command": "-quickInput.acceptInBackground",
        "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.quickInputBack",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenNavigateNextInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.quickOpenNavigateNextInRecentFilesPicker",
        "when": "inQuickOpen && inRecentFilesPicker"
    },
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quickOpenNavigateNextInViewPicker",
        "when": "inQuickOpen && inViewsPicker"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.quickOpenNavigatePreviousInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "ctrl+shift+e",
        "command": "-workbench.action.quickOpenNavigatePreviousInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+shift+p",
        "command": "-workbench.action.quickOpenNavigatePreviousInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+shift+r",
        "command": "-workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
        "when": "inQuickOpen && inRecentFilesPicker"
    },
    {
        "key": "ctrl+shift+q",
        "command": "-workbench.action.quickOpenNavigatePreviousInViewPicker",
        "when": "inQuickOpen && inViewsPicker"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+shift+f",
        "command": "-workbench.action.terminal.searchWorkspace",
        "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-workbench.action.toggleDevTools",
        "when": "isDevelopment"
    },
    {
        "key": "escape",
        "command": "-notifications.hideToasts",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "escape",
        "command": "-workbench.action.chat.stopListening",
        "when": "voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || voiceChatInProgress && scopedVoiceChatInProgress == 'view'"
    },
    {
        "key": "escape",
        "command": "-workbench.action.chat.stopReadChatItemAloud",
        "when": "scopedChatSynthesisInProgress"
    },
    {
        "key": "escape",
        "command": "-workbench.action.editorDictation.stop",
        "when": "editorDictation.inProgress"
    },
    {
        "key": "escape",
        "command": "-workbench.action.speech.stopReadAloud",
        "when": "scopedChatSynthesisInProgress && textToSpeechInProgress"
    },
    {
        "key": "f10",
        "command": "-extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'"
    },
    {
        "key": "ctrl+k ctrl+alt+s",
        "command": "-git.stageSelectedRanges",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "key": "ctrl+shift+v",
        "command": "-markdown.showPreview",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "shift+alt+f12",
        "command": "-references-view.findReferences",
        "when": "editorHasReferenceProvider"
    },
    {
        "key": "f11",
        "command": "-extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'node' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-node'"
    },
    {
        "key": "ctrl+k ctrl+n",
        "command": "-git.unstageSelectedRanges",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "key": "ctrl+k v",
        "command": "-markdown.showPreviewToSide",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "f4",
        "command": "-references-view.next",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "-git.revertSelectedRanges",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "key": "shift+f4",
        "command": "-references-view.prev",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "shift+alt+h",
        "command": "-references-view.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider"
    },
    {
        "key": "ctrl+enter",
        "command": "-workbench.action.chat.insertCodeBlock",
        "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat && !inChatInput"
    },
    {
        "key": "ctrl+i",
        "command": "-workbench.action.terminal.chat.start",
        "when": "terminalChatAgentRegistered && terminalFocusInAny && terminalHasBeenCreated || terminalChatAgentRegistered && terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "ctrl+.",
        "command": "-acceptSelectedCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "enter",
        "command": "-acceptSelectedCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "shift+escape",
        "command": "-hideCodeActionWidget",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "escape",
        "command": "-hideCodeActionWidget",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+enter",
        "command": "-previewSelectedCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+down",
        "command": "-selectNextCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "down",
        "command": "-selectNextCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+up",
        "command": "-selectPrevCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "up",
        "command": "-selectPrevCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "escape",
        "command": "-diffEditor.exitCompareMove",
        "when": "comparingMovedCode"
    },
    {
        "key": "ctrl+space",
        "command": "-editor.action.inlineEdits.accept",
        "when": "inlineEditsVisible"
    }
]